<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Chili.Opf3</name>
    </assembly>
    <members>
        <member name="T:Chili.Opf3.Relations.PersistRelationships">
            <summary>
            Specifies the relationship the child objects and its parent object. It specifies which one
            is saved first.
            </summary>
            <remarks>
            PersistRelationship specifies the relationship the child objects and its parent object. 
            This enumeration is only used in the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> 
            to specify the direction of the relation in 1:1 relations. For 1:n it is not required to use 
            this enumeration.
            </remarks>
        </member>
        <member name="F:Chili.Opf3.Relations.PersistRelationships.ParentFirst">
            <summary>
            Applying this member means that the child object holds a foreign key to the owner object.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Relations.PersistRelationships.ChildFirst">
            <summary>
            Applying this member means the owner object holds a foreign key to the child object.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Storages.GenericSqlTransaction">
            <summary>
            This class provides a generic transaction object for storages that support SQL and ADO.NET.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Storages.SqlTransactionBase">
            <summary>
            This class provides a general transaction object for storages that inherit from
            <see cref="T:Chili.Opf3.Storages.SqlStorageBase">SqlStorageBase</see>. It adds the references to ADO.NET
            to the transaction objects, since it encapsulates an ADO.NET transaction internally.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Storages.Transaction">
             <summary>
             Class that provides a generic transaction object. It is created by a 
             class that implements <see cref="T:Chili.Opf3.Storages.ITransactionStorage">ITransactionStorage</see>.
            	</summary>
            	<remarks>
             <para>
             This class provides a transaction object that is created by transactional storages.
             Those are storages that implement the <see cref="T:Chili.Opf3.Storages.ITransactionStorage">ITransactionStorage</see> 
             interface.
             </para>
             <para>
             Transaction inherits the <see cref="T:System.IDisposable">IDisposable</see> interface. That is done
             to automatically roll back a transaction if not committed.
             </para>
             <para>
             The class provides methods to roll back or commit a transaction. It is recommended to use
             those methods instaead of the one provides by the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>
             to rollback or commit a transaction.
             </para>
            	</remarks>
            	<example>
             <example>
             The following example shows how to work with Transaction. 
             <code lang="CS">
             // Creates a new ObjectContext that uses an MsSql Server as storage.
             ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                 "localhost", "application"));
             
             // Other code...
            
             try
            	{
                 // Starts a transaction on the context.
                 // The using statement can be used here, because Transaction implements 
                 // the IDisposable interface.
                 using(Transaction t = context.StartTransaction())
                 {
                     // Tries to save an object.
            			context.PersistChanges(user);
                     // The save was successful, let's commit now.
            			t.Commit();
                 }
            	}
            	catch (StorageException ex)
            	{
                 // We got an exception. Just print the message.
            	    Console.WriteLine("An exception happened.");
            	}
             </code>
             </example>
             </example>
        </member>
        <member name="M:Chili.Opf3.Storages.Transaction.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.Transaction">Transaction Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.Transaction.OnTransactionCommit(System.EventArgs)">
            <summary>
            Needs to be invoked each time a transaction is committed. This method
            fires the TransactionCommit event.
            </summary>
            <param name="e">The EventArgs for the event.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.Transaction.OnTransactionRollback(System.EventArgs)">
            <summary>
            Needs to be invoked each time a transaction is committed. This method
            fires the TransactionCommit event.
            </summary>
            <param name="e">The EventArgs for the event.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.Transaction.Commit">
            <summary>
            Commits the current transaction.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.Transaction.Rollback">
            <summary>
            Rolls the current transaction back.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.Transaction.AddObjectInfoInternal(Chili.Opf3.ObjectInfo)">
            <summary>
            Adds the current <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object. This is required to roll
            the state of the persistent back during a roll back.
            </summary>
            <param name="oi"><see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> that is backed up.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.Transaction.AddObjectInfo(Chili.Opf3.ObjectInfo)">
            <summary>
            Adds the current <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object. This is required to roll
            the state of the persistent back during a roll back.
            </summary>
            <param name="oi"><see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> that is backed up.</param>
            <returns>Whether the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> has been added.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.Transaction.RollbackObjectInfo(Chili.Opf3.ObjectInfo)">
            <summary>
            Rolls the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> back to the last version.
            </summary>
            <param name="oi">The <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object that rolled back.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.Transaction.Dispose">
            <summary>
            Disposes this instance of the transaction object. If the
            transaction hasn't been committed, it is rolled back automatically.
            </summary>
        </member>
        <member name="E:Chili.Opf3.Storages.Transaction.TransactionCommit">
            <summary>
            Fired if the transaction had been committed in any way.
            </summary>
        </member>
        <member name="E:Chili.Opf3.Storages.Transaction.TransactionRollback">
            <summary>
            Fired if the transaction had been rolled back in any way.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Storages.Transaction.ID">
            <summary>
            Returns the ID of the transaction.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Storages.Transaction.Active">
            <summary>
            Returns whether the transaction is active.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlTransactionBase.#ctor(System.Data.IDbTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.SqlTransactionBase">SqlTransactionBase Class</see>.
            </summary>
            <param name="transaction">Specifies the current transaction on the storage.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlTransactionBase.Commit">
            <summary>
            Commits the current transaction.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlTransactionBase.Rollback">
            <summary>
            Rolls the current transaction back.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Storages.SqlTransactionBase.InnerTransaction">
            <summary>
            Returns the IDbTransaction of the current transaction or null if no longer active.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Storages.SqlTransactionBase.Active">
            <summary>
            Returns whether the transaction is active.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.GenericSqlTransaction.#ctor(System.Data.IDbTransaction)">
            <summary>
            Creates an instance of the <see cref="T:Chili.Opf3.Storages.GenericSqlTransaction">GenericSqlTransaction Class</see>.
            </summary>
            <param name="transaction">Specifies the current transaction on the storage.</param>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.SortOrders">
            <summary>Specifies how resultset of a query is sorted.</summary>
            <remarks>
            This enumeration is used by the framework to specify how a result set is sorted.
            </remarks>
        </member>
        <member name="F:Chili.Opf3.Query.OPathParser.SortOrders.Ascending">
            <summary>
            Sorts the result from the element with the smallest value to the one with the highest value.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.OPathParser.SortOrders.Descending">
            <summary>
            Sorts the result from the element with the highest value to the one with the smallest value.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.Token">
            <summary>
            Represents a token returned by the <see cref="T:Chili.Opf3.Query.OPathParser.Tokenizer">Tokenizer</see> class.
            </summary>
            <remarks>
            This class represents a token that is returned by the <see cref="T:Chili.Opf3.Query.OPathParser.Tokenizer">Tokenizer</see>
            class during parsing of the OPath expression.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Token.#ctor(Chili.Opf3.Query.OPathParser.TokenKinds,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.OPathParser.Token">Token Class</see>.
            </summary>
            <param name="tokenKind">Type of the token.</param>
            <param name="value">String representation of the token.</param>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.Token.TokenKind">
            <summary>
            Returns the type of the token.
            </summary>
            <value>The type of the token.</value>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.Token.Value">
            <summary>
            Specifies the content of the token (the string representation of the token).
            </summary>
            <value>The content of the token.</value>
        </member>
        <member name="T:Chili.Opf3.IPopulateHelper">
            <summary>
            This interface that is implemented by objects that are populated manually.
            </summary>
            <remarks>
            	<para>This interface is implemented by classes that won't let the framework
                automatically populate them with data or retrieve data from them via reflection.</para>
            	<para>If the framework encounters a persistent object that implements this
                interface it gives the content of the field from the storage (in combination with
                the name of the property that is mapped to that field) as value to the class. The
                class itself has to populate the property in an appropriate way.</para>
            	<para><b>Attention:</b> Throw an exception if something goes wrong while manually
                populating the object. This will solve problems like loss of data etc.</para>
            </remarks>
            <example>
                The following example shows how to implement the interface. 
                <code lang="CS">
            [Persistent("USER")]
            public class User : IPopulateHelper
            {
                public object this[string propertyName]
                {
                    get
                    {
                        switch(propertyName)
                        {
                            case "Name":
                                return Name;
                            // ... Other properties.
                            default:
                                throw new Exception();
                        }
                    }
                    set
                    {
                        switch(propertyName)
                        {
                            case "Name":
                                Name = value;
                                break;
                            // ... Other properties.
                            default:
                                throw new Exception();
                        }
                    }
                }
             
                // ... Other properties and code.
            }
                </code>
            </example>
        </member>
        <member name="P:Chili.Opf3.IPopulateHelper.Item(System.String)">
            <summary>
            Indexer used to populate the persistent object. For additional information of how
            to implement the interface look at the
            <see cref="T:Chili.Opf3.IPopulateHelper">IPopulateHelper</see> class definition.
            </summary>
            <value>Returns the value of the requested property.</value>
            <param name="propertyName">
            Name of the property that's data is retrieved or that is populated with data from
            the storage.
            </param>
        </member>
        <member name="T:Chili.Opf3.Query.QueryTypes">
            <summary>Contains different types of an <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see>.</summary>
            <remarks>
            This enumeration contains the types of an <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see>. The
            type of the query should be discovered by the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see>
            itself.
            </remarks>
        </member>
        <member name="F:Chili.Opf3.Query.QueryTypes.Insert">
            <summary>
            Queries marked with this member of the enumeration insert objects in the
            storage.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.QueryTypes.Update">
            <summary>
            Queries marked with this member of the enumeration update objects in the
            storage.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.QueryTypes.Load">
            <summary>
            Queries marked with this member of the enumeration load objects from the storage.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.QueryTypes.Delete">
            <summary>
            Queries marked with this member of the enumeration delete objects from the
            storage.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.QueryTypes.Unknown">
            <summary>
            The type of the query couldn't be estimated or is unknown.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Storages.StorageBase">
            <summary>
            Abstract base class that implements the functionality to access storages.
            </summary>
            <remarks>
            This class implements a abstract base class to access any kind of storage. It
            provides the main functionality and some methods that have to be overriden in derived classes.
            </remarks>
            <example>
            For examples how to implement your own storage see: MsSqlStorage, OracleStorage or any other 
            storage that comes with the framework.
            </example>
        </member>
        <member name="T:Chili.Opf3.Storages.IStorage">
            <summary>This interface is implemented by a class to represent a physical storage.</summary>
            <remarks>
            	<para>A class that encapsulates a physical storage (for example:
                <see cref="T:Chili.Opf3.Storages.OleDb.AccessStorage">AccessStorage</see>) has to implement
                this interface to make sure that the framework recognizes it as storage and can use
                it. It contains the main functionality to execute a command on the storage, to get
                an <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> and also a method
                <see cref="M:Chili.Opf3.Storages.IStorage.ResolveStorageNullValue(System.Object,System.Type)">ResolveStorageNullValue</see>
                that is invoked by the
                <see cref="T:Chili.Opf3.Storages.ObjectDataAdapter">ObjectDataAdapter</see> to resolve
                DBNulls that are returned by the storage.</para>
            	<para><b>Attention:</b> Please implement at least a constructor that takes as
                argument the connection string.</para>
            </remarks>
            <example>
            <see cref="T:Chili.Opf3.Storages.MsSql.MsSqlStorage">MsSqlStorage</see>, 
            <see cref="T:Chili.Opf3.Storages.Oracle.OracleStorage">OracleStorage</see> or any other storage that comes with the
            framework.
            </example>
        </member>
        <member name="M:Chili.Opf3.Storages.IStorage.ExecuteCommand(Chili.Opf3.Query.IQuery)">
            <summary>
            Executes a command on the storage that does not expect any results. It the method
            returns an argument it is used by the framework to set the
            <see cref="P:Chili.Opf3.FieldAttribute.AutoNumber">AutoNumber</see> property of the persistent
            object.
            </summary>
            <param name="query"><see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is compiled and executed on the storage.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.IStorage.ExecuteReader``1(Chili.Opf3.ObjectContext,Chili.Opf3.Query.IQuery)">
            <summary>
            Executes and compiles the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> and returns
            an <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> with the resultsset.
            </summary>
            <param name="context">
            	<see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> that is connected with the
            <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see>.
            </param>
            <param name="query">
            	<see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is compiled and executed on the
            storage.
            </param>
        </member>
        <member name="M:Chili.Opf3.Storages.IStorage.ResolveStorageNullValue(System.Object,System.Type)">
            <summary>
            Handles the DBNull value for the given type.
            </summary>
            <param name="value">Value that should be handled.</param>
            <param name="type">Type of the value that is handled.</param>
        </member>
        <member name="P:Chili.Opf3.Storages.IStorage.StorageCommandBuilders">
            <summary>
            Returns the list of registered classes that implement the 
            <see cref="T:Chili.Opf3.Storages.IStorageCommandBuilder">IStorageCommandBuilder</see> interfaces. Those classes
            provide the fuctionality to convert storage independent queries to storage dependent queries.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageBase.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.StorageBase">StorageBase Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageBase.ExecuteCommand(Chili.Opf3.Query.IQuery)">
            <summary>Executes a command on the storage that does not expect any results.</summary>
            <remarks>
            If the method returns an argument it is used by the framework to set the
                 <see cref="P:Chili.Opf3.FieldAttribute.AutoNumber">AutoNumber</see> property of the
                 persistent object.
            </remarks>
            <returns>An object that represents the value of the %field or null.</returns>
            <param name="query">
            	<see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is compiled and executed on the
            storage.
            </param>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageBase.ExecuteReader``1(Chili.Opf3.ObjectContext,Chili.Opf3.Query.IQuery)">
            <summary>
            Executes the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> and returns an 
            <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> with the results of the query.
            </summary>
            <param name="context">
            	<see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> connected with the
            <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see>.
            </param>
            <param name="query">
            	<see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is compiled and executed on the
            storage.
            </param>
            <exception cref="T:System.ArgumentNullException">Query is null or context is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageBase.ResolveStorageNullValue(System.Object,System.Type)">
            <summary>
            	<para><b>Attention:</b> This method is not intended to be used in your code.</para>
            	<para>Handles the DBNull value for the given type.</para>
            </summary>
            <remarks>
            If the framework gets a DBNull value from the storage while populating a
            persistent object it calls this method to let the storage decide what do to with value.
            The storage has to convert the value in an appropriate way.
            </remarks>
            <param name="value">Value that should be handled.</param>
            <param name="type">Type of the value that is handled.</param>
            <exception cref="T:Chili.Opf3.InvalidTypeException">The type of the value is not valid for DBNull handling. 
            It is not supported by the framework.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageBase.CreateObjectReader``1(Chili.Opf3.ObjectContext,System.Data.IDataReader)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader Class</see>.
            </summary>
            <param name="context">An instance of the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> that is passed to the storage.</param>
            <param name="innerReader">The IDataReader returned by the storage (after executing the command on the storage).</param>
            <returns></returns>
        </member>
        <member name="P:Chili.Opf3.Storages.StorageBase.StorageCommandBuilders">
            <summary>
            Returns the list of registered classes that implement the 
            <see cref="T:Chili.Opf3.Storages.IStorageCommandBuilder">IStorageCommandBuilder</see> interfaces. Those classes
            provide the fuctionality to convert storage independent queries to storage dependent queries.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Storages.MsSql.MsSqlStorage">
            <summary>Storage class that encapsulates a pyhsical Ms Sql Server database.</summary>
            <remarks>
            	<para>This class encapsulates a physical Ms Sql Server database. It is used to access to
                an Ms Sql Server database that is installed somewhere on your or on a remote machine. The storage
                implements the basic interfaces, such as
                <see cref="T:Chili.Opf3.Storages.IStorage">IStorage</see> for the basic storage IO
                functinality and
                <see cref="T:Chili.Opf3.Storages.ITransactionStorage">ITransactionStorage</see> for the
                transaction management.</para>
            	<para><b>Attention:</b> You should not access the methods of the storage directly
                but instead register the storage with your instances of the
                <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>. The
                <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> accesses the methods internally
                to get the objects from the storage.</para>
            </remarks>
            <example>
            The following example shows how you should use the Ms Sql Server 2000/2005 storage in your 
            applications.
            <code lang="CS">
            // ... Other code
            
            // Creates a new ObjectContext that uses an Ms Sql Server database as storage.
            // You should only pass an instance of the storage to your ObjectContext.
            // That's it! Nothing more. The methods of the storage are accessed
            // by the context internally.
            ObjectContext context = new ObjectContext(
            	new MsSqlStorage("... some ConnectionString ..."));
            
            // ... Other code
            </code>
            </example>
        </member>
        <member name="T:Chili.Opf3.Storages.SqlStorageBase">
            <summary>
            Abstract base class that implements the functionality to access SQL storages.
            </summary>
            <remarks>
            This class implements a abstract base class to access any kind of SQL storage. It
            provides the main functionality and some methods that have to be overriden in derived classes.
            </remarks>
            <example>
            For examples how to implement your own storage see: MsSqlStorage, OracleStorage or any other 
            storage that comes with the framework.
            </example>
        </member>
        <member name="T:Chili.Opf3.Storages.ITransactionStorage">
            <summary>This interface is implemented by a storage that supports transactions.</summary>
            <remarks>
            This interface is implemented by storages that support transactions. A transaction is an 
            atomic action that can be rolled back until not committed. Transaction are usually used during
            save processes to make sure that no corrupted data is written to the storage. 
            When starting a new transaction it is possible to set a 
            <see cref="T:System.Data.IsolationLevel">IsolationLevel</see> that specifies the level of the transaction.
            </remarks>
            <example>
            For examples how to implement your own storage see: 
            <see cref="T:Chili.Opf3.Storages.MsSql.MsSqlStorage">MsSqlStorage</see>, 
            <see cref="T:Chili.Opf3.Storages.Oracle.OracleStorage">OracleStorage</see> or any other storage that comes with the
            framework.
            </example>
        </member>
        <member name="M:Chili.Opf3.Storages.ITransactionStorage.StartTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a new transaction.
            </summary>
            <returns>Returns a class that implements the <a href="ITransaction">ITransaction</a> interface if the transaction could be started. Null otherwise.</returns>
            <param name="level"><see cref="T:System.Data.IsolationLevel">IsolationLevel</see> of the transaction.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.ITransactionStorage.StartTransaction">
            <summary>
            Starts a new transaction.
            </summary>
            <returns>Returns a class that implements the <a href="ITransaction">ITransaction</a> interface if the transaction could be started. Null otherwise.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.ITransactionStorage.Commit">
            <summary>
            Commits the current open transaction on the storage. If no transaction 
            is open no exception should be thrown.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.ITransactionStorage.Rollback">
            <summary>
            Rolls the current open transaction back. If no transaction is open no
            exception should be thrown.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Storages.ITransactionStorage.ActiveTransaction">
            <summary>Returns the current active transaction.</summary>
            <value>The current active transaction or null if no transaction is active.</value>
        </member>
        <member name="P:Chili.Opf3.Storages.ITransactionStorage.IsTransactionActive">
            <summary>Returns whether a transaction is currently active.</summary>
            <value>True if a transaction is currently open.</value>
        </member>
        <member name="E:Chili.Opf3.Storages.ITransactionStorage.TransactionStart">
            <summary>
            Event is fired if a transaction has been started.
            </summary>
            <remarks>This event is fired each time a new transaction is successfully started.</remarks>
        </member>
        <member name="E:Chili.Opf3.Storages.ITransactionStorage.TransactionCommit">
            <summary>
            Event is fired if a transaction has been committed.
            </summary>
            <remarks>This event is fired each time a new transaction is successfully committed.</remarks>
        </member>
        <member name="E:Chili.Opf3.Storages.ITransactionStorage.TransactionRollback">
            <summary>
            Event is fired if a transaction has been aborted.
            </summary>
            <remarks>
            This event is fired each time a new transaction is successfully rolled back.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.SqlStorageBase">SqlStorageBase Class</see>.
            </summary>
            <param name="connectionString">Specifies a string that contains the information (for ADO.NET) to connect to storage.
            </param>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.ExecuteCommand(Chili.Opf3.Query.IQuery)">
            <summary>Executes a command on the storage that does not expect any results.</summary>
            <remarks>
            If the method returns an argument it is used by the framework to set the
                 <see cref="P:Chili.Opf3.FieldAttribute.AutoNumber">AutoNumber</see> property of the
                 persistent object.
            </remarks>
            <returns>An object that represents the value of the %field or null.</returns>
            <param name="query">
            	<see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is compiled and executed on the
            storage.
            </param>
            <exception cref="T:System.ArgumentNullException">Query is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.ExecuteReader``1(Chili.Opf3.ObjectContext,Chili.Opf3.Query.IQuery)">
            <summary>
            Executes the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> and returns an 
            <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> with the results of the query.
            </summary>
            <param name="context">
            	<see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> connected with the
            <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see>.
            </param>
            <param name="query">
            	<see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is compiled and executed on the
            storage.
            </param>
            <exception cref="T:System.ArgumentNullException">Query is null or context is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.StartTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a new transaction.
            </summary>
            <param name="level"><see cref="T:System.Data.IsolationLevel">IsolationLevel</see> of the transaction.</param>
            <returns>Returns an instance of the <see cref="T:Chili.Opf3.Storages.Transaction">Transaction</see> object.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.StartTransaction">
            <summary>
            Starts a new transaction.
            </summary>
            <returns>Returns an instance of the <see cref="T:Chili.Opf3.Storages.Transaction">Transaction</see> object.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.Commit">
            <summary>
            Commits the current open transaction on the storage. If no transaction 
            is open no exception should be thrown.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.Rollback">
            <summary>
            Rolls the current open transaction back. If no transaction is open no exception
            should be thrown.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.OnTransactionStart(System.EventArgs)">
            <summary>
            Invoked after a transaction has been started.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.OnTransactionCommit(System.EventArgs)">
            <summary>
            Invoked after a transaction has been committed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.OnTransactionRollback(System.EventArgs)">
            <summary>
            Invoked after a transaction has been aborted.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.CreateTransaction(System.Data.IsolationLevel,System.Data.IDbConnection)">
            <summary>
            Creates a new transaction.
            </summary>
            <param name="level"><see cref="T:System.Data.IsolationLevel">IsolationLevel</see> of the transaction.</param>
            <param name="connection">The connection that is used to start the transaction.</param>
            <returns>Returns an instance of the <see cref="T:Chili.Opf3.Storages.SqlTransactionBase">SqlTransactionBase</see> object.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.Transaction_TransactionRollback(System.Object,System.EventArgs)">
            <summary>
            Invoked each time the rollback event of the transaction is fired.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.Transaction_TransactionCommit(System.Object,System.EventArgs)">
            <summary>
            Invoked each time the commit event of the transaction is fired.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.PrepareCommand(Chili.Opf3.Query.CompiledQuery)">
            <summary>
            Routine that prepares the command. Associates the command with a connection and
            populates it with data from the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see>.
            </summary>
            <param name="query">
            	<see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is compiled and executed on the
            storage.
            </param>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.CreateConnection">
            <summary>Creates a new storage dependent connection object.</summary>
            <returns>Returns an instance of a storage dependent connection object.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.CreateCommand">
            <summary>Creates a new storage dependent command object.</summary>
            <returns>Returns an instance of a storage dependent command object.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.CreateParameter(System.Int32,System.String@,System.Object,System.Type)">
            <summary>Creates and populates a storage dependent parameter with data.</summary>
            <returns>
            The name of the storage parameter should be set to a valid parameter name (one
            that is supported by the storage) while creating the parameter.
            </returns>
            <param name="index">The index of the parameter.</param>
            <param name="name">Name of the storage parameter.</param>
            <param name="value">Value of the storage parameter.</param>
            <param name="type">The type of the value argument. This information is useful if the value is null.</param>
            <exception cref="T:System.ArgumentNullException">Name is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.GetValidFieldName(System.String)">
            <summary>Transforms the parameter to a valid field.</summary>
            <returns>Returns a string that represents a valid field name.</returns>
            <remarks>
            This method returns a field name that is valid for the current storage. For some
            storages it is a better choice to start each field name with a '[' and end with a ']'
            (Ms Access) - This method could wrap each field name passed with '[]'.
            </remarks>
            <param name="name">Name for the field that is transformed.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.GetValidEntityName(System.String)">
            <summary>
            Transforms the name of the entity to a valid entity name.
            </summary>
            <returns>Returns a string that represents a valid entity name.</returns>
            <remarks>
            This method returns an entity name that is valid for the current storage. For
            some storages it is a better choice to start each entity name with a '[' and end with a
            ']' (Ms Access) - This method could wrap each entity name passed with '[]'.
            </remarks>
            <param name="name">Name of the entity.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlStorageBase.Dispose">
            <summary>
            Disposes the <see cref="T:Chili.Opf3.Storages.SqlStorageBase">SqlStorageBase</see>.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Storages.SqlStorageBase.ActiveTransaction">
            <summary>Returns the current active transaction.</summary>
            <value>The current active transaction or null if no transaction is active.</value>
        </member>
        <member name="P:Chili.Opf3.Storages.SqlStorageBase.IsTransactionActive">
            <summary>Returns whether a transaction is currently active.</summary>
            <value>True if a transaction is currently open.</value>
        </member>
        <member name="E:Chili.Opf3.Storages.SqlStorageBase.TransactionStart">
            <summary>
            Event is fired if a transaction has been started.
            </summary>
            <remarks>This event is fired each time a new transaction is successfully started.</remarks>
        </member>
        <member name="E:Chili.Opf3.Storages.SqlStorageBase.TransactionCommit">
            <summary>
            Event is fired if a transaction has been committed.
            </summary>
            <remarks>This event is fired each time a new transaction is successfully committed.</remarks>
        </member>
        <member name="E:Chili.Opf3.Storages.SqlStorageBase.TransactionRollback">
            <summary>
            Event is fired if a transaction has been aborted.
            </summary>
            <remarks>
            This event is fired each time a new transaction is successfully rolled back.
            </remarks>
        </member>
        <member name="P:Chili.Opf3.Storages.SqlStorageBase.ConnectionString">
            <summary>
            Returns the connection string that specifies to ADO.NET how to connect to the
            storage.
            </summary>
            <value>A string that specifies how to ADO.NET to connect with the storage.</value>
            <exception cref="T:System.ArgumentNullException">Value is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlStorage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.MsSql.MsSqlStorage">MsSqlStorage Class</see>.
            </summary>
            <param name="connectionString">
            Specifies a string that contains the information (for ADO.NET) to connect to storage.
            </param>
            <exception cref="T:System.ArgumentNullException">ConnectionString is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlStorage.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.MsSql.MsSqlStorage">MsSqlStorage Class</see>.
            </summary>
            <param name="user">Specifies the name of the user that connects to the storage.</param>
            <param name="password">Specifies the password of the user that connects to the storage.</param>
            <param name="host">Specifies the hostname of the machine where the database is installed.</param>
            <param name="database">Specifies the name of the database that you want connect to.</param>
            <exception cref="T:System.ArgumentNullException">User is null, password is null and database is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlStorage.ExecuteCommand(Chili.Opf3.Query.IQuery)">
            <summary>
            Executes a command on the storage that does not expect any results. It the method
            returns an argument it is used by the framework to set the
            <see cref="P:Chili.Opf3.FieldAttribute.AutoNumber">AutoNumber</see> property of the persistent
            object.
            </summary>
            <param name="query">
            	<see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is compiled and executed on the
            storage.
            </param>
            <exception cref="T:Chili.Opf3.Storages.StorageConstraintException">A constraint of the storage 
            has been violated.</exception>
            <exception cref="T:Chili.Opf3.Storages.ForeignKeyViolationException">A foreign key in the storage 
            has been violated.</exception>
            <exception cref="T:Chili.Opf3.Storages.PrimaryKeyViolationException">A duplicate primary key 
            is inserted in the storage.</exception>
            <exception cref="T:Chili.Opf3.Storages.PrimaryKeyViolationException">An index has been violated.</exception>
            <exception cref="T:Chili.Opf3.Storages.StorageException">Any other unexpected storage exception.</exception>
            <exception cref="T:System.ArgumentNullException">Query is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlStorage.ExecuteReader``1(Chili.Opf3.ObjectContext,Chili.Opf3.Query.IQuery)">
            <summary>
            Executes and compiles the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> and returns
            an <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> with the resultsset.
            </summary>
            <param name="context">
            	<see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> that is connected with the
            <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see>.
            </param>
            <param name="query">
            	<see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is compiled and executed on the
            storage.
            </param>
            <exception cref="T:Chili.Opf3.Storages.StorageException">An unexpected storage exception has happened.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlStorage.CreateConnection">
            <summary>Creates a new storage dependent connection object.</summary>
            <returns>Returns an instance of a storage dependent connection object.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlStorage.CreateCommand">
            <summary>Creates a new storage dependent command object.</summary>
            <returns>Returns an instance of a storage dependent command object.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlStorage.CreateParameter(System.Int32,System.String@,System.Object,System.Type)">
            <summary>Creates and populates a storage dependent parameter with data.</summary>
            <returns>
            The name of the storage parameter should be set to a valid parameter name (one
            that is supported by the storage) while creating the parameter.
            </returns>
            <param name="index">Index of the storage parameter.</param>
            <param name="name">Name of the storage parameter.</param>
            <param name="value">Value of the storage parameter.</param>
            <param name="type">The type of the value argument. This information is useful if the value is null.</param>
            <exception cref="T:System.ArgumentNullException">Name is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlStorage.CreateTransaction(System.Data.IsolationLevel,System.Data.IDbConnection)">
            <summary>
            Starts a new transaction.
            </summary>
            <param name="level"><see cref="T:System.Data.IsolationLevel">IsolationLevel</see> of the transaction.</param>
            <param name="connection">The connection that is used to start the transaction.</param>
            <returns>Returns an instance of the <see cref="T:System.Data.SqlClient.SqlTransaction">SqlTransaction</see> object.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlStorage.StartTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a new transaction.
            </summary>
            <param name="level"><see cref="T:System.Data.IsolationLevel">IsolationLevel</see> of the transaction.</param>
            <returns>Returns an instance of the <see cref="T:Chili.Opf3.Storages.Transaction">Transaction</see> object.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlStorage.GetValidFieldName(System.String)">
            <summary>Transforms the parameter to a valid field.</summary>
            <returns>Returns a string that represents a valid field name.</returns>
            <remarks>
            This method returns a field name that is valid for the current storage. For some
            storages it is a better choice to start each field name with a '[' and end with a ']'
            (Ms Access) - This method could wrap each field name passed with '[]'.
            </remarks>
            <param name="name">Name for the field that is transformed.</param>
            <exception cref="T:System.ArgumentNullException">Name is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlStorage.GetValidEntityName(System.String)">
            <summary>
            Transforms the name of the entity to a valid entity name.
            </summary>
            <returns>Returns a string that represents a valid entity name.</returns>
            <remarks>
            This method returns an entity name that is valid for the current storage. For
            some storages it is a better choice to start each entity name with a '[' and end with a
            ']' (Ms Access) - This method could wrap each entity name passed with '[]'.
            </remarks>
            <param name="name">Name of the entity.</param>
            <exception cref="T:System.ArgumentNullException">Name is null.</exception>
        </member>
        <member name="T:Chili.Opf3.ObjectStates">
            <summary>Defines the state of a persistent object in memory.</summary>
            <remarks>
            <para>This enumeration represents the state of a persistent object. It is used
            internally to decide whether to insert, update or delete an object to/from the
            storage.
            </para>
            <para>
            <strong>Attention:</strong> Modifying properties using this enumeration could
            cause unexpected behavior when saving objects.
            </para>
            </remarks>
            <example>
                The following example shows how to request the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> instance of the
                <see cref="T:Chili.Opf3.ISelfContainingObject">ISelfContainingObject</see> to determine whether the object has been 
                loaded from the storage.
                <code lang="CS">
            [Persistent("USER")]
            public class User : ISelfContainingObject
            {
                // ... Other properties and fields.
            }
             
            // ... Other code
             
            // Loads a user object from the storage.
            User user = context.GetObject&lt;User&gt;("Id = {0}", "1");
            // Checks if the object has been loaded.
            if (user.ObjectInfo.ObjectState == ObjectStates.Loaded)
            {
                Debug.WriteLine("Object has been loaded.");
            }
                </code>
            </example>
        </member>
        <member name="F:Chili.Opf3.ObjectStates.None">
            <summary>
            Persistent objects with this state aren't loaded, saved or deleted. They have been recently created in memory.
            </summary>
        </member>
        <member name="F:Chili.Opf3.ObjectStates.Loaded">
            <summary>
            Persistent objects with this state have been loaded from the storage.
            </summary>
        </member>
        <member name="F:Chili.Opf3.ObjectStates.Inserted">
            <summary>
            Persistent objects with this state have been inserted into the storage. The framework is doing an
            update if the persistent is saved again.
            </summary>
        </member>
        <member name="F:Chili.Opf3.ObjectStates.Updated">
            <summary>
            Persistent objects with this state have been updated in the storage.
            </summary>
        </member>
        <member name="F:Chili.Opf3.ObjectStates.Deleted">
            <summary>
            Persistent objects with this state are no longer available in the storage. They have
            been deleted. The framework is doing an insert if they are saved the next time.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Relations.ObjectHolderBase">
            <summary>
            Abstract base class for ObjectHolder classes. Contains the base functionality that is required in any ObjectHolder class. 
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.#ctor(Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase Class</see>.
            </summary>
            <param name="query"><see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is executed to load the associated 
            objects. This parameter allows you to use any kind of query without using the build in functionality.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.SetObjectHolderData(Chili.Opf3.ObjectContext,Chili.Opf3.Relations.RelationAttribute,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Sets the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> associated with the ObjectHolder, 
            the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> containing the information
            about the relation between the object and it's related objects and the parent persistent object. 
            It's required to gain access to properties of the parent object. Those properties are used to 
            compile the query to load the related objects.
            </summary>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> that is used 
            by the ObjectHolder to load and persist the objects.</param>
            <param name="attribute">The <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> 
            that is set.</param>
            <param name="parent">Object that is set as parent.</param>
            <param name="automaticLoad">True to load related objects when querying the InnerObject property.</param>
            <param name="useRemotingSerialization">True if the serialization for remoting should get used.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.Invalidate">
            <summary>
            Invalidates the current instance. The next request of the InnerObject property reloads all the 
            related objects. This is only true if the automatic load of the related objects has been enabled. 
            Otherwise the reload method needs to be invoked (after calling Invalidate) to do a manual reload.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.Load">
            <summary>
            Loads the related objects from the storage.
            </summary>
            <remarks>This method takes the instance of the <see cref="P:Chili.Opf3.Relations.ObjectHolderBase.ObjectContext"/>
            that's currently associated with the holder class. This usually is the same instance
            that has been used to load the parent object.</remarks>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.Load(Chili.Opf3.ObjectContext)">
            <summary>
            Loads the related object from the storage by using the given
            instance of the <see cref="P:Chili.Opf3.Relations.ObjectHolderBase.ObjectContext"/> Class.
            </summary>
            <param name="context">The <see cref="P:Chili.Opf3.Relations.ObjectHolderBase.ObjectContext"/> used to load the related objects.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.Load(System.Boolean)">
            <summary>
            Loads the related objects from the storage.
            </summary>
            <remarks>This method takes the instance of the <see cref="P:Chili.Opf3.Relations.ObjectHolderBase.ObjectContext"/>
            that's currently associated with the holder class. This usually is the same instance
            that has been used to load the parent object.</remarks>
            <param name="throwOnNotAttached">True to throw an exception if the related object or 
            objects can't be successfully loaded into the local collection or reference because the required data
            (such as an ObjectContext) hasn't been set yet.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.Load(Chili.Opf3.ObjectContext,System.Boolean)">
            <summary>
            Loads the related object from the storage by using the given
            instance of the <see cref="P:Chili.Opf3.Relations.ObjectHolderBase.ObjectContext"/> Class.
            </summary>
            <param name="context">The <see cref="P:Chili.Opf3.Relations.ObjectHolderBase.ObjectContext"/> used to load the related objects.</param>
            <param name="throwOnNotAttached">True to throw an exception if the related object or 
            objects can't be successfully loaded into the local collection or reference because the required data
            (such as an ObjectContext) hasn't been set yet.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.ValidateLoad(System.Boolean)">
            <summary>
            Checks if the load can be performed because the required data is set.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.PersistChanges(Chili.Opf3.ObjectContext,Chili.Opf3.PersistDepths)">
            <summary>
            This method is invoked to persist the changes on the objects in the ObjectHolder.
            </summary>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> used to persist 
            the changes. It is the same <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> as used by the
            parent object.</param>
            <param name="persistDepth">Specifies the depth of the loaded object graph that is persisted.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.ConnectPropertiesInChildObjects">
            <summary>
            This method connects the foreign-key properties in the child persistent objects with the identifier
            properties of the parent object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.HasModifiedObjects(Chili.Opf3.ObjectContext)">
            <summary>
            This method is invoked to check if any of the ObjectHolder's objects have been modified.
            </summary>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> used to check for modified 
            objects. It is the same <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> as used by the
            parent object.</param>
            <returns>True if an object has been modified; false othewise.</returns>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.InnerLoad(Chili.Opf3.ObjectContext)">
            <summary>
            Loads the related object(s) from the storage.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.HasRemovedObjects">
            <summary>
            This method is invoked to check if the object holder has removed objects.
            </summary>
            <returns>True if an object has been removed; false otherwise</returns>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.GetRawEnumerator">
            <summary>
            Gets the enumerator for the given loaded related data. This method doesn't load
            data from the storage but rather returns the currently loaded data.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.UpdateConnectedProperty(System.Object)">
            <summary>
            Updates the connected property. This is done after a save to the storage.
            </summary>
            <param name="obj">Objects that's property is updated.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase Class</see>.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a backup of the object in the session. We do this to not blow
            up the ViewState in ASP.NET applications. When serializing the object in the
            ViewState we would also send the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>
            and other classes such as the storage to the ViewState.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.GetValueFromSerialization``1(System.Runtime.Serialization.SerializationInfo,System.Web.SessionState.HttpSessionState,System.String,System.String)">
            <summary>
            Gets and returns the value from the serialization.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.AddValueToSerialization(System.Runtime.Serialization.SerializationInfo,System.Web.SessionState.HttpSessionState,System.String,System.String,System.Object)">
            <summary>
            Adds a given name value pair to the serialization.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderBase.GetHttpSession">
            <summary>
            Check if a HttpSession is available. If not we have to serialize the whole object.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Relations.ObjectHolderBase.ObjectContext">
            <summary>
            Gets the <see cref="P:Chili.Opf3.Relations.ObjectHolderBase.ObjectContext"/> associated with this instance. Might be null if
            no storage operation has been performed on the parent or related object(s).
            </summary>
            <remarks>
            This is the default <see cref="P:Chili.Opf3.Relations.ObjectHolderBase.ObjectContext"/> that's used to load and save the related 
            objects and the same that has been used to load or save the parent object. It might be 
            null if there has been no storage operation (load or persist changes) performed on the 
            parent or related object(s).
            </remarks>
        </member>
        <member name="P:Chili.Opf3.Relations.ObjectHolderBase.RelationAttribute">
            <summary>
            Specifies the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> 
            associated with the ObjectHolder. The attribute specifies the relation between the
            related objects and the parent object.
            </summary>
            <value>The <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> associated 
            with the ObjectHolder or null.</value>
        </member>
        <member name="P:Chili.Opf3.Relations.ObjectHolderBase.AutomaticLoad">
            <summary>
            Gets or sets whether the related objects should be loaded in automatic when fetching the
            InnerObject property.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Relations.ObjectHolderBase.Parent">
            <summary>
            Specifies the parent persistent object of the ObjectHolder.
            </summary>
            <value>The parent persistent object associated with the ObjectHolder or null.</value>
        </member>
        <member name="P:Chili.Opf3.Relations.ObjectHolderBase.Query">
            <summary>
            Gets or sets the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> associated with the ObjectHolder.
            </summary>
            <value>The <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> associated with the ObjectHolder or null.</value>
        </member>
        <member name="P:Chili.Opf3.Relations.ObjectHolderBase.ManagedObject">
            <summary>
            Gets and sets the object that is managed by this instance.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Relations.ObjectHolderBase.IsLoaded">
            <summary>
            Returns whether the related objects have been loaded.
            </summary>
            <value>True if the related persistent objects have been loaded.</value>
        </member>
        <member name="P:Chili.Opf3.Relations.ObjectHolderBase.IsAttached">
            <summary>
            Gets whether the relation is attached to the parent object. This means that the relation has all
            required information to be loaded from the storage.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Storages.OleDb.OleDbCommandBuilder">
            <summary>
            Class that converts
            <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see> classes to storage
            dependent <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see> classes for OleDb storages.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Storages.SqlCommandBuilderBase">
            <summary>
            Abstract class that converts <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see> 
            classes to storage dependent <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see> classes (using SQL).
            </summary>
            <remarks>
            It is used by each storage to create SQL command and is not indented to be used in the user code.
            </remarks>
        </member>
        <member name="T:Chili.Opf3.Storages.IStorageCommandBuilder">
            <summary>
            This interface is implemented by classes that create storage dependent commands from storage 
            independent queries.
            </summary>
            <remarks>
            This interface is implemented by classes that create storage commands from
            storage independent queries such as <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see>.
            For an implementation look in <see cref="T:Chili.Opf3.Storages.SqlCommandBuilderBase">SqlCommandBuilderBase</see>
            class or any other class that derives from the 
            <see cref="T:Chili.Opf3.Storages.SqlCommandBuilderBase">SqlCommandBuilderBase</see> class.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Storages.IStorageCommandBuilder.ToCompiledQuery(Chili.Opf3.Storages.IStorage,Chili.Opf3.Query.IQuery)">
            <summary>
            Converts the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> to
            a storage dependent <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see>. This method should only be
            called by a class that implements the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface.
            </summary>
            <param name="query"><see cref="T:Chili.Opf3.Query.IQuery">Query</see> object
            that is converted to a storage dependent <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see>.
            </param>
            <param name="storage">The storage that the query is compiled for.</param>
            <returns>A storage dependent <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see>.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.IStorageCommandBuilder.IsSupported(Chili.Opf3.Storages.IStorage,Chili.Opf3.Query.IQuery)">
            <summary>
            Returns whether the <see cref="T:Chili.Opf3.Storages.IStorageCommandBuilder">IStorageCommandBuilder</see> supports 
            the query type on the given storage.
            </summary>
            <param name="storage">The storage for which the query should be compiled.</param>
            <param name="query">The query that should be compiled to a storage dependent command.</param>
            <returns>True if the query can be parsed by the <see cref="T:Chili.Opf3.Storages.IStorageCommandBuilder">IStorageCommandBuilder</see>.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlCommandBuilderBase.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.SqlCommandBuilderBase">SqlCommandBuilderBase Class</see>.
            </summary>
            <param name="insertAutoNumber">True if properties with AutoNumbers (see <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see>) are inserted in the query.</param>
            <exception cref="T:System.ArgumentNullException">ProviderFactory is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlCommandBuilderBase.BuildSelectQuery(Chili.Opf3.Storages.SqlStorageBase,Chili.Opf3.Query.ObjectExpression)">
            <summary>
            Creates the <see cref="T:Chili.Opf3.Query.CompiledQuery">CompildQuery</see> that contains a storage dependent 
            select query by using the <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see> given.
            </summary>
            <param name="objectExpression">
            	<see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see> that is converted
            to a <see cref="T:Chili.Opf3.Query.CompiledQuery">CompildQuery</see>.
            </param>
            <param name="sqlStorageBase">The storage that the query is compiled for.</param>
            <exception cref="T:System.ArgumentNullException">ObjectExpression is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlCommandBuilderBase.CreateSelectQuery(Chili.Opf3.Storages.SqlStorageBase,Chili.Opf3.Query.OPathParser.OEItem,System.Text.StringBuilder,System.Data.IDbCommand,System.Int32@)">
            <summary>
            Creates one piece of the select query. The item that is given is processed.
            </summary>
            <param name="sqlStorageBase">The storage that the query is compiled for.</param>
            <param name="item">Item that is processed by this method.</param>
            <param name="query">The query that has been compiled until the call of this method.</param>
            <param name="command">The command object that is then embedded into the compiled query and
            executed on the storage.</param>
            <param name="paramIndex">The index of the current parameter that is inserted into the query.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlCommandBuilderBase.BuildInsertQuery(Chili.Opf3.Storages.SqlStorageBase,Chili.Opf3.Query.PersistentObjectExpression)">
            <summary>
            Creates the <see cref="T:Chili.Opf3.Query.CompiledQuery">CompildQuery</see> that contains a storage dependent 
            update query by using the <see cref="T:Chili.Opf3.Query.PersistentObjectExpression">PersistentObjectExpression</see> given.
            </summary>
            <param name="poe">
            	<see cref="T:Chili.Opf3.Query.PersistentObjectExpression">PersistentObjectExpression</see> that is converted
            to a <see cref="T:Chili.Opf3.Query.CompiledQuery">CompildQuery</see>.
            </param>
            <param name="sqlStorageBase">The storage that the query is compiled for.</param>
            <exception cref="T:System.ArgumentNullException">PersistentObjectExpression is null.</exception>
            <exception cref="T:System.ArgumentNullException">SqlStorageBase is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlCommandBuilderBase.BuildInsertQuery(Chili.Opf3.Storages.SqlStorageBase,Chili.Opf3.Query.ObjectExpression)">
            <summary>
            Creates the <see cref="T:Chili.Opf3.Query.CompiledQuery">CompildQuery</see> that contains a storage dependent 
            insert query by using the <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see> given.
            </summary>
            <param name="objectExpression">
            	<see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see> that is converted
            to a <see cref="T:Chili.Opf3.Query.CompiledQuery">CompildQuery</see>.
            </param>
            <param name="sqlStorageBase">The storage that the query is compiled for.</param>
            <exception cref="T:System.ArgumentNullException">ObjectExpression is null.</exception>
            <exception cref="T:System.ArgumentNullException">SqlStorageBase is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlCommandBuilderBase.BuildDeleteQuery(Chili.Opf3.Storages.SqlStorageBase,Chili.Opf3.Query.PersistentObjectExpression)">
            <summary>
            Creates the <see cref="T:Chili.Opf3.Query.CompiledQuery">CompildQuery</see> that contains a storage dependent 
            update query by using the <see cref="T:Chili.Opf3.Query.PersistentObjectExpression">PersistentObjectExpression</see> given.
            </summary>
            <param name="poe">
            	<see cref="T:Chili.Opf3.Query.PersistentObjectExpression">PersistentObjectExpression</see> that is converted
            to a <see cref="T:Chili.Opf3.Query.CompiledQuery">CompildQuery</see>.
            </param>
            <param name="sqlStorageBase">The storage that the query is compiled for.</param>
            <exception cref="T:System.ArgumentNullException">PersistentObjectExpression is null.</exception>
            <exception cref="T:System.ArgumentNullException">SqlStorageBase is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlCommandBuilderBase.BuildDeleteQuery(Chili.Opf3.Storages.SqlStorageBase,Chili.Opf3.Query.ObjectExpression)">
            <summary>
            Creates the <see cref="T:Chili.Opf3.Query.CompiledQuery">CompildQuery</see> that contains a storage dependent 
            delete query by using the <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see> given.
            </summary>
            <param name="objectExpression">
            	<see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see> that is converted
            to a <see cref="T:Chili.Opf3.Query.CompiledQuery">CompildQuery</see>.
            </param>
            <param name="sqlStorageBase">The storage that the query is compiled for.</param>
            <exception cref="T:System.ArgumentNullException">SqlStorageBase is null.</exception>
            <exception cref="T:System.ArgumentNullException">ObjectExpression is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlCommandBuilderBase.BuildUpdateQuery(Chili.Opf3.Storages.SqlStorageBase,Chili.Opf3.Query.PersistentObjectExpression)">
            <summary>
            Creates the <see cref="T:Chili.Opf3.Query.CompiledQuery">CompildQuery</see> that contains a storage dependent 
            update query by using the <see cref="T:Chili.Opf3.Query.PersistentObjectExpression">PersistentObjectExpression</see> given.
            </summary>
            <param name="poe">
            	<see cref="T:Chili.Opf3.Query.PersistentObjectExpression">PersistentObjectExpression</see> that is converted
            to a <see cref="T:Chili.Opf3.Query.CompiledQuery">CompildQuery</see>.
            </param>
            <param name="sqlStorageBase">The storage that the query is compiled for.</param>
            <exception cref="T:System.ArgumentNullException">PersistentObjectExpression is null.</exception>
            <exception cref="T:System.ArgumentNullException">SqlStorageBase is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlCommandBuilderBase.ToCompiledQuery(Chili.Opf3.Storages.IStorage,Chili.Opf3.Query.IQuery)">
            <summary>
            Converts the <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see> to
            a storage dependent <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see>. This method should only be
            called by a class that implements the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface.
            </summary>
            <param name="query"><see cref="T:Chili.Opf3.Query.IQuery">Query</see> object
            that is converted to a storage dependent <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see>.
            </param>
            <param name="storage">The storage that the query is compiled for.</param>
            <returns>A storage dependent <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see>.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlCommandBuilderBase.IsSupported(Chili.Opf3.Storages.IStorage,Chili.Opf3.Query.IQuery)">
            <summary>
            Returns whether the <see cref="T:Chili.Opf3.Storages.IStorageCommandBuilder">IStorageCommandBuilder</see> supports 
            the query type on the given storage.
            </summary>
            <param name="storage">The storage for which the query should be compiled.</param>
            <param name="query">The query that should be compiled to a storage dependent command.</param>
            <returns>True if the query can be parsed by the <see cref="T:Chili.Opf3.Storages.IStorageCommandBuilder">IStorageCommandBuilder</see>.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlCommandBuilderBase.CreateParameter(Chili.Opf3.Storages.SqlStorageBase,System.Int32,System.Object,System.Type,System.String@)">
            <summary>
            Creates a parameter for the storage.
            </summary>
            <param name="storage">The storage class the parameter is created for.</param>
            <param name="index">The index of the parameter in the current query.</param>
            <param name="value">The value of the parameter.</param>
            <param name="type">The type of the parameter.</param>
            <param name="name">The name of the parameter. Returned by this routine.</param>
            <returns></returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlCommandBuilderBase.ConvertCommand(Chili.Opf3.Query.OPathParser.OECommand)">
            <summary>
            Converts the command given to a command that is understood by the storage.
            </summary>
            <returns>Returns a string that represents the converted command.</returns>
            <remarks>
            This method returns a string representation of the command given. This string represents
            the name of the command that is exectued on the storage.
            <b>Attention</b>: The returned string must contain a tag "{0}" that is used by the parser
            to insert the name of the field on that the command is performed.
            </remarks>
            <param name="command">Command object that is converted to be understood by the storage.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.OleDb.OleDbCommandBuilder.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.OleDb.OleDbCommandBuilder">OleDbCommandBuilder Class</see>.
            </summary>
        </member>
        <member name="T:Chili.Opf3.ObjectView`1">
             <summary>
             Represents a databindable, customized view of an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> for sorting, filtering, 
             searching, editing, and navigation.
             </summary>
             <remarks>
             <para>
             The ObjectView represents a databindable and customized view of an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. 
             The class allows sorting, filtering, searching, editing and navigation in/of the data of the associated 
             <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. 
             </para>
             <para>
             The class' content may be customized by specifiying a sort or a filter expression. This class may be also bound to 
             a DataGrid, BindingSource or other data-driven controls. The <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> returns an 
             instance of this class when querying the <see cref="P:Chili.Opf3.ObjectSet`1.DefaultView">DefaultView</see> property.
             </para>
             <para>
             When sorting or filtering the ObjectView the data of the associated <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> is
             not affected at all. Each <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> may also be associated with more then one 
             ObjectView. All ObjectViews are then updated instantely when updating the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
             </para>
             </remarks>
             <example>
             The following example shows how to use the ObjectView in an application.
            		<code lang="CS">
             [Persistent("USER")]
             public class User
             {
            		private int _id;
            		private string _name;
             
            		[Field("ID", AutoNumber = true, AllowDBNull = false, Identifier = true)]
            		public int ID
            		{
            			get { return _id; }
            			set { _id = value; }
            		}
            
            		[Field("NAME")]
            		public string Name
            		{
            			get { return _name; }
            			set { _name = value; }
            		}
             
            		// ... Other properties and fields.
             }
             
             // ... Other code
             
             // Loads an ObjectSet of User from the storage and sorts the result descending.
             ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;();
             
             // Create a new BindingSource.
             BindingSource bindingSource = new BindingSource();
             // Associate the ObjectSet with the DataSource. The ObjectView of the ObjectSet's DefaultView 
             // property is used when binding an ObjectSet as data source.
             bindingSource.DataSource = objectSet;
             // Add a sort string to sort the ObjectView.
             bindingSource.Sort = "[ID] ASC, [NAME] DESC";
             // Bind the BindingSource to a visual DataGridView.
             dataGridView1.DataSource = bindingSource;
             
             // Create a new instance of the DataView and set the current ObjectSet as
             // associated ObjectSet.
             DataView dataView = new DataView(objectSet);
             // Sort by the name property in ascending order.
             dataView.Sort = "[NAME]";
             
             // Loop over all items in the DataView. The items are sorted by the name property.
             foreach(User user in dataView)
             {
            		// Do something with the persistent.
             }
            		</code>	
             </example>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.#ctor(Chili.Opf3.ObjectSet{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView Class</see>.
            </summary>
            <param name="objectSet">The <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> bound to the current instance.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.CreateObjectViewData(Chili.Opf3.ObjectSet{`0})">
            <summary>
            Creates the data for the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> from the 
            data of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
            <param name="objectSet">The <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> used to build the view.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.NotifyListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Invoked each time the list of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> changed.
            </summary>
            <param name="sender">The <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> itself.</param>
            <param name="e">The EventArgs class containing additional information for the event.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.ItemChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Invoked each time an item has been changed.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.ItemDeleted(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Invoked each time an item has been deleted.
            </summary>
            <param name="e">The EventArgs of the event that invoked this method.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.ItemMoved(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Invoked each time an item has been moved.
            </summary>
            <param name="e">The EventArgs of the event that invoked this method.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.ItemAdded(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Invoked each time an item has been added.
            </summary>
            <param name="e">The EventArgs of the event that invoked this method.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> contains elements that 
            match the conditions defined by the specified predicate. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns>true, if the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> contains one or more 
            elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the first occurrence within the entire <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; 
            otherwise, the default value for type T.</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns>An <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> containing all the elements that match the 
            conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and 
            returns the zero-based index of the first occurrence within the entire <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that 
            matches the conditions defined by match, if found; otherwise, -1</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the first occurrence within the range of elements 
            in the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> that extends from the specified index 
            to the last element. 
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The Predicate delegate that defines the conditions of the 
            element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions 
            defined by match, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">StartIndex is outside the range of valid indexes
            for the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the first occurrence within the range of elements 
            in the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> that starts at the specified index and contains 
            the specified number of elements. 
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The Predicate delegate that defines the conditions of the 
            element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions 
            defined by match, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">StartIndex is outside the range of valid indexes
            for the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> or Count is less then zero.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the last occurrence within the entire <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; 
            otherwise, the default value for type T.</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the last occurrence within the entire 
            <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions 
            defined by match, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the last occurrence within the range of elements in 
            the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> that extends from the first element 
            to the specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions 
            defined by match, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">StartIndex is outside the range of valid
            indexes for the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the last occurrence within the range of elements 
            in the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> that contains the specified number of elements 
            and ends at the specified index. 
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions 
            defined by match, if found; otherwise, -1. </returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">StartIndex is outside the range of valid indexes
            for the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> or Count is less then zero.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.Initialize(Chili.Opf3.ObjectSet{`0})">
            <summary>
            Initializes the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.
            </summary>
            <param name="value">The ObjectSet that is bound to the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.UnRegisterViewInManager">
            <summary>
            Unregisters the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> in the <see cref="T:Chili.Opf3.ObjectViewManager`1">ObjectViewManager</see>
            of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.Reset">
            <summary>
            Resets the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.ToObjectSet">
            <summary>
            Creates and returns a new <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> based on the objects in an existing <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.
            </summary>
            <returns>A new <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> instance that contains the requested objects.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.ToString">
            <summary>
            Returns the string representation for the object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> at the specified index. 
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.RemoveAt(System.Int32)">
            <summary>
            Moves the object at the specified index from the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> to
            to the connected <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">ObjectSet's</see> <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see>.
            All objects on the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see> are deleted 
            when the changes on the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> are persisted.
            </summary>
            <param name="index">The zero-based index of the item to move.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or index is equal to
            or greater than <see cref="P:Chili.Opf3.ObjectView`1.Count">Count</see>.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            Removes all items from the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> contains a specific object.
            </summary>
            <param name="item">The object to located in the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</param>
            <returns>True, if item is found in the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>; otherwise, false.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> to an Array, starting at 
            a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied 
            from <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">Array is null.</exception>
            <exception cref="T:System.ArgumentException">Array is multidimensional, array does not have zero-based
            indexing, the number of elements in the source is greater than the number of elements that the 
            destination array can contain or type T cannot be cast automatically to the type of the destination
            array.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>
            to the connected <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">ObjectSet's</see> <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see>.
            All objects on the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see> are deleted 
            when the changes on the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> are persisted.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</param>
            <returns>True, if item was successfully removed from the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>; otherwise, false. 
            This method also returns false if item was not found in the original 
            <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.
            </summary>
            <param name="value">The object to add to the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#Collections#IList#Clear">
            <summary>
            Removes all items from the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> contains a specific object.
            </summary>
            <param name="value">The object to located in the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</param>
            <returns>True, if item is found in the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>; otherwise, false.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.
            </summary>
            <param name="value">The object to locate in the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> at the specified index. 
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="value">The object to insert into the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>
            to the connected <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">ObjectSet's</see> <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see>.
            All objects on the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see> are deleted 
            when the changes on the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> are persisted.
            </summary>
            <param name="value">The object to remove from the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Moves the object at the specified index from the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> to
            to the connected <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">ObjectSet's</see> <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see>.
            All objects on the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see> are deleted 
            when the changes on the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> are persisted.
            </summary>
            <param name="index">The zero-based index of the item to move.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or index is equal to
            or greater than <see cref="P:Chili.Opf3.ObjectView`1.Count">Count</see>.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> to an Array, starting at 
            a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied 
            from <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">Array is null.</exception>
            <exception cref="T:System.ArgumentException">Array is multidimensional, array does not have zero-based
            indexing, the number of elements in the source is greater than the number of elements that the 
            destination array can contain or type T cannot be cast automatically to the type of the destination
            array.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Invokes the ListChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.AddNew">
            <summary>
            Adds a new item to the list.
            </summary>
            <returns>The item added to the list.</returns>
            <exception cref="T:System.NotSupportedException">The object to create has no public or private constructor without arguments.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Returns the index of the item that has the given PropertyDescriptor.
            </summary>
            <param name="property">The PropertyDescriptor to search on.</param>
            <param name="key">The value of the property parameter to search for.</param>
            <returns>The index of the row that has the given PropertyDescriptor.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the list based on a PropertyDescriptor and a ListSortDirection.
            </summary>
            <param name="property">The PropertyDescriptor to sort by.</param>
            <param name="direction">One of the ListSortDirection values.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#ComponentModel#IBindingList#RemoveSort">
            <summary>
            Removes any sort applied using <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">ApplySort</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Adds the PropertyDescriptor to the indexes used for searching.
            </summary>
            <param name="property">The PropertyDescriptor to add to the indexes used for searching.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Removes the PropertyDescriptor from the indexes used for searching.
            </summary>
            <param name="property">The PropertyDescriptor to remove from the indexes used for searching.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#ComponentModel#ICancelAddNew#CancelNew(System.Int32)">
            <summary>
             Discards a pending new item from the collection.
            </summary>
            <param name="itemIndex">The index of the item that was previously added to the collection.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#ComponentModel#ICancelAddNew#EndNew(System.Int32)">
            <summary>
            Commits a pending new item to the collection.
            </summary>
            <param name="itemIndex">The index of the item that was previously added to the collection.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.CreateSortString(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Creates the sort string for one property descriptior.
            </summary>
            <param name="property">The sort string is created for this property.</param>
            <param name="direction">The direction of the sort.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.ParseSortString(System.String)">
            <summary>
            Parses and returns the given sort string.
            </summary>
            <param name="value">The sort string that is parsed.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#ComponentModel#IBindingListView#ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
            <summary>
            Sorts the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> based on the given 
            <see cref="T:System.ComponentModel.ListSortDescriptionCollection">ListSortDescriptionCollection</see>.
            </summary>
            <param name="sorts">The <see cref="T:System.ComponentModel.ListSortDescriptionCollection">ListSortDescriptionCollection</see> 
            containing the sorts to apply to the data source.</param>
            <exception cref="T:System.ArgumentNullException">Sorts is null.</exception>
            <exception cref="T:System.ArgumentException">A property to sort by, is not found.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.System#ComponentModel#IBindingListView#RemoveFilter">
            <summary>
            NOT SUPPORTED YET.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.ObjectSet">
            <summary>
            Specifies the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> connected with the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is null.</exception>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.Item(System.Int32)">
            <summary>
            Gets the object at the specified index.
            </summary>
            <param name="index">The zero-based index of the object to get or set.</param>
            <returns>The object at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less then zero or index is equal or greater
            then <see cref="P:Chili.Opf3.ObjectView`1.Count">Count</see>.</exception>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>
            Gets the object at the specified index.
            </summary>
            <param name="index">The zero-based index of the object to get or set.</param>
            <returns>The object at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less then zero or index is equal or greater
            then <see cref="P:Chili.Opf3.ObjectView`1.Count">Count</see>.</exception>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>. 
            </summary>
            <value>The number of elements contained in the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</value>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> is read-only.
            </summary>
            <value>True, if the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> is read-only; otherwise, false.</value>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> has a fixed size.
            </summary>
            <returns>True if the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> is read-only.
            </summary>
            <value>True, if the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> is read-only; otherwise, false.</value>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets the object at the specified index.
            </summary>
            <param name="index">The zero-based index of the object to get or set.</param>
            <returns>The object at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less then zero or index is equal or greater
            then <see cref="P:Chili.Opf3.ObjectView`1.Count">Count</see>.</exception>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#Collections#ICollection#Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>. 
            </summary>
            <value>The number of elements contained in the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.</value>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.
            </summary>
        </member>
        <member name="E:Chili.Opf3.ObjectView`1.ListChanged">
            <summary>
            Occurs when the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> changes.
            </summary>
            <remarks>
            This event is fired each time the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> changes to notify 
            that the object has been changed. It allows to act after the object has been changed.
            </remarks>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.AllowEdit">
            <summary>
            Gets whether you can update items in the list.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.AllowNew">
            <summary>
            Gets whether you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew">AddNew</see> .
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.AllowRemove">
            <summary>
            Gets whether you can remove items from the list, using Remove or RemoveAt.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#ComponentModel#IBindingList#SupportsSearching">
            <summary>
            Gets whether the list supports searching using the Find method.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
            <summary>
            Gets whether a <see cref="E:System.ComponentModel.IBindingList.ListChanged">ListChanged</see> event is raised when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#ComponentModel#IBindingList#SupportsSorting">
            <summary>
            Gets whether the list supports sorting.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#ComponentModel#IBindingList#IsSorted">
            <summary>
            Gets whether the items in the list are sorted.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#ComponentModel#IBindingList#SortDirection">
            <summary>
            Gets the direction of the sort.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#ComponentModel#IBindingList#SortProperty">
            <summary>
            Gets the PropertyDescriptor that is being used for sorting.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
            <summary>
            Gets a value indicating whether the object raises the <see cref="E:Chili.Opf3.ObjectView`1.ListChanged">ListChanged</see> event on changes in the managed items.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.Sort">
            <summary>
            Specifies the string to sort the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.
            </summary>
            <remarks>
            This method allows to specify a string that sorts the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>. The string
            contains the property and the direction of the sort. You may also specify more the one property and direction.
            </remarks>
            <example>
            The following examples show how to sort a <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> by different properties in
            different directions.
            <code lang="CS">
            // Load an ObjectSet with data.
            ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;();
            // Get the default view of the ObjectSet.
            ObjectView&lt;User&gt; objectView = objectSet.DefaultView;
            // Sorts the ObjectView by the ID property (in ascending order) and by the NAME
            // property (in the descending order).
            objectView.Sort = "[ID] ASC, [NAME] DESC";
            </code>
            <code lang="CS">
            // Load an ObjectSet with data.
            ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;();
            // Create a new ObjectView.
            ObjectView&lt;User&gt; objectView = new ObjectView&lt;User&gt;();
            // Set the current ObjectSet as source of the view.
            objectView.ObjectSet = objectSet;
            // Sorts the ObjectView by the ID property (in ascending order).
            objectView.Sort = "[ID] ASC";
            </code>
            </example>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#ComponentModel#IBindingListView#SupportsAdvancedSorting">
            <summary>
            Gets whether the list supports advanced sorting.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#ComponentModel#IBindingListView#SortDescriptions">
            <summary>
            Gets the collection of sort descriptions currently applied to the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see>.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#ComponentModel#IBindingListView#SupportsFiltering">
            <summary>
            Gets a value indicating whether the data source supports filtering.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectView`1.System#ComponentModel#IBindingListView#Filter">
            <summary>
            NOT SUPPORTED YET.
            </summary>
        </member>
        <member name="T:Chili.Opf3.ObjectView`1.PropertyComparer">
            <summary>
            This class compares properties of items of the list for sorting purpose.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.PropertyComparer.#ctor(System.ComponentModel.ListSortDescriptionCollection)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectView`1.PropertyComparer">PropertyComparer Class</see>.
            </summary>
            <param name="listSortCollection">The collection containing the sorting properties and directions.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.PropertyComparer.Compare(`0,`0)">
            <summary>
            Compares two objects.
            </summary>
            <param name="x">First object to compare.</param>
            <param name="y">Second object to compare.</param>
            <returns></returns>
        </member>
        <member name="M:Chili.Opf3.ObjectView`1.PropertyComparer.Compare(`0,`0,System.Int32)">
            <summary>
            Compares two objects.
            </summary>
            <param name="x">First object to compare.</param>
            <param name="y">Second object to compare.</param>
            <param name="iteration">Specifies the iteration of the comparison.</param>
        </member>
        <member name="T:Chili.Opf3.IUserDefinedType">
            <summary>
            Interface implemented by user-defined types (types that are not directly supported by the storage). 
            </summary>
            <remarks>
            <para><b>Attention:</b> Classes implementing this interface need a constructor without arguments. It may be either 
            public, internal or private.</para>
            <para>
            This interface allows creating user-defined types (types that are nod directly supported by the storage) 
            that can then be persisted to the storage and loaded from the storage. If the storage does not 
            directly implement the type you want save you can implement this interface to save that object 
            to the storage.
            </para>
            <para>
            The interface contains two methods:<br/>
            <see cref="M:Chili.Opf3.IUserDefinedType.FromSimpleDataType(System.Object)">FromSimpleType</see> and 
            <see cref="M:Chili.Opf3.IUserDefinedType.ToSimpleDataType">ToSimpleDataType.</see> The first method
            has one argument that is set during load and allows you to populate the object with the data from the
            storage. The second method converts the object to a type that can be saved to the storage (for 
            example a xml string) and is called during the save process.
            Currently <see cref="T:Chili.Opf3.ID`1">ID</see>, <see cref="T:Chili.Opf3.Blob">Blob</see> and
            the <see cref="N:Chili.Opf3.DynamicProperties">DynamicProperties</see> implement this interface.
            </para>
            </remarks>
            <example>
            The following example shows how to implement the interface in your own types.
            	<code lang="CS">
            public class FirstNameLastNamePair : IUserDefinedType
            {
            	private string _firstName;
            	private string _lastName;
            
            	public void FromSimpleDataType(object value)
            	{
            		if (!(value is string))
            			throw new NotSupportedException("Value must be a string.");
            			
            		string[] tokens = ((string)value).Split(' ');
            		if (tokens.Length != 2)
            			throw new NotSupportedException("Only firstname-lastname pair is supported.");
            		
            		_firstName = tokens[0];
            		_lastName = tokens[1];
            	}
            
            	public object ToSimpleDataType()
            	{
            		return _firstName + " " + _lastName;
            	}
            
            	public Type SupportedType
            	{
            		get { return typeof(string); }
            	}
            
            	// ... Other properties and methods.
            }
            	</code>
            </example>
        </member>
        <member name="M:Chili.Opf3.IUserDefinedType.FromSimpleDataType(System.Object)">
            <summary>
            Populates the type that implements the interface (a type that can't be directly saved or 
            loaded from the storage) with data from the storage.
            </summary>
            <param name="value">The simple type representation in the storage (for example an xml string).</param>
        </member>
        <member name="M:Chili.Opf3.IUserDefinedType.ToSimpleDataType">
            <summary>
            Converts the user-defined type to a type that can be persisted to the storage. You could
            return here, for example, an xml string or something else that can be saved to the storage.
            </summary>
            <returns>
            The IUserDefinedType converted to a simple type that is saved to the
            storage.
            </returns>
        </member>
        <member name="P:Chili.Opf3.IUserDefinedType.SupportedType">
            <summary>
            Returns the type supported by the class implementing this interface. The supported type is the type
            of the value that is returned when converting to a simple type (the type supported by the storage).
            </summary>
        </member>
        <member name="T:Chili.Opf3.IObjectNotification">
            <summary>
            This interface is implemented by classes that need information on each change of
            their state.
            </summary>
            <remarks>
            Classes that need information about any change on their state have to implement
            this interface to get notified if their state changes. If the framework encounters a
            class implementing the interface the appropriate method is called while the state
            changes.
            </remarks>
            <example>
                The following example shows how to implement the interface in your own persistent
                classes.
                <code lang="CS">
            [Persistent("USER")]
            public class User : IObjectNotification
            {
                void IObjectNotifcation.OnBeforePopulated(ObjectNotificationEventArgs e)
                {
                    // The method is called before the object is populated.
                    // Any kind of checks could be done here, for example creating
                    // a backup of the existing object.
                }
             
                // ... Other methods of the interface.
             
                // ... Other properties and code.
            }
                </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.IObjectNotification.OnBeforePopulated(Chili.Opf3.ObjectNotificationEventArgs)">
            <summary>
            Invoked by the framework before the persistent object is populated.
            </summary>
            <param name="e">
            Contains information about the state of the persistent object and the
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.
            </param>
        </member>
        <member name="M:Chili.Opf3.IObjectNotification.OnAfterPopulated(Chili.Opf3.ObjectNotificationEventArgs)">
            <summary>
            Invoked by the framework after the object is populated.
            </summary>
            <param name="e">
            Contains information about the state of the persistent object and the
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.
            </param>
        </member>
        <member name="M:Chili.Opf3.IObjectNotification.OnBeforeInsert(Chili.Opf3.ObjectNotificationEventArgs)">
            <summary>
            Invoked by the framework before the object is inserted.
            </summary>
            <param name="e">
            Contains information about the state of the persistent object and the
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.
            </param>
        </member>
        <member name="M:Chili.Opf3.IObjectNotification.OnAfterInsert(Chili.Opf3.ObjectNotificationEventArgs)">
            <summary>
            Invoked by the framework after the object is inserted.
            </summary>
            <param name="e">
            Contains information about the state of the persistent object and the
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.
            </param>
        </member>
        <member name="M:Chili.Opf3.IObjectNotification.OnBeforeUpdate(Chili.Opf3.ObjectNotificationEventArgs)">
            <summary>
            Invoked by the framework before the object is updated.
            </summary>
            <param name="e">
            Contains information about the state of the persistent object and the
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.
            </param>
        </member>
        <member name="M:Chili.Opf3.IObjectNotification.OnAfterUpdate(Chili.Opf3.ObjectNotificationEventArgs)">
            <summary>
            Invoked by the framework after the object is updated.
            </summary>
            <param name="e">
            Contains information about the state of the persistent object and the
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.
            </param>
        </member>
        <member name="M:Chili.Opf3.IObjectNotification.OnBeforeDelete(Chili.Opf3.ObjectNotificationEventArgs)">
            <summary>
            Invoked by the framework before the object is deleted.
            </summary>
            <param name="e">
            Contain information about the state of the persistent object and the
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.
            </param>
        </member>
        <member name="M:Chili.Opf3.IObjectNotification.OnAfterDelete(Chili.Opf3.ObjectNotificationEventArgs)">
            <summary>
            Invoked by the framework after the object is deleted.
            </summary>
            <param name="e">
            Contains information about the state of the persistent object and the
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.
            </param>
        </member>
        <member name="M:Chili.Opf3.IObjectNotification.OnBeforeMarkDeleted(Chili.Opf3.ObjectNotificationEventArgs)">
            <summary>
            Invoked by the framework after the object has been marked deleted.
            </summary>
            <param name="e">
            Contains information about the state of the persistent object and the
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.
            </param>
        </member>
        <member name="M:Chili.Opf3.IObjectNotification.OnAfterMarkDeleted(Chili.Opf3.ObjectNotificationEventArgs)">
            <summary>
            Invoked by the framework after the object has been marked deleted.
            </summary>
            <param name="e">
            Contains information about the state of the persistent object and the
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.
            </param>
        </member>
        <member name="T:Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs">
            <summary>
            EventArgs of the <see cref="T:Chili.Opf3.Concurrency.IConcurrencyManager">IConcurencyManager</see> methods. 
            This class is passed as second parameter of each 
            <see cref="T:Chili.Opf3.Concurrency.IConcurrencyManager">IConcurencyManager</see> method.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs.#ctor(Chili.Opf3.ObjectInfo,Chili.Opf3.ObjectContext)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs">ConcurrencyManagerEventArgs Class</see>.
            </summary>
            <param name="objectInfo"><see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> container that contains 
            persistent informations about the persistent object.</param>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> that asked for validation.</param>
        </member>
        <member name="P:Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs.ObjectInfo">
            <summary>
            Returns the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> container that contains 
            persistent informations about the object.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs.Context">
            <summary>
            Returns the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> that asked for validation.
            </summary>
        </member>
        <member name="T:Chili.Opf3.ObjectPersistedEventArgs">
            <summary>
            EventArgs used in the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> events
            that are invoked after the persist process of an object.
            </summary>
            <remarks>
            This class is used by the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> in
            events that are invoked after the persist process of an object to send additional event
            data. The data contains the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object that
            contains further information about the state of the object, the object itself and if the
            operation has been performed sucessfully.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.ObjectPersistedEventArgs.#ctor(System.Object,Chili.Opf3.ObjectInfo,System.Boolean)">
            <summary>
            Creates a new instance of the<see cref="T:Chili.Opf3.ObjectPersistedEventArgs">ObjectPersistedEventArgs Class</see>.
            </summary>
            <param name="obj">The object that is affected by the current operation. This object is persisted to the storage. </param>
            <param name="objectInfo"><see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object that contains state information about the persistent object.</param>
            <param name="successfully">Specifies whether the operation was successfully.</param>
            <exception cref="T:System.ArgumentNullException">Query is null, obj is null or objectInfo is null.</exception>
        </member>
        <member name="P:Chili.Opf3.ObjectPersistedEventArgs.ObjectInfo">
            <summary>
            Returns the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object that 
            contains state information about the persistent object.
            </summary>
            <value>
            The <see cref="P:Chili.Opf3.ObjectPersistedEventArgs.ObjectInfo">ObjectInfo</see> object that contains state
            information about the persistent object.
            </value>
        </member>
        <member name="P:Chili.Opf3.ObjectPersistedEventArgs.Object">
            <summary>
            Returns the object that is affected by the current operation. This object is
            persisted to the storage.
            </summary>
            <value>The object affected by the current operation.</value>
        </member>
        <member name="P:Chili.Opf3.ObjectPersistedEventArgs.Successfully">
            <summary>
            Returns whether the operation has been performed successfully.
            </summary>
            <value>
            True if the operation was successfully, otherwise false.
            </value>
        </member>
        <member name="T:Chili.Opf3.Mapping.IIdentifierMemberInfoCollection">
            <summary>
            This interface represents the list of identifier <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> objects for 
            the persistent object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.IIdentifierMemberInfoCollection.Contains(Chili.Opf3.Mapping.IMemberInfo)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.IIdentifierMemberInfoCollection.CopyTo(Chili.Opf3.Mapping.IMemberInfo[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.IIdentifierMemberInfoCollection.GetMemberInfoByField(System.String)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> object associated with the given field name.
            </summary>
            <param name="fieldName">The name of the field in the storage.</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> class associated with the given field name.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.IIdentifierMemberInfoCollection.GetMemberInfoByName(System.String)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> object associated with the given name of an object member.
            </summary>
            <param name="memberName">The name of an object member (a property or a field).</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> class associated with the given object member.</returns>
        </member>
        <member name="P:Chili.Opf3.Mapping.IIdentifierMemberInfoCollection.Count">
            <summary>
            Gets the number of elements actually contained in the collection.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IIdentifierMemberInfoCollection.IsReadOnly">
            <summary>
            Returns whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IIdentifierMemberInfoCollection.Item(System.Int32)">
            <summary>
            Returns the item at the given index.
            </summary>
            <param name="index">The index of the item that is returned.</param>
            <returns>The item at the given index.</returns>
        </member>
        <member name="T:Chili.Opf3.ObjectContextFactory">
             <summary>
             Class that represents a factory class for <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instances. Use the 
             <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>'s static Factory property to get an instance.
             </summary>
             <remarks>
             This class represents a factory pattern for creating <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instances. The class 
             requires to set a class that inherits from <see cref="T:Chili.Opf3.ObjectContextFactoryPolicyBase">ObjectContextFactoryPolicyBase</see>
             (Policy property). That class represents a policy for creating new <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instances.
             </remarks>
             <example>
             This example shows how to set up the factory to create an ObjectContext instance for each new thread.
             <code lang="CS">
             // Set the policy for multi threading.
             ObjectContext.Factory.Policy = new PerThreadObjectContextFactoryPolicy(delegate()
             {
                 MsSqlStorage storage = new MsSqlStorage("... connection string ...");
                 ObjectContext ctx = new ObjectContext(storage);
            
                 return ctx;
             });
             
             // ... Other code
             
             // Have an ObjectContext instance created
             ObjectContext context = ObjectContext.Factory.GetObjectContext();
             </code>
             </example>
        </member>
        <member name="M:Chili.Opf3.ObjectContextFactory.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectContextFactory">ObjectContextFactory Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectContextFactory.GetObjectContext">
            <summary>
            Gets an <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance. This method might also create a new 
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance, if the policy requires so.
            </summary>
            <returns>An instance of the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectContextFactory.GetObjectContext``1">
            <summary>
            Gets an instance that inherits from <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>. This method might 
            also create a new <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance, if the policy requires so.
            </summary>
            <returns>An instance of a class that inherits from <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>.</returns>
        </member>
        <member name="P:Chili.Opf3.ObjectContextFactory.Policy">
            <summary>
            Gets or sets the policy for the <see cref="T:Chili.Opf3.ObjectContextFactory">ObjectContextFactory</see>.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Storages.Oracle.OracleStorage">
            <summary>Storage class that encapsulates a pyhsical Oracle database.</summary>
            <remarks>
            	<para>This class encapsulates a physical Oracle database. It is used to access to
                an Oracle database that is installed somewhere on your or on a remote machine. The storage
                implements the basic interfaces, such as
                <see cref="T:Chili.Opf3.Storages.IStorage">IStorage</see> for the basic storage IO
                functinality and
                <see cref="T:Chili.Opf3.Storages.ITransactionStorage">ITransactionStorage</see> for the
                transaction management.</para>
            	<para><b>Attention:</b> You should not access the methods of the storage directly
                but instead register the storage with your instances of the
                <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>. The
                <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> accesses the methods internally
                to get the objects from the storage.</para>
            </remarks>
            <example>
                The following example shows how you should use the Oracle storage in your
                applications. 
                <code lang="CS">
            // ... Other code
             
            // Creates a new ObjectContext that uses an Oracle database as storage.
            // You should only pass an instance of the storage to your ObjectContext.
            // That's it! Nothing more. The methods of the storage are accessed
            // by the context internally.
            ObjectContext context = new ObjectContext(
                new OracleStorage("... some ConnectionString ..."));
             
            // ... Other code
                </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.Storages.Oracle.OracleStorage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.Oracle.OracleStorage">OracleStorage
            Class</see>.
            </summary>
            <param name="connectionString">
            Specifies a string that contains the information (for ADO.NET) to connect to storage.
            </param>
            <exception cref="T:System.ArgumentNullException">ConnectionString is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.Oracle.OracleStorage.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.Oracle.OracleStorage">OracleStorage
            Class</see>.
            </summary>
            <param name="user">Specifies the name of the user that connects to the storage.</param>
            <param name="password">Specifies the password of the user that connects to the storage.</param>
            <param name="host">
            Specifies the database's hostname (Name of the machine where the database is
            installed).
            </param>
            <exception cref="T:System.ArgumentNullException">User is null, password is null or host is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.Oracle.OracleStorage.ExecuteCommand(Chili.Opf3.Query.IQuery)">
            <summary>
            Executes a command on the storage that does not expect any results. It the method
            returns an argument it is used by the framework to set the
            <see cref="P:Chili.Opf3.FieldAttribute.AutoNumber">AutoNumber</see> property of the persistent
            object.
            </summary>
            <param name="query">
            	<see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is compiled and executed on the
            storage.
            </param>
            <exception cref="T:Chili.Opf3.Storages.StorageConstraintException">A constraint of the storage 
            has been violated.</exception>
            <exception cref="T:Chili.Opf3.Storages.ForeignKeyViolationException">A foreign key in the storage 
            has been violated.</exception>
            <exception cref="T:Chili.Opf3.Storages.PrimaryKeyViolationException">A duplicate primary key 
            is inserted in the storage.</exception>
            <exception cref="T:Chili.Opf3.Storages.PrimaryKeyViolationException">An index has been violated.</exception>
            <exception cref="T:Chili.Opf3.Storages.StorageException">Any other unexpected storage exception.</exception>
            <exception cref="T:System.ArgumentNullException">Query is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.Oracle.OracleStorage.ExecuteReader``1(Chili.Opf3.ObjectContext,Chili.Opf3.Query.IQuery)">
            <summary>
            Executes and compiles the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> and returns
            an <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> with the resultsset.
            </summary>
            <param name="context">
            	<see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> that is connected with the
            <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see>.
            </param>
            <param name="query">
            	<see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is compiled and executed on the
            storage.
            </param>
            <exception cref="T:Chili.Opf3.Storages.StorageException">An unexpected storage exception has happened.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.Oracle.OracleStorage.CreateConnection">
            <summary>Creates a new storage dependent connection object.</summary>
            <returns>Returns an instance of a storage dependent connection object.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.Oracle.OracleStorage.CreateCommand">
            <summary>Creates a new storage dependent command object.</summary>
            <returns>Returns an instance of a storage dependent command object.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.Oracle.OracleStorage.CreateParameter(System.Int32,System.String@,System.Object,System.Type)">
            <summary>Creates and populates a storage dependent parameter with data.</summary>
            <returns>
            The name of the storage parameter should be set to a valid parameter name (one
            that is supported by the storage) while creating the parameter.
            </returns>
            <param name="index">Index of the storage parameter.</param>
            <param name="name">Name of the storage parameter.</param>
            <param name="value">Value of the storage parameter.</param>
            <param name="type">The type of the value argument. This information is useful if the value is null.</param>
            <exception cref="T:System.ArgumentNullException">Name is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.Oracle.OracleStorage.GetValidFieldName(System.String)">
            <summary>Transforms the parameter to a valid field.</summary>
            <returns>Returns a string that represents a valid field name.</returns>
            <remarks>
            This method returns a field name that is valid for the current storage. For some
            storages it is a better choice to start each field name with a '[' and end with a ']'
            (Ms Access) - This method could wrap each field name passed with '[]'.
            </remarks>
            <param name="name">Name for the field that is transformed.</param>
            <exception cref="T:System.ArgumentNullException">Name is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.Oracle.OracleStorage.GetValidEntityName(System.String)">
            <summary>
            Transforms the name of the entity to a valid entity name.
            </summary>
            <returns>Returns a string that represents a valid entity name.</returns>
            <remarks>
            This method returns an entity name that is valid for the current storage. For
            some storages it is a better choice to start each entity name with a '[' and end with a
            ']' (Ms Access) - This method could wrap each entity name passed with '[]'.
            </remarks>
            <param name="name">Name of the entity.</param>
            <exception cref="T:System.ArgumentNullException">Name is null.</exception>
        </member>
        <member name="P:Chili.Opf3.Storages.Oracle.OracleStorage.SequenceFormat">
            <summary>
            Specifies the format string for sequences.
            </summary>
            <remarks>
            The SequenceFormat string allows you to specify a format string for the sequence names.
            The default value for a sequence is {0}Sequence. {0} stands for the name of the entity
            for which this sequence is generated. You may also add {1} which is then the name of 
            the field for which the sequence is create. 
            </remarks>
            <example>
            This example shows the sequence format strings for an entity named "USER". The sequence is generated
            for the field "ID".
            <code>
            	{0}Sequence = USERSequence
                {0}_s1 = USER_s1
                {0}{1}Sequence = USERIDSequence
                {0}_s{1} = USER_sID
            </code>
            </example>
        </member>
        <member name="T:Chili.Opf3.Storages.MsSql.MsSqlTransaction">
            <summary>
            Class that provides a transaction object for the <see cref="T:Chili.Opf3.Storages.MsSql.MsSqlStorage">MsSqlStorage</see> class.
            </summary>
            <remarks>
            <para>
            This class provides a transaction object for the <see cref="T:Chili.Opf3.Storages.MsSql.MsSqlStorage">MsSqlStorage</see> class.
            It is returned by the <see cref="M:Chili.Opf3.Storages.MsSql.MsSqlStorage.StartTransaction(System.Data.IsolationLevel)">StartTransaction</see> methods of 
            the class.
            </para>
            <para>
            MsSqlTransaction adds support for save points and rolling back to save points.
            </para>
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlTransaction.#ctor(System.Data.SqlClient.SqlTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.MsSql.MsSqlTransaction">MsSqlTransaction Class</see>.
            </summary>
            <param name="transaction">The transaction that is returned by the ADO.NET provider for MS SQL.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlTransaction.AddObjectInfo(Chili.Opf3.ObjectInfo)">
            <summary>
            Adds the current <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object. This is required to roll
            the state of the persistent back during a roll back.
            </summary>
            <param name="oi"><see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> that is backed up.</param>
            <returns>Whether the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> has been added.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlTransaction.CreateSavePoint(System.String)">
            <summary>
            Creates a save point in the transaction that can be used to roll back a part of the transaction, 
            and specifies the save point name.
            </summary>
            <param name="name">The name of the save point to create.</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.Storages.MsSql.MsSqlSavePoint">MsSqlSavePoint</see> class.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlTransaction.Rollback(Chili.Opf3.Storages.MsSql.MsSqlSavePoint)">
            <summary>
            Rolls back a transaction from a pending state, and specifies the transaction 
            or save point name.
            </summary>
            <param name="savePoint">The save point to roll back to.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlTransaction.Rollback(System.String)">
            <summary>
            Rolls back a transaction from a pending state, and specifies the transaction 
            or save point name.
            </summary>
            <param name="savePoint">The name of the save point to roll back to.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlTransaction.Rollback">
            <summary>
            Rolls the current transaction back.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Storages.MsSql.MsSqlTransaction.Root">
            <summary>
            Returns the root save point of the current transaction.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Query.ObjectExpression">
            <summary>
            Represents a parsed <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see>.
            </summary>
            <remarks>
            <para>Attention: This class could change in future versions.</para>
            <para>
            This class represents a parsed <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see>. 
            To create an ObjectExpression you have to use the <see cref="M:Chili.Opf3.Query.OPath.Parse``1(Chili.Opf3.Query.ObjectQuery{``0})">Parse</see>
            method of the <see cref="T:Chili.Opf3.Query.OPath">OPath</see> class. A parsed
            <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see> is still storage independent
            but is faster executed on the storage, since parsing of the content is no longer required.
            </para>
            </remarks>
            <example>
            The following example shows how to create a ObjectExpression by using the 
            <see cref="T:Chili.Opf3.Query.OPath">OPath</see> class. The ObjectExpression is then also compiled
            afterwards.
            <code lang="CS">
            // ... Other code
            
            // Create an ObjectQuery for User persistent objects.
            // Add a condition to load only user with a name that contains "hri"
            ObjectQuery&lt;User&gt; objectQuery = 
            new ObjectQuery&lt;User&gt;("UserName like {0}", "%hri%");
            
            // Create an ObjectExpression by parsing the ObjectQuery.
            ObjectExpression objectExpresion = OPath.Parse(objectQuery);
            
            // Compile the ObjectExpression to get a CompildQuery.
            // You have to set the storage that is used to compile the query.
            CompiledQuery compiled = objectExpression.ToCompiledQuery(ObjectContext.Storage);
            
            // ... Other code
            </code>
            </example>
        </member>
        <member name="T:Chili.Opf3.Query.Expression">
            <summary>
            Class that represents the base class for all expressions used in the framework.
            </summary>
            <remarks>
            <para>
            This class represents the base class for all expressions used in the framework. <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see>
            and <see cref="T:Chili.Opf3.Query.PersistentObjectExpression">PersistentObjectExpression</see> inherit from it. It provides basic functionality such as
            converting the expression to a storage dependent <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see> class.
            </para>
            <para>
            <see cref="T:Chili.Opf3.Query.Expression">Expression</see> provides static methods that create a expression to persist a persistent or to reload a persistent
            from the database.
            </para>
            </remarks>
        </member>
        <member name="T:Chili.Opf3.Query.IQuery">
            <summary>
            This interface is implemented by each type of Query. Classes
            that implement this interface can be used as queries in the framework.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.IQuery.ToCompiledQuery(Chili.Opf3.Storages.IStorage)">
            <summary>
            Converts the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> to an
            <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see> that is then executed on a
            specific <see cref="T:Chili.Opf3.Storages.IStorage">storage</see>.
            </summary>
            <returns>
            A new <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see> that has been generated using this instance.
            </returns>
            <param name="storage">
            Class that implements the <see cref="T:Chili.Opf3.Storages.IStorage">IStorage</see>
            interface. The query is executed on that storage.
            </param>
        </member>
        <member name="P:Chili.Opf3.Query.IQuery.Timeout">
            <summary>
            Specifies the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <value>An integer that specifies the wait time in seconds.</value>
        </member>
        <member name="P:Chili.Opf3.Query.IQuery.QueryType">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Query.QueryTypes">QueryType</see> of the query.
            </summary>
            <value>
            A member of the <see cref="T:Chili.Opf3.Query.QueryTypes">QueryType</see>
            enumeration.
            </value>
        </member>
        <member name="M:Chili.Opf3.Query.Expression.#ctor(Chili.Opf3.Query.QueryTypes)">
            <summary>
            Creates an instance of the <see cref="T:Chili.Opf3.Query.Expression">Expression Class</see>.
            </summary>
            <param name="queryType">The type of the query.</param>
        </member>
        <member name="M:Chili.Opf3.Query.Expression.CreatePersistExpression(System.Object,Chili.Opf3.ObjectContext)">
            <summary>
            Creates and returns an <see cref="T:Chili.Opf3.Query.Expression">Expression</see> that is used to do a persist of a persistent object.
            </summary>
            <param name="obj">The object that is going to be persisted.</param>
            <param name="context">The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> used to persist the object.</param>
        </member>
        <member name="M:Chili.Opf3.Query.Expression.CreateLoadExpression(System.Object)">
            <summary>
            Creates and returns an <see cref="T:Chili.Opf3.Query.Expression">Expression</see> that is used to load an instance of the given
            persistent object.
            </summary>
            <param name="obj">The object that is going to be loaded.</param>
        </member>
        <member name="M:Chili.Opf3.Query.Expression.ToCompiledQuery(Chili.Opf3.Storages.IStorage)">
            <summary>
            Compiles the <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see> to a
            <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see>.
            <see cref="T:Chili.Opf3.Query.CompiledQuery">Compiled Queries</see> can only be executed on the
            type of storage they have been compiled for.
            </summary>
            <param name="storage">
            Storage that is used to compile the
            <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see>.
            </param>
            <exception cref="T:System.ArgumentNullException">Storage is null.</exception>
        </member>
        <member name="P:Chili.Opf3.Query.Expression.Timeout">
            <summary>
            Specifies the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <value>An integer that specifies the wait time in seconds.</value>
            <exception cref="T:System.ArgumentException">Value is lower then zero.</exception>
        </member>
        <member name="P:Chili.Opf3.Query.Expression.QueryType">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Query.QueryTypes">QueryType</see> of the ObjectExpression.
            </summary>
            <value>
            A member of the &lt;see cref="Opf3.Query.QueryTypes"&gt;QueryType&lt;/see&gt;
            enumeration.
            </value>
        </member>
        <member name="M:Chili.Opf3.Query.ObjectExpression.#ctor(Chili.Opf3.Query.QueryTypes,System.Type,Chili.Opf3.PersistentAttribute)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression
            Class</see>.
            </summary>
            <param name="queryType">
            Specifies the <see cref="T:Chili.Opf3.Query.QueryTypes">QueryType</see> of the
            <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see>.
            </param>
            <param name="type">The primary type associated with the expression.</param>
            <param name="attribute">The primary persistent attribute of the type.</param>
            <exception cref="T:System.ArgumentException">Timeout is lower then zero.</exception>
            <exception cref="T:System.ArgumentNullException">PersistentAttribute is null.</exception>
        </member>
        <member name="P:Chili.Opf3.Query.ObjectExpression.Items">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Query.OPathParser.OEItem">ObjectExpressionItems 
            (conditions, sort options, joins, brackets, comparer, concats, ...)</see> of the ObjectExpression.
            </summary>
            <value>
            A list of <see cref="T:Chili.Opf3.Query.OPathParser.OEItem">ObjectExpressionItems</see> 
            containing conditions, sort options, joins, brackets, comparer, concats, ... for the 
            <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see>.
            </value>
        </member>
        <member name="P:Chili.Opf3.Query.ObjectExpression.TypeMapping">
            <summary>
            Returns the primary <see cref="P:Chili.Opf3.Query.ObjectExpression.TypeMapping">TypeMapping</see> associated with the
            <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see>.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Query.ObjectExpression.PersistentAttributes">
            <summary>
            Returns a list of <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttributes</see> of the 
            ObjectExpression. The attribute is the attribute from the entity that is requested from the storage 
            and it is used to compiled the ObjectExpression to a 
            <see cref="T:Chili.Opf3.Query.CompiledQuery">CompildQuery</see>.
            </summary>
        </member>
        <member name="T:Chili.Opf3.PersistDepths">
            <summary>
            Allows to specify the depth of the <strong>loaded object graph</strong> that is
            persisted during the save process.
            </summary>
            <remarks>
            This enumeration is used in the
            <see cref="M:Chili.Opf3.ObjectContext.PersistChanges``1(``0,Chili.Opf3.PersistDepths)">PersistChanges</see>
            method of the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> and allows to specify
            which part of the loaded object graph is persisted. It's important to know
            that this enumeration <strong>applies only to loaded related objects and
            collections</strong> (See
            <see cref="T:Chili.Opf3.Relations.ObjectHolder`1">ObjectHolder</see>,
            <see cref="T:Chili.Opf3.Relations.ObjectSetHolder`1">ObjectSetHolder</see> and
            <see cref="T:Chili.Opf3.Relations.ObjectListHolder`1">ObjectListHolder</see> for further
            information about delayed loading of related objects). This means that not loaded
            related collections and objects are excluded by design.
            </remarks>
            <example>
                The following example shows you how to use the enumeration while saving persistent
                objects. 
                <code lang="CS">
            // Create a storage and the context.
            OleDbStorage storage = new OleDbStorage("connectionstring ...");
            ObjectContext context = new ObjectContext(storage);
             
            // Load the user with the Id '1'.
            User user = context.GetObject&lt;User&gt;("Id = {0}", "1");
            if (user != null)
            {
                // Get the calls of the user. The calls are only loaded
                // during the first request of the property (delayed loading).
                ObjectSet&lt;Call&gt; calls = user.Calls;
            }
             
            // Save the user object. Since flat is used only the object
            // without the calls is saved.
            context.PersistChanges(user, PersistDepth.Flat);
             
            // Save the user object. Using FirstLevel means that the object
            // itself plus the calls are saved. If each call would contain
            // another connected object or collection that wouldn't be saved.
            context.PersistChanges(user, PersistDepth.FirstLevel);
                </code>
            </example>
        </member>
        <member name="F:Chili.Opf3.PersistDepths.None">
            <summary>
            No persist depth is specified.
            </summary>
        </member>
        <member name="F:Chili.Opf3.PersistDepths.Flat">
            <summary>
            When using this option only the object itself is persisted. 
            Connected object collections or connected objects aren't persisted.
            </summary>
        </member>
        <member name="F:Chili.Opf3.PersistDepths.FirstLevel">
            <summary>
            The first level of connected objects is persisted. This means that the object
            itself plus the first level of loaded connected objects and collections are persisted.
            If those objects contain other connected objects they aren't persisted.
            </summary>
        </member>
        <member name="F:Chili.Opf3.PersistDepths.FullObjectGraph">
            <summary>
            The whole object graph is persited. All loaded connected objects
            in any level are persisted.
            </summary>
        </member>
        <member name="T:Chili.Opf3.ID`1">
            <summary>
            Class that represents an identifier in the storage.
            </summary>
            <remarks>
            This class can be used to represent an Identifier in the storage.
            It is not necessary to use this class as identifier.
            </remarks>
            <example>
            The following example shows how to use the class in a persistent object.
            	<code lang="CS">
            [Persistent("USER")]
            public sealed class User
            {
            	[Field("NAME", Mandatory = false)]
            	public string Name
            	{
            		// ... Code of the property.
            	}
            
            	[Field("ID", Mandatory = true, Identifier = true)]
            	public ID&lt;string&gt; Id
            	{
            		// ... Code of the property.
            	}
            
            	// ... Other code of the class.
            }
            
            // ... Other code.
            
            User user = new User();
            user.Id = ID.CreateGuidID();
            
            User user1 = new User();
            user1.Id = ID.CreateGuidID();
            
            // Checks the values of the both IDs.
            if (user.Id == user1.Id)
            {
            	// Should not enter here.
            }
            
            // Copy the ID from one object to the other.
            // Now both IDs are conntected, since they are
            // the same instance.
            user.Id = user1.Id;
            	</code>
            </example>
        </member>
        <member name="M:Chili.Opf3.ID`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ID`1">ID Class.</see>
            </summary>
        </member>
        <member name="M:Chili.Opf3.ID`1.#ctor(`0)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ID`1">ID Class.</see>
            </summary>
            <param name="value">Value of the ID.</param>
            <exception cref="T:System.ArgumentNullException">Value is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ID`1.Chili#Opf3#IUserDefinedType#FromSimpleDataType(System.Object)">
            <summary>
            Populates the <see cref="T:Chili.Opf3.IUserDefinedType">IUserDefinedType</see> 
            with data from the storage.
            </summary>
            <param name="value">Value from the storage.</param>
        </member>
        <member name="M:Chili.Opf3.ID`1.Chili#Opf3#IUserDefinedType#ToSimpleDataType">
            <summary>
            Converts the <see cref="T:Chili.Opf3.IUserDefinedType">IUserDefinedType</see> to a type 
            that can be saved to the storage.
            </summary>
            <returns>Returns a value that represents the <see cref="T:Chili.Opf3.IUserDefinedType">IUserDefinedType</see>
            converted to a simple type.</returns>
        </member>
        <member name="M:Chili.Opf3.ID`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Chili.Opf3.ID`1.op_Equality(Chili.Opf3.ID{`0},Chili.Opf3.ID{`0})">
            <summary>
            Checks the values and returns true, if both have the same value.
            </summary>
            <param name="id1">First ID to check.</param>
            <param name="id2">Second ID to check.</param>
            <returns>Returns true if both IDs have the same value.</returns>
        </member>
        <member name="M:Chili.Opf3.ID`1.op_Inequality(Chili.Opf3.ID{`0},Chili.Opf3.ID{`0})">
            <summary>
            Checks the values and returns true, if both have different values.
            </summary>
            <param name="id1">First ID to check.</param>
            <param name="id2">Second ID to check.</param>
            <returns>Returns true if both IDs have different values.</returns>
        </member>
        <member name="M:Chili.Opf3.ID`1.Equals(System.Object)">
            <summary>
            Determines whether two instances are equal.
            </summary>
            <param name="obj">Object that is checked to be equal with the current one.</param>
            <returns>Returns true if both objects are equal.</returns>
        </member>
        <member name="M:Chili.Opf3.ID`1.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ID`1.Value">
            <summary>
            Specifies the current value of the ID.
            </summary>
            <value>
            The current value of the ID.
            </value>
        </member>
        <member name="P:Chili.Opf3.ID`1.HasValue">
            <summary>
            Gets whether the ID has a value set.
            </summary>
            <value>
            Returns true if the ID has a value.
            </value>
        </member>
        <member name="P:Chili.Opf3.ID`1.Chili#Opf3#IUserDefinedType#SupportedType">
            <summary>
            Returns the type supported by the class implementing this interface. The supported type is the type
            that is returned when converting to a simple type and the type that is set when converting from the simple type.
            </summary>
        </member>
        <member name="T:Chili.Opf3.ObjectLoadedEventArgs">
            <summary>
            EventArgs used in the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> events
            that are invoked after the load process of an object.
            </summary>
            <remarks>
            This class is used by the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> in
            events that are invoked after the load process of an object to send additional event
            data. The data contains the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object that
            contains further information about the state of the object and the object itself,
            </remarks>
        </member>
        <member name="M:Chili.Opf3.ObjectLoadedEventArgs.#ctor(System.Object,Chili.Opf3.ObjectInfo)">
            <summary>
            Creates a new instance of the<see cref="T:Chili.Opf3.ObjectLoadedEventArgs">ObjectLoadedEventArgs Class</see>.
            </summary>
            <param name="obj">The object that is affected by the current operation. This object is loaded from the storage.</param>
            <param name="objectInfo"><see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object that contains state information about the persistent object.</param>
            <exception cref="T:System.ArgumentNullException">Query is null, obj is null or objectInfo is null.</exception>
        </member>
        <member name="P:Chili.Opf3.ObjectLoadedEventArgs.ObjectInfo">
            <summary>
            Returns the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object that 
            contains state information about the persistent object.
            </summary>
            <value>
            The <see cref="P:Chili.Opf3.ObjectLoadedEventArgs.ObjectInfo">ObjectInfo</see> object that contains state
            information about the persistent object.
            </value>
        </member>
        <member name="P:Chili.Opf3.ObjectLoadedEventArgs.Object">
            <summary>
            Returns the object that is affected by the current operation. This object is
            loaded from the storage.
            </summary>
            <value>The object affected by the current operation.</value>
        </member>
        <member name="T:Chili.Opf3.IRelationsNotification">
             <summary>
             This interface is implemented by classes that need information on the persist of
             related persistent objects.
             </summary>
             <remarks>
             <para>
             Classes that need information about any persist of related persistents have to implement
             this interface to get notified about the changes. If the framework encounters a
             class implementing the interface the appropriate method is called while the related 
             persistent objects are persisted.
             </para>
             <para>
             Each method is called twice. Once before/after the relations marked with 
             <see cref="F:Chili.Opf3.Relations.PersistRelationships.ChildFirst">ChildFirst</see> and the other time before/after the 
             relations marked with <see cref="F:Chili.Opf3.Relations.PersistRelationships.ParentFirst">ParentFirst</see> are going to be saved.
             To understand which call is currently fired, check the <see cref="T:Chili.Opf3.RelationsNotificationEventArgs">PersistRelationship</see> 
             property of the <see cref="T:Chili.Opf3.RelationsNotificationEventArgs">RelationsNotificationEventArgs</see>.
             </para>
             </remarks>
             <example>
                 The following example shows how to implement the interface in your own persistent
                 classes.
                 <code lang="CS">
             [Persistent("USER")]
             public class User : IRelationsNotification
             {
                 void IRelationsNotification.OnBeforeRelationsPersist(RelationsNotificationEventArgs e)
                 {
                     if (e.PersistentOperation == PersistentOperations.Delete)
                     {
                         this.Calls.RemoveAll();
                         e.Context.PersistChanges(this.Calls, PersistDepths.Flat);
                     }
                 }
            
                 // ... Other methods of the interface.
            
                 // ... Other properties and code.
             }
                 </code>
             </example>
        </member>
        <member name="M:Chili.Opf3.IRelationsNotification.OnBeforeRelationsPersist(Chili.Opf3.RelationsNotificationEventArgs)">
            <summary>
            Invoked by the framework before the persistent's related objects are persisted.
            </summary>
            <param name="e">
            Contains information about the current operation, relationship type and the
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.
            </param>
        </member>
        <member name="M:Chili.Opf3.IRelationsNotification.OnAfterRelationsPersist(Chili.Opf3.RelationsNotificationEventArgs)">
            <summary>
            Invoked by the framework after the persistent's related objects are persisted.
            </summary>
            <param name="e">
            Contains information about the current operation, relationship type and the
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.
            </param>
        </member>
        <member name="T:Chili.Opf3.IPersistentFactory">
             <summary>
             Interface implemented by classes that create persistent object instances.
             </summary>
             <remarks>
             <para>
             This interface is implemented by classes that create persistent object instances from 
             persistent object types. The interface is registered with the static
             <see cref="T:Chili.Opf3.ObjectContext">ObjectContext.PersistentFactory</see> method and queried 
             on each creation of a persistent object instance.
             </para>
             <para>
             The interface should be implemented to improve the performance of persistent object
             creation.
             </para>
             <example>
             The following example shows how to implement and register the interface.
            		<code lang="CS">
             public sealed class MyPersistentFactory : IPersistentFactory
             {
            		public object CreateInstance(Type type, object[] parameters)
            		{
            			if (type == typeof(User))
            				return new User();
            			else if (type == typeof(Call))
            				return new Call();
            
            			// For all other types return null.
            			return null;
            		}
             }
             
             // Other code...
             
             // Register the factory with the ObjectContext.
             ObjectContext.PersistentFactory = new MyPersistentFactory();
            		</code>
             </example>
             </remarks>
        </member>
        <member name="M:Chili.Opf3.IPersistentFactory.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates an instance of a persistent object type. If the factory does not support 
            creation of the given type, it should return null.
            </summary>
            <param name="type">The type of the persistent to create an instance for.</param>
            <param name="parameters">The constructor parameters for the persistent object instance.</param>
            <returns>An instance if the factory can create one. Null if the factory can't create an instance for the given type.</returns>
        </member>
        <member name="T:Chili.Opf3.ObjectContextFactoryCreatorDelegate">
            <summary>
            This delegate is invoked by the <see cref="T:Chili.Opf3.ObjectContextFactory">ObjectContextFactory</see> to create 
            a new <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance. It must always return a new instance
            of an <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>.
            </summary>
            <returns>An <see cre="ObjectContext">ObjectContext</see> instance.</returns>
        </member>
        <member name="T:Chili.Opf3.InspectedTrace">
            <summary>
            Class that stores information about recently inspected persistent objects.
            </summary>
        </member>
        <member name="M:Chili.Opf3.InspectedTrace.Add(System.Object)">
            <summary>
            Adds an object to be traced as inspected by this class.
            </summary>
            <param name="obj">The object that is added to be traced by this instance of the 
            <see cref="T:Chili.Opf3.InspectedTrace"/> class.</param>
        </member>
        <member name="M:Chili.Opf3.InspectedTrace.Contains(System.Object)">
            <summary>
            Returns whether the persistent object is already in the trace.
            </summary>
            <param name="obj">The object that is checked of being already traced.</param>
        </member>
        <member name="M:Chili.Opf3.InspectedTrace.Clear">
            <summary>
            Clears the cache of the <see cref="T:Chili.Opf3.PersistingTrace">PersistingTrace</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.InspectedTrace.GetKey(System.Object)">
            <summary>
            Returns the key for the given object.
            </summary>
            <param name="obj">The object used to create the key.</param>
        </member>
        <member name="P:Chili.Opf3.InspectedTrace.Count">
            <summary>
            Returns the amount of objects managed by this instance.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Query.Comparisons">
            <summary>
            The member of this enumeration specifies the comparison condition for properties of the
            <see cref="T:Chili.Opf3.Query.ObjectQueryBuilder`1">ObjectQueryBuilder</see>.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.Comparisons.Lower">
            <summary>
            The property value is less then then the given value.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.Comparisons.LowerEquals">
            <summary>
            The property value is less or equals then the given value.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.Comparisons.Equals">
            <summary>
            The property value equals with the given value.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.Comparisons.NotEquals">
            <summary>
            The property value does not equal with the given value.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.Comparisons.HigherEquals">
            <summary>
            The property value is higher or equal then the given value.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.Comparisons.Higher">
            <summary>
            The property value is higher then the given value.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.Comparisons.Like">
            <summary>
            The property value is like the given value.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Query.AutoNumberItems">
            <summary>
            Contains the attributes of the persistent object and of the properties marked as autonumbers.
            </summary>
            <remarks>
            This class contains the attributes of the persistent object and of the properties marked as autonumbers. 
            It is required by some storages to do the autonumber processing. The class contains all items
            to do the autonumber processing, such as all <see cref="T:Chili.Opf3.FieldAttribute">FieldAttributes</see>
            and the <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see> of the persistent class.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.AutoNumberItems.#ctor(Chili.Opf3.PersistentAttribute)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.AutoNumberItems">AutoNumberItems Class</see>.
            </summary>
            <param name="persistentAttribute">The <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see>
            of the persistent object that is inserted.</param>
            <exception cref="T:System.ArgumentNullException">PersistentAttribute is null.</exception>
        </member>
        <member name="P:Chili.Opf3.Query.AutoNumberItems.PersistentAttribute">
            <summary>
            Returns the <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see> of the persistent
            object that is inserted.
            </summary>
            <value>The <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see> of the persistent
            object that is inserted.</value>
        </member>
        <member name="T:Chili.Opf3.Query.AutoNumberItem">
            <summary>
            Represents an autonumber item.
            </summary>
            <remarks>
            This class represents an autonumber item. It is created during each creation of 
            an insert command where auto numbers are involved.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.AutoNumberItem.#ctor(Chili.Opf3.FieldAttribute,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.AutoNumberItem">AutoNumberItem Class</see>.
            </summary>
            <param name="field">The field that is marked as auto number in the persistent object.</param>
            <param name="value">The value for the auto number field. If the value for the autonumber is created
            during creation of the insert statement this value is set.</param>
        </member>
        <member name="M:Chili.Opf3.Query.AutoNumberItem.#ctor(Chili.Opf3.FieldAttribute)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.AutoNumberItem">AutoNumberItem Class</see>.
            </summary>
            <param name="field">The field that is marked as auto number in the persistent object.</param>
        </member>
        <member name="P:Chili.Opf3.Query.AutoNumberItem.FieldAttribute">
            <summary>
            Returns the field marked as auto number in the persistent object.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Query.AutoNumberItem.Value">
            <summary>
            Returns the value for the auto number field. This property is only set if the value for the 
            auto number property is created during creation of the insert statement. Otherwise it is null.
            </summary>
        </member>
        <member name="T:Chili.Opf3.ObjectPersister">
            <summary>
            This class is used by the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> to
            persist one single object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectPersister.#ctor(Chili.Opf3.ObjectContext)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectPersister">ObjectPersister Class</see>.
            </summary>
            <param name="context">The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> associated with the 
            <see cref="T:Chili.Opf3.ObjectPersister">ObjectPersister</see>.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectPersister.GetCurrentPersistentOperation(System.Object)">
            <summary>
            Returns the current persistent operation that is done on the persistent object.
            </summary>
            <param name="obj">The persistent object thats operation is returned.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectPersister.PersistChanges``1(``0,Chili.Opf3.PersistDepths)">
            <summary>
            Persists the persistent object given.
            </summary>
            <param name="obj">Persistent object that is persisted.</param>
            <param name="persistDepth">Specifies the depth of the current persist operation.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectPersister.Delete``1(``0,Chili.Opf3.ObjectInfo,Chili.Opf3.PersistDepths)">
            <summary>
            Deletes the object in the storage.
            </summary>
            <param name="obj">Object that is deleted.</param>
            <param name="objectInfo">Object that is used to change the state of the object.</param>
            <param name="persistDepth">Specifies the depth of the current persist operation.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectPersister.Insert``1(``0,Chili.Opf3.ObjectInfo,Chili.Opf3.PersistDepths)">
            <summary>
            Inserts the object in the storage.
            </summary>
            <param name="obj">Object that is inserted.</param>
            <param name="objectInfo">Object that is used to change the state of the object.</param>
            <param name="persistDepth">Specifies the depth of the current persist operation.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectPersister.Update``1(``0,Chili.Opf3.ObjectInfo,Chili.Opf3.PersistDepths)">
            <summary>
            Updates the object in the storage.
            </summary>
            <param name="obj">Object that is updated.</param>
            <param name="objectInfo">Object that is used to change the state of the object.</param>
            <param name="persistDepth">Specifies the depth of the current persist operation.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectPersister.OnInserting(Chili.Opf3.ObjectPersistingEventArgs)">
            <summary>
            Invoked before an object is inserted.
            </summary>
            <param name="e">EventArgs of the routine.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectPersister.OnInserted(Chili.Opf3.ObjectPersistedEventArgs)">
            <summary>
            Invoked after an object is inserted.
            </summary>
            <param name="e">EventArgs of the routine.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectPersister.OnUpdating(Chili.Opf3.ObjectPersistingEventArgs)">
            <summary>
            Invoked before an object is updated.
            </summary>
            <param name="e">EventArgs of the routine.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectPersister.OnUpdated(Chili.Opf3.ObjectPersistedEventArgs)">
            <summary>
            Invoked after an object is updated.
            </summary>
            <param name="e">EventArgs of the routine.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectPersister.OnDeleting(Chili.Opf3.ObjectPersistingEventArgs)">
            <summary>
            Invoked before an object is deleted.
            </summary>
            <param name="e">EventArgs of the routine.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectPersister.OnDeleted(Chili.Opf3.ObjectPersistedEventArgs)">
            <summary>
            Invoked after an object is deleted.
            </summary>
            <param name="e">EventArgs of the routine.</param>
        </member>
        <member name="E:Chili.Opf3.ObjectPersister.Updating">
            <summary>
            Event fired before an object is updated.
            </summary>
        </member>
        <member name="E:Chili.Opf3.ObjectPersister.Updated">
            <summary>
            Event fired after an object is updated.
            </summary>
        </member>
        <member name="E:Chili.Opf3.ObjectPersister.Inserting">
            <summary>
            Event fired before an object is inserted.
            </summary>
        </member>
        <member name="E:Chili.Opf3.ObjectPersister.Inserted">
            <summary>
            Event fired after an object is inserted.
            </summary>
        </member>
        <member name="E:Chili.Opf3.ObjectPersister.Deleting">
            <summary>
            Event fired before an object is deleted.
            </summary>
        </member>
        <member name="E:Chili.Opf3.ObjectPersister.Deleted">
            <summary>
            Event fired after an object is deleted.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Mapping.IRelatedPropertiesPairCollection">
            <summary>
            This interface contains a list of <see cref="T:Chili.Opf3.Mapping.IRelatedPropertiesPair">IRelatedPropertiesPair</see> interfaces.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.IRelatedPropertiesPairCollection.Contains(Chili.Opf3.Mapping.IRelatedPropertiesPair)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.IRelatedPropertiesPairCollection.CopyTo(Chili.Opf3.Mapping.IRelatedPropertiesPair[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Chili.Opf3.Mapping.IRelatedPropertiesPairCollection.Count">
            <summary>
            Gets the number of elements actually contained in the collection.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IRelatedPropertiesPairCollection.IsReadOnly">
            <summary>
            Returns whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IRelatedPropertiesPairCollection.Item(System.Int32)">
            <summary>
            Returns the item at the given index.
            </summary>
            <param name="index">The index of the item that is returned.</param>
            <returns>The item at the given index.</returns>
        </member>
        <member name="T:Chili.Opf3.IPartialPersist">
             <summary>
             This interface that is implemented by objects that are partually persisted.
             </summary>
             <remarks>
             <para>
             This interface is implemented by classes that are partually persisted. It
             allows the persistent to specify if any members are to persist and return for
             each member whether to persist. This interface allows to do powerful change tracking
             and updating of only changed members if combined with the 
             <see cref="T:Chili.Opf3.IObjectNotification">IObjectNotification</see> interface.
             </para>
             </remarks>
             <example>
             The following example shows how to implement the interface and use it in combination 
             with the <see cref="T:Chili.Opf3.IObjectNotification">IObjectNotification</see> interface.
             <code lang="CS">
             [Persistent("Users")]
             public sealed class User : IPartialPersist, IObjectNotification
             {
                 private Dictionary&lt;string, bool&gt; _changes;
                 private string _name;
             
                 [Field("Name")]
                 public string Name
                 {
                     get { return _name; }
                     set 
                     { 
                         _name = value;
             
                         // Signalize that the property has changed.
                         SignalizeChange("Name");
                     }
                 }
             
                 // ... Other properties of the persistent.
             	
                 // Signalizes that a property with the given name has been changed.
                 private void SignalizeChange(string propertyName)
                 {
                     // Adds the changed property to the dictionary.
                     if (_changes != null &amp;&amp; !_changes.ContainsKey(propertyName))
                         _changes.Add(propertyName, true);
                 }
            
                 #region IObjectNotification Members
            
                 void IObjectNotification.OnAfterPopulated(ObjectNotificationEventArgs e)
                 {
                     // Initializes the dictionary holding the changes after having
                     // finished to populate the persistent object.
                     _changes = new Dictionary&lt;string, bool&gt;();
                 }
             
                 // ... Other methods of the interface.
             
                 #endregion
            
                 #region IPartialPersist Members
            
                 // Returns whether a member is to persist.
                 bool IPartialPersist.IsMemberToPersist(string name, PersistentOperations operation)
                 {
                     // Return whether the dictionary contains the property.
                     // Returning true means that the member is to persist. False means it's to skip.
                     return _changes.ContainsKey(name);
                 }
            
                 // Gets whether the persistent instance has members to persist.
                 bool IPartialPersist.HasMembersToPersist
                 {
                     get { return _changes.Count &gt; 0; }
                 }
            
                 #endregion
             }
             </code>
             </example>
        </member>
        <member name="M:Chili.Opf3.IPartialPersist.IsMemberToPersist(System.String,Chili.Opf3.PersistentOperations)">
            <summary>
            Returns whether a member is to persist.
            </summary>
            <param name="name">The name of the member to persist.</param>
            <param name="operation">The current persistent operation.</param>
            <returns>True if the member is to persist; false otherwise.</returns>
        </member>
        <member name="P:Chili.Opf3.IPartialPersist.HasMembersToPersist">
            <summary>
            Gets whehter the persistent instance has members to persist.
            </summary>
        </member>
        <member name="T:Chili.Opf3.IPopulateHelperExtended">
            <summary>
            This interface that is implemented by objects that are populated manually.
            </summary>
            <remarks>
            	<para>This interface is implemented by classes that won't let the framework
                automatically populate them with data or retrieve data from them via reflection.</para>
            	<para>If the framework encounters a persistent object that implements this
                interface it gives the content of the field from the storage (in combination with
                the name of the property that is mapped to that field) as value to the class. The
                class itself has to populate the property in an appropriate way.</para>
            	<para><b>Attention:</b> Throw an exception if something goes wrong while manually
                populating the object. This will solve problems like loss of data etc.</para>
            </remarks>
            <example>
                The following example shows how to implement the interface. 
                <code lang="CS">
            [Persistent("USER")]
            public class User : IPopulateHelperExtended
            {
                public bool PropertyIsHandled(string propertyName)
                {
                    switch(propertyName)
                    {
                        case "Name":
                        case "ID":
                        // ... Other properties.
                            return true;
                        default:
                            return false;
                    }
                }
            
                public object this[string propertyName]
                {
                    get
                    {
                        switch(propertyName)
                        {
                            case "Name":
                                return Name;
                            // ... Other properties.
                            default:
                                throw new Exception();
                        }
                    }
                    set
                    {
                        switch(propertyName)
                        {
                            case "Name":
                                Name = value;
                                break;
                            // ... Other properties.
                            default:
                                throw new Exception();
                        }
                    }
                }
             
                // ... Other properties and code.
            }
                </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.IPopulateHelperExtended.PropertyIsHandled(System.String)">
            <summary>
            Returns whether the property is handled by the interface.
            </summary>
            <param name="propertyName">The name of the property that is checked for being handled.</param>
            <returns>True if the property is handled by the interface; otherwise false.</returns>
        </member>
        <member name="T:Chili.Opf3.ObjectPool">
            <summary>
            A simple object pool for objects. Is used to populate faster
            big collections and to create faster large amounts of objects.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectPool.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectPool">ObjectPool Class</see>.
            </summary>
            <remarks>This constructor is private to avoid creating more the one pool.</remarks>
        </member>
        <member name="M:Chili.Opf3.ObjectPool.AddType(System.Type,System.Object[])">
            <summary>
            Adds an object type to the cache. 
            </summary>
            <param name="type">Type of object that is added to the cache.</param>
            <param name="constructorParameter">Constructor parameter for the object.</param>
            <exception cref="T:System.ArgumentNullException">Type is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectPool.CreateObject(System.Type,System.Object[])">
            <summary>
            Creates a new instance of the given object type.
            </summary>
            <param name="type">The type of object whose instance is created.</param>
            <param name="parameters">A list of constructor parameters</param>
        </member>
        <member name="M:Chili.Opf3.ObjectPool.GetObject(System.Type)">
            <summary>
            Returns one object of the given type.
            </summary>
            <param name="type">Type of the required object.</param>
            <exception cref="T:System.ArgumentNullException">Type is null.</exception>
        </member>
        <member name="P:Chili.Opf3.ObjectPool.Current">
            <summary>
            Returns the instance of the object pool.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectPool.PersistentFactory">
            <summary>
            Specifies a class implementing the <see cref="T:Chili.Opf3.IPersistentFactory">IPersistentFactory</see> used to create
            instances of the persistent object.
            </summary>
        </member>
        <member name="T:Chili.Opf3.ObjectPool.Cache">
            <summary>
            Class that is a cache for one type of object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectPool.Cache.#ctor(Chili.Opf3.ObjectPool,System.Type,System.Object[],System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="pool">The instance of the ObjectPool this instance is part of.</param>
            <param name="objectType">Type of the objects in the cache.</param>
            <param name="constructorParameter">Parameter for the constructor.</param>
            <param name="size">Size of the cache.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectPool.Cache.GetObject">
            <summary>
            Returns the first object in the cache. Removes it after
            having it returned.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectPool.Cache.PopulateCache">
            <summary>
            Starts the refill process of the cache.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectPool.Cache.RefillCache">
            <summary>
            Refills the cache.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectPool.Cache.ObjectType">
            <summary>
            Returns the object type of the cache.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Relations.ObjectHolder`1">
            <summary>
            Holds one single object that is connected with the parent object.
            </summary>
            <remarks>
            This class is used in a persistent class to hold one single object that is connected with 
            the parent object. When accessing the first time the 
            <see cref="P:Chili.Opf3.Relations.ObjectHolder`1.InnerObject">InnerObject</see> property the related
            object is loaded. This is called delayed loading and reduces roundtrips to the storage.
            </remarks>
            <example>
            The following example shows how to use the ObjectHolder in your persistent objects. In the
            example each Call has one associated User.
            <code lang="CS">
            [Persistent("CALLS", PoolSize = 20)]
            public class Call
            {
            	// The class contains an ObjectHolder and a <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see>
            	// that specifies the relation between the parent object and the 
            	// related objects.
            	[Relation("UserId", "Id", SaveOrder = SaveOrders.ChildFirst)]
            	private ObjectHolder&lt;User&gt; _user = new ObjectHolder&lt;User&gt;();
            
            	// The User property accesses the InnerObject property to get
            	// the User object or to set a new one.
            	public User User
            	{
            		get { return _user.InnerObject; }
            		set { _user.InnerObject = value; }
            	}
            	
            	// ... Other properties and code.
            }
            </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolder`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.ObjectHolder`1">ObjectHolder Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolder`1.#ctor(System.String,System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.ObjectHolder`1">ObjectHolder Class</see>.
            </summary>
            <param name="conditions">OPath that is used when retrieving the objects. For more information about OPath
            look at the <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see> class.</param>
            <param name="parameters">A list of parameters that are used in the OPath expression.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolder`1.#ctor(Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.ObjectHolder`1">ObjectHolder Class</see>.
            </summary>
            <param name="query"><see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is executed to load the associated 
            objects. This parameter allows you to use any kind of query without using the build in functionality.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolder`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.ObjectHolder`1">ObjectHolder Class</see>.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolder`1.OnFetchingStorageRecord(System.Object,Chili.Opf3.FetchingStorageRecordEventArgs)">
            <summary>
            Invokes the FetchingStorageRecord event.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolder`1.InnerLoad(Chili.Opf3.ObjectContext)">
            <summary>
            Loads the related object(s) from the storage.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolder`1.PersistChanges(Chili.Opf3.ObjectContext,Chili.Opf3.PersistDepths)">
            <summary>
            This method is invoked to persist the changes on the objects in the ObjectHolder.
            </summary>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> used to persist 
            the changes. It is the same <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> as used by the
            parent object.</param>
            <param name="persistDepth">Specifies the depth of the loaded object graph that is persisted.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolder`1.ConnectPropertiesInChildObjects">
            <summary>
            This method connects the foreign-key properties in the child persistent objects with the identifier
            properties of the parent object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolder`1.HasModifiedObjects(Chili.Opf3.ObjectContext)">
            <summary>
            This method is invoked to check if any of the ObjectHolder's objects have been modified.
            </summary>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> used to check for modified 
            objects. It is the same <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> as used by the
            parent object.</param>
            <returns>True if an object has been modified; false othewise.</returns>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolder`1.HasRemovedObjects">
            <summary>
            This method is invoked to check if the <see cref="T:System.Runtime.Serialization.ObjectHolder"/> has removed objects.
            </summary>
            <returns>True if an object has been removed; false otherwise</returns>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolder`1.Invalidate">
            <summary>
            <para>
            Invalidates the current instance. The next request of the InnerObject property reloads all the 
            related objects. This is only true if the automatic load of the related objects has been enabled. 
            Otherwise the reload method needs to be invoked (after calling Invalidate) to do a manual reload.
            </para>
            <para>
            The call of this method removes the objects also from the identity map if one is in place. This makes
            sure that the objects are really reloaded from the storage and not from the identity map again.
            </para>
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolder`1.GetRawEnumerator">
            <summary>
            Gets the enumerator for the given loaded related data. This method doesn't load
            data from the storage but rather returns the currently loaded data.
            </summary>
        </member>
        <member name="E:Chili.Opf3.Relations.ObjectHolder`1.FetchingStorageRecord">
             <summary>
             Event is fired before the data from the storage is used to populate an object.
             </summary>
             <remarks>
             This event is fired before the data from the storage is used to populate an object. It allows the user
             to specify another type for the row (item) that is populated with the data. It allows also to have 
             certain items ignored. This event can be used in certain scenarios of inheritance.
             </remarks>
             <example>
             The following example introduces to the use of the FecthingStorageRecord event. 
             <code lang="CS">
             [Persistent("CALLS", PoolSize = 20)]
             public class Call
             {
            		// The class contains an ObjectHolder and a <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see>
            		// that specifies the relation between the parent object and the 
            		// related objects.
             	[Relation("UserId", "Id", SaveOrder = SaveOrders.ChildFirst)]
             	private ObjectHolder&lt;User&gt; _user = new ObjectHolder&lt;User&gt;();
                
                 public Call()
                 {
                     _user.FetchingStorageRecord += PersistentTypeSelector(MySelection);
                 }
             
                 private void MySelection(object sender, FetchingStorageRecordEventArgs e)
                 {
                    if (e.DataRecord["Type"] == "1")
                    {
                        // Switch the type of the persistent that is created to User1.
            	           e.Type = typeof(User1);
                    }
                    else if ((bool)e.DataRecord["Ignore"])
                    {
                        // Tell the framework to ignore this item.
                        e.Ignore = true;
                    }
                    // Have a persistent of type User created.
                    e.Type = typeof(User);
                 }
            
            		// The User property accesses the InnerObject property to get
            		// the User object or to set a new one.
             	public User User
             	{
             		get { return _user.InnerObject; }
             		set { _user.InnerObject = value; }
             	}
            		
            		// ... Other properties and code.
             }
             
             // ...
             
             Call call = context.GetObject&lt;Call&gt;("Name = {0}", "Call 1");
             User user = call.User;
             
             if (user.GetType() == typeof(User1))
                 Console.WriteLine("User1 found.");
             else
                 Console.WriteLine("User found.");
             </code>
             </example>
        </member>
        <member name="P:Chili.Opf3.Relations.ObjectHolder`1.Value">
            <summary>
            Gets and sets the persistent object that is related to the parent object.
            </summary>
            <value>Returns the related persistent object.</value>
        </member>
        <member name="P:Chili.Opf3.Relations.ObjectHolder`1.InnerObject">
            <summary>
            Depreciated: Use the Value property instead!
            Gets and sets the persistent object that is related to the parent object.
            </summary>
            <value>Returns the related persistent object.</value>
        </member>
        <member name="T:Chili.Opf3.Storages.StorageObjectReader`1">
            <summary>
            Provides a way of reading a forward-only stream of objects from a storage data source.
            </summary>
        </member>
        <member name="T:Chili.Opf3.ObjectReader`1">
            <summary>
            Provides a way of reading a forward-only stream of objects from a data source.
            </summary>
            <remarks>
            <para>
            To create an ObjectReader you must call the 
            <see cref="M:Chili.Opf3.ObjectContext.GetObjectReader``1(Chili.Opf3.Query.IQuery)">GetObjectReader</see> method of the
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> rather than directly using a 
            constructor. 
            </para>
            <para>
            While the ObjectReader is in use and a transaction is opened on the associated
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> the context is blocked and can not
            serve any other purpose until the ObjectReader is closed. If no transaction is opened
            the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> is free to serve any other request.
            Each opened ObjectReader should be closed immediately after having finished using it. 
            It is recommended to use in CS the "using" statement when working with the ObjectReader or 
            call immediately <see cref="M:Chili.Opf3.ObjectReader`1.Close">Close</see> after having retrieved 
            the required data (objects).
            </para>
            <para>
            Changes made to a resultset by another process or thread while data is being read may be visible 
            to the user of the ObjectReader. However, the precise behavior is timing dependent.
            </para>
            <para>
            <see cref="P:Chili.Opf3.ObjectReader`1.IsClosed">IsClosed</see>, 
            <see cref="P:Chili.Opf3.ObjectReader`1.HasObjects">HasObjects</see> and 
            <see cref="P:Chili.Opf3.ObjectReader`1.FinishedReading">FinishedReading</see> are the only properties that
            can be called after closing the ObjectReader.
            </para>
            </remarks>
            <example>
            	<code lang="CS">
            [Persistent("USER")]
            public class User
            {
            	private string _name = null;
            
            	[Field("NAME")]
            	public string Name
            	{
            		get { return _name; }
            		set { _name = value; }
            	}
            
            	// ... Other properties and fields.
            }
            
            // ... Other code
            
            List&lt;User&gt; userList = new List&lt;User&gt;();
            // Loads an ObjectReader of User from the storage and sorts the result set.
            using(ObjectReader&lt;User&gt; reader = context.GetObjectReader&lt;User&gt;
            	("UserName like {0} SortBy UserName Asc", "%mit%"))
            {
            	// Loop until we get objects.
            	while (reader.Read())
            	{
            		User user = reader.Current;
            		
            		if (user.Name == "Smith")
            			userList.Add(user);
            	}
            
            	// ObjectReader supports also foreach.
            	// foreach(User user in reader)
            	// {
            	//		// .. do something.
            	// }
            }
            	</code>	
            </example>
        </member>
        <member name="M:Chili.Opf3.ObjectReader`1.Create(Chili.Opf3.ObjectContext,System.Collections.Generic.IList{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader Class</see>.
            This instance is usually required when implementing own caching strategies.
            </summary>
            <param name="context">The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> associated with the reader.</param>
            <param name="objects">The list of objects enumerated by the reader.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectReader`1.Create(Chili.Opf3.ObjectContext,System.Data.IDataReader)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader Class</see>.
            This instance is usually required when implementing own storages.
            </summary>
            <param name="context">The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> associated with the reader.</param>
            <param name="reader">The internal data reader returned by the underlying ADO.NET storage.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectReader`1.#ctor(Chili.Opf3.ObjectContext)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader Class</see>.
            </summary>
            <param name="context">The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> associated with the 
            ObjectReader. It is required to get the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object
            of created objects.</param>
            <exception cref="T:System.ArgumentNullException">Objectcontext is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectReader`1.OnFetchingStorageRecord(Chili.Opf3.FetchingStorageRecordEventArgs)">
            <summary>
            Invokes the FetchingStorageRecord event if somebody subscribed.
            </summary>
            <param name="e">The event args for the event.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectReader`1.Read">
            <summary>
            Advances the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> to the next record. 
            </summary>
            <returns>Returns true if the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> could be
            advanced to the next object.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectReader`1.Read(System.Int32)">
            <summary>
            Advances the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> to one of the next records. 
            </summary>
            <param name="step">The step that is performed while reading.</param>
            <returns>Returns true if the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> could be
            advanced to the next object.</returns>
            <exception cref="T:System.ArgumentException">Step is lower then zero.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectReader`1.OnLoading(Chili.Opf3.ObjectLoadingEventArgs)">
            <summary>
            Invokes the event that is fired before an object has been loaded from the storage.
            </summary>
            <param name="e">The EventArgs for the event.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectReader`1.OnLoaded(Chili.Opf3.ObjectLoadedEventArgs)">
            <summary>
            Invokes the event that is fired after an object has been loaded from the storage.
            </summary>
            <param name="e">The EventArgs for the event.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectReader`1.NotifyConcurrencyManager(`0)">
            <summary>
            Notifies the <see cref="T:Chili.Opf3.Concurrency.IConcurrencyManager">IConcurrencyManager</see> that 
            the object has been loaded.
            </summary>
            <param name="obj">Object that has been loaded.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectReader`1.InternalRead(System.Int32)">
            <summary>
            Advances the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> to one of the next records. 
            </summary>
            <param name="step">The step that is performed while reading.</param>
            <returns>Returns true if the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> could be
            advanced to the next object.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectReader`1.Close">
            <summary>
            Closes the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectReader`1.GetCurrentObject">
            <summary>
            Returns the current object managed by the ObjectReader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chili.Opf3.ObjectReader`1.MoveNext">
            <summary>
            Moves the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> to the next item.
            </summary>
            <returns>
            Returns true if it was possible to move the the next item.
            </returns>
        </member>
        <member name="M:Chili.Opf3.ObjectReader`1.Reset">
            <summary>
            Resets the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see>. This method is not supported, 
            since the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> is forward-only.
            </summary>
            <exception cref="T:System.NotImplementedException">Exception is thrown since the method is not supported.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectReader`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectReader`1.Dispose">
            <summary>
            Disposes the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectReader`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see>.
            </summary>
        </member>
        <member name="E:Chili.Opf3.ObjectReader`1.FetchingStorageRecord">
             <summary>
             Event is fired before the data from the storage is used to populate an object.
             </summary>
             <remarks>
             This event is fired before the data from the storage is used to populate an object. It allows the user
             to specify another type for the row (item) that is populated with the data. It allows also to have 
             certain items ignored. This event can be used in certain scenarios of inheritance.
             </remarks>
             <example>
             The following example introduces to the use of the FecthingStorageRecord event. 
             <code lang="CS">
             ObjectReader&lt;User&gt; reader = context.GetObjectReader&lt;User&gt;();
             // Register the event.
             reader.FetchingStorageRecord += new PersistentTypeSelector(MySelection);
            
             // Loop trough all items.
             foreach (User user in reader)
             {
                 if (user.GetType() == typeof(User1))
                     Console.WriteLine("User1 found.");
                 else
                     Console.WriteLine("User found.");
             }
             
             // ...
             
             private void MySelection(object sender, FetchingStorageRecordEventArgs e)
             {
                 if (e.DataRecord["Type"] == "1")
                 {
                     // Switch the type of the persistent that is created to User1.
            	        e.Type = typeof(User1);
                 }
                 else if ((bool)e.DataRecord["Ignore"])
                 {
                     // Tell the framework to ignore this item.
                     e.Ignore = true;
                 }
                 // Have a persistent of type User created.
                 e.Type = typeof(User);
             }
             </code>
             </example>
        </member>
        <member name="P:Chili.Opf3.ObjectReader`1.Context">
            <summary>
            Returns the associated instance of the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> class.
            </summary>
        </member>
        <member name="E:Chili.Opf3.ObjectReader`1.Loaded">
            <summary>
            Event is fired after an object has been loaded from the storage.
            </summary>
        </member>
        <member name="E:Chili.Opf3.ObjectReader`1.Loading">
            <summary>
            Event is fired before an object has been loaded from the storage.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectReader`1.IsClosed">
            <summary>
            Indicates whether the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> has been closed. 
            </summary>
            <value>Returns true if the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> is closed.</value>
        </member>
        <member name="P:Chili.Opf3.ObjectReader`1.HasObjects">
            <summary>
            Returns whether the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> contains 
            one or more rows. 
            </summary>
            <value>Returns true if the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> has fetched one
            ore more objects.</value>
        </member>
        <member name="P:Chili.Opf3.ObjectReader`1.FinishedReading">
            <summary>
            Returns if the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> has finished reading. 
            Is true after Read returned false.
            </summary>
            <value>Returns true if the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> has finished reading.</value>
        </member>
        <member name="P:Chili.Opf3.ObjectReader`1.Current">
            <summary>
            Returns the current object. Before accessing this property call at least one time the  
            <see cref="M:Chili.Opf3.ObjectReader`1.Read">Read</see> method.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see>
            has finished reading, has no objects or is closed.</exception>
            <value>The current object fetched by the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see>.</value>
            <exception cref="T:System.InvalidOperationException">The ObjectReader is not set on a valid item.</exception>
        </member>
        <member name="P:Chili.Opf3.ObjectReader`1.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current object. Before accessing this property call at least one time the  
            <see cref="M:Chili.Opf3.ObjectReader`1.Read">Read</see> method.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see>
            has finished reading, has no objects or is closed.</exception>
            <value>The current object fetched by the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see>.</value>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageObjectReader`1.#ctor(Chili.Opf3.ObjectContext,System.Data.IDataReader)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.StorageObjectReader`1">StorageObjectReader Class</see>.
            </summary>
            <param name="context">The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> associated with the 
            ObjectReader. It is required to get the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object
            of created objects.</param>
            <param name="dataReader">IDataReader that gets the data from the physical storage.</param>
            <exception cref="T:System.ArgumentNullException">DataReader is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageObjectReader`1.InternalRead(System.Int32)">
            <summary>
            Advances the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> to one of the next records. 
            </summary>
            <param name="step">The step that is performed while reading.</param>
            <returns>Returns true if the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> could be
            advanced to the next object.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageObjectReader`1.PopulateObject(System.Type)">
            <summary>
            Reads and populates a new object and sets that as current.
            </summary>
            <param name="type">The type of the new persistent object.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageObjectReader`1.AdvanceInternalDataReader(System.Int32)">
            <summary>
            Advances the internal IDataReader.
            </summary>
            <param name="step">The amount of rows the IDataReader is advanced.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageObjectReader`1.Close">
            <summary>
            Closes the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageObjectReader`1.GetCurrentObject">
            <summary>
            Returns the current object managed by the ObjectReader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageObjectReader`1.Dispose">
            <summary>
            Disposes the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see>.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Storages.StorageObjectReader`1.IsClosed">
            <summary>
            Indicates whether the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> has been closed. 
            </summary>
            <value>Returns true if the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> is closed.</value>
        </member>
        <member name="P:Chili.Opf3.Storages.StorageObjectReader`1.HasObjects">
            <summary>
            Returns whether the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> contains 
            one or more rows. 
            </summary>
            <value>Returns true if the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> has fetched one
            ore more objects.</value>
        </member>
        <member name="P:Chili.Opf3.Storages.StorageObjectReader`1.FinishedReading">
            <summary>
            Returns if the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> has finished reading. 
            Is true after Read returned false.
            </summary>
            <value>Returns true if the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> has finished reading.</value>
        </member>
        <member name="T:Chili.Opf3.Query.ObjectQuery`1">
            <summary>
            Represents a storage independent query.
            </summary>
            <remarks>
            <para>
            This class represents a storage independent query. The query is then compiled by the
            framework and executed on a class that implements the <see cref="T:Chili.Opf3.Storages.IStorage">IStorage</see>
            interface. When creating an ObjectQuery you may specify different conditions, simple joins and 
            sort options.
            </para>
            <para>
            ObjectQueries may be used in any part of your application, since they are storage independent.
            You should always check if you can use an ObjectQuery before switching to the 
            <see cref="T:Chili.Opf3.Query.SqlQuery">SqlQuery</see>. Perhaps you can move some of the joins directly 
            to the storage (stored procedure or view) to avoid using <see cref="T:Chili.Opf3.Query.SqlQuery">SqlQuery</see>.
            </para>
            <para><br/><br/>
            <b>OPath</b><br/>
            OPath is a storage indepentend query language that is transformed to a storage dependent query at runtime.
            The language understands various different types of statements right now. In a statement you must always 
            use the property names of the corresponding persistent object. All the OPath is translated to a 
            storage depentend query when "compiled" (at runtime).<br/>
            The following statements are supported:
            <br/><br/>
            <b>Condition</b><br/>
            A condition is a property name, a comparer and a parameter. You can use inline parameter or tags ({0}, {1}, ...)
            that are replaced by the parameter at runtime. Using tags is strongly recommended (for dynamic parameters)
            to avoid injections.
            <br/>
            Samples: "UserName = {0}", "Duration &lt; {0}", "UserName = 'Test'", "Duration &lt; 10", "UserName Like {0}"
            <br/><br/>
            <b>Simple Joins</b><br/>
            Simple joins allow you to join an related object and check some properties of that object. If the properties
            fullfil the conditions the original object is loaded (obsolete!).
            <br/>
            Samples: "Call[Duration &lt; 10]" checks if one of the connected calls of the user is shorter then 10 
            minutes.
            <br/><br/>
            <b>Sort Options</b><br/>
            Sort Options allow to sort the result of the query. They consist in a keyword "SortBy", the name of the
            property that is sorted by and the sort direction. Currently only one property is allowed in a sort option.
            <br/>
            Samples: "SortBy UserName Asc", "SortBy UserName Desc"
            <br/><br/>
            <b>Concats and brackets</b><br/>
            You can concat each condition to another and brackets are also allowed in a OPath statement.
            <br/>
            Samples: "UseName = {0} And Password = {1}", "(Duration &lt; 10 And Name = {1}) Or Name = 'Test'"
            <br/><br/>
            <b>Custom commands</b><br/>
            OPath supports also custom commands. The commands must be understood by the storage to work. The storage
            itself converts them to a command that is then executed on the storage. The storage gets a 
            <see cref="T:Chili.Opf3.Query.OPathParser.OECommand">OECommand</see> object that contains the name
            of the command and could also contain arguments. See SubString below, which contains 1 and 3 as arguments.
            <br/>
            Samples: "Upper(UserName)" is converted by Oracle to "TO_UPPER({0})" the {0} Tag stands for the name of the
            field. "SubString(UserName, 1, 3)" is converted to a command that is understood by the storage. 
            </para>
            </remarks>
            <example>
            The following example shows how to use ObjectQuery in your application.
            <code lang="CS">
            // ... Other code
            
            // Create an ObjectQuery for User persistent objects.
            // The query contains the following:
            // - Two conditions that check the user name of the objects and load only the matching ones.
            // - A simple join that loads only user with one or more calls of duration 1.
            // - A sort option that sorts the result by UserName.
            ObjectQuery&lt;User&gt; objectQuery = new ObjectQuery&lt;User&gt;(
            	"(UserName Like {0} Or UserName Like {1}) And Call[Duration = {2}] SortBy UserName Asc",
            	"%hri%", "%No%", 1);
            
            // Get an ObjectSet that contains the result of the query.
            ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;(query);
            
            // ... Other code.
            </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.Query.ObjectQuery`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.ObjectQuery`1.#ctor(System.String,System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery Class</see>.
            </summary>
            <param name="conditions">A OPath expression that is trasformed to a storage depentend query when
            executed on the storage.</param>
            <param name="parameters">Parameters of the OPath expression. All tags in the OPath expression
            are replaced by the parameters that are set here.</param>
        </member>
        <member name="M:Chili.Opf3.Query.ObjectQuery`1.ToCompiledQuery(Chili.Opf3.Storages.IStorage)">
            <summary>
            Converts the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> to an
            <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see> that is then executed on a
            specific <see cref="T:Chili.Opf3.Storages.IStorage">storage</see>.
            </summary>
            <returns>
            A new <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see> that has been generated using this instance.
            </returns>
            <param name="storage">
            Class that implements the <see cref="T:Chili.Opf3.Storages.IStorage">IStorage</see>
            interface. The query is executed on that storage.
            </param>
        </member>
        <member name="P:Chili.Opf3.Query.ObjectQuery`1.Value">
            <summary>
            Specifies the OPath expression of the <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see>.
            </summary>
            <value>Represents the OPath expression set in the constructor.</value>
        </member>
        <member name="P:Chili.Opf3.Query.ObjectQuery`1.Parameters">
            <summary>
            Returns the list of parameters associated with the OPath expression.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Query.ObjectQuery`1.Timeout">
            <summary>
            Specifies the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <value>An integer that specifies the wait time in seconds.</value>
            <exception cref="T:System.ArgumentException">Value is lower then zero.</exception>
        </member>
        <member name="P:Chili.Opf3.Query.ObjectQuery`1.QueryType">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Query.QueryTypes">QueryType</see> of the 
            <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see>.
            </summary>
            <value>A member of the <see cref="T:Chili.Opf3.Query.QueryTypes">QueryType</see> enumeration.</value>
        </member>
        <member name="T:Chili.Opf3.Query.SortDirections">
            <summary>
            The member of this enumeration specifies the sort condition for the query created by the
            <see cref="T:Chili.Opf3.Query.ObjectQueryBuilder`1">ObjectQueryBuilder</see>.	
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.SortDirections.Ascending">
            <summary>
            Sorts in an ascending order.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.SortDirections.Descending">
            <summary>
            Sorts in an descending order.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Query.ObjectQueryBuilder`1">
             <summary>
             A class that creates an instance of an <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see> class.
             </summary>
             <remarks>
             <para>
             This class creates an instance of an <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see> class. It allows 
             to specify the different items that can be added to an ObjectQuery. For more information about the 
             ObjectQuery, please consult the documentation of that class.
             </para>
             <para>
             The class does also check if the added properties are valid for the given persistent object and if 
             the amount of opening parenthesis match the closing parenthesis. It is possible to call the 
             <see cref="M:Chili.Opf3.Query.ObjectQueryBuilder`1.AppendProperty(System.String,Chili.Opf3.Query.Comparisons,System.Object)">AppendProperty</see> method without calling the
             <see cref="M:Chili.Opf3.Query.ObjectQueryBuilder`1.AppendConcat(Chili.Opf3.Query.Concats)">AppendConcat</see>: in that case the class uses the
             concat specified in the <see cref="P:Chili.Opf3.Query.ObjectQueryBuilder`1.DefaultConcat">DefaultConcat</see> property
             to connect the two properties in the query.
             </para>
             </remarks>
             <example>
             The following example shows how to use ObjectQueryBuilder in your application.
             <code lang="CS">
             // ... Other code
             
             ObjectQueryBuilder&lt;Call&gt; ob = new ObjectQueryBuilder&lt;Call&gt;();
             ob.AppendProperty("CallDuration", Comparisons.Equals, 1);
             ob.AppendProperty("CallName", Comparisons.Like, "%foo");
             ob.AppendConcat(Concats.Or);
             ob.AppendOpeningParenthesis();
             ob.AppendProperty("CallName", Comparisons.Equals, "Bar");
             ob.AppendClosingParenthesis();
            
             ObjectSet&lt;Call&gt; os = context.GetObjectSet&lt;Call&gt;(ob.ToObjectQuery());
             
             // ... Other code.
             </code>
             </example>
        </member>
        <member name="M:Chili.Opf3.Query.ObjectQueryBuilder`1.AppendPropertyIfParameterNotNull(System.String,Chili.Opf3.Query.Comparisons,System.Object)">
            <summary>
            Appends a mapped persistent property to the query. The property is only added if the value is not null.
            </summary>
            <param name="propertyName">The name of the property that is added.</param>
            <param name="comparison">The <see cref="T:Chili.Opf3.Query.Comparisons">comparison</see> used to load all objects that match the value compared with the property.</param>
            <param name="value">The value of the property. All objects matching the value in combination with the comparison are loaded.</param>
        </member>
        <member name="M:Chili.Opf3.Query.ObjectQueryBuilder`1.AppendProperty(System.String,Chili.Opf3.Query.Comparisons,System.Object)">
            <summary>
            Appends a mapped persistent property to the query.
            </summary>
            <param name="propertyName">The name of the property that is added.</param>
            <param name="comparison">The <see cref="T:Chili.Opf3.Query.Comparisons">comparison</see> used to load all objects that match the value compared with the property.</param>
            <param name="value">The value of the property. All objects matching the value in combination with the comparison are loaded.</param>
        </member>
        <member name="M:Chili.Opf3.Query.ObjectQueryBuilder`1.AppendPropertyComparison(System.String,Chili.Opf3.Query.Comparisons,System.String)">
            <summary>
            Appends a comparison between two properties to the query.
            </summary>
            <param name="propertyA">The first property that is compared with the second one.</param>
            <param name="comparison">The <see cref="T:Chili.Opf3.Query.Comparisons">comparison</see> used to compare both properties.</param>
            <param name="propertyB">The second property that is compared with the first one.</param>
        </member>
        <member name="M:Chili.Opf3.Query.ObjectQueryBuilder`1.CheckMappedProperty(System.String)">
            <summary>
            Checks if the given property is mapped.
            </summary>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:Chili.Opf3.Query.ObjectQueryBuilder`1.CheckForDefaultConcat">
            <summary>
            Checks if to add a default concat between two items of the query.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.ObjectQueryBuilder`1.ComparisonToString(Chili.Opf3.Query.Comparisons)">
            <summary>
            Converts a comparison to a string.
            </summary>
            <param name="comparison">The comparison that is converted.</param>
        </member>
        <member name="M:Chili.Opf3.Query.ObjectQueryBuilder`1.AppendConcat(Chili.Opf3.Query.Concats)">
            <summary>
            Appends a concat to the query.
            </summary>
            <param name="concat">The concat that is going to be added to the query.</param>
        </member>
        <member name="M:Chili.Opf3.Query.ObjectQueryBuilder`1.AppendOpeningParenthesis">
            <summary>
            Appends an opening parenthesis to the query.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.ObjectQueryBuilder`1.AppendClosingParenthesis">
            <summary>
            Appends a closing parenthesis to the query.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.ObjectQueryBuilder`1.AppendSort(System.String,Chili.Opf3.Query.SortDirections)">
            <summary>
            Appends a sort to the query.
            </summary>
            <param name="propertyName">The property name to sort the query by.</param>
            <param name="sortDirection">The direction of the sort.</param>
        </member>
        <member name="M:Chili.Opf3.Query.ObjectQueryBuilder`1.Clear">
            <summary>
            Clears the current content of the <see cref="T:Chili.Opf3.Query.ObjectQueryBuilder`1">ObjectQueryBuilder</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.ObjectQueryBuilder`1.ToObjectQuery">
            <summary>
            Converts the value to a instance of the <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see> Class.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Chili.Opf3.Query.ObjectQueryBuilder`1.IsEmpty">
            <summary>
            Returns whether the current instance of the class is empty.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Query.ObjectQueryBuilder`1.DefaultConcat">
            <summary>
            Specifies the default concat that is used if <see cref="M:Chili.Opf3.Query.ObjectQueryBuilder`1.AppendProperty(System.String,Chili.Opf3.Query.Comparisons,System.Object)">AppendProperty</see> is 
            called more then one time without calling <see cref="M:Chili.Opf3.Query.ObjectQueryBuilder`1.AppendConcat(Chili.Opf3.Query.Concats)">AppendConcat</see>.
            </summary>
        </member>
        <member name="T:Chili.Opf3.PersistentTypeSelector">
            <summary>
            Allows to specify a method that is invoked each time before a persistent object is created.
            </summary>
            <remarks>
            <para>
            This delegate allows to specify a method that is invoked each time before a persistent object is created.
            The type of the persistent object to create may be changed or the current row (item) in the storage may be 
            ignored by applying the Ignore property of the <see cref="T:Chili.Opf3.FetchingStorageRecordEventArgs">FetchingStorageRecordEventArgs</see> 
            class.
            </para>
            <para>
            This delegate is very useful in inheritance chains. It allows you to specify an inherited type as type of
            the persistent object, by analyzing the fields of the current row (item) of the storage or by having some
            other algorithm that decides how which type of class to create.
            </para>
            </remarks>
            <example>
            The following sample shows the usage of this delegate in some methods of the 
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>.
            <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", "localhost", "application"));
             
            // ... Other code.
             
            // Get the ObjectSet with user matching the name and sorting them by name.
            ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;(new PersistentTypeSelector(MySelection));
             
            // Loop through all items and do something.
            foreach(User user in objectSet)
            {
                // Do something.
            }
            
            // ...
            
            private void MySelection(object sender, FetchingStorageRecordEventArgs e)
            {
                if (e.DataRecord["Type"] == "1")
                {
                    // Switch the type of the persistent that is created to User1.
                    e.Type = typeof(User1);
                }
                else if ((bool)e.DataRecord["Ignore"])
                {
                    // Tell the framework to ignore this item.
                    e.Ignore = true;
                }
            	else
            	{
            		// Have a persistent of type User created.
            		e.Type = typeof(User);
            	}
            }
            </code>
            </example>
            <param name="sender">The object who invoked the delegate.</param>
            <param name="e">An instance of the <see cref="T:Chili.Opf3.FetchingStorageRecordEventArgs">FetchingStorageRecordEventArgs</see>
            class containing all necessary properties to change the type or have the current item ignored.</param>
        </member>
        <member name="T:Chili.Opf3.ObjectReaderSchema">
            <summary>
            This class holds the schema (column name, column index pair) for an <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectReaderSchema.#ctor(System.Data.IDataReader,System.Type)">
            <summary>
            Creates an instance of the <see cref="T:Chili.Opf3.ObjectReaderSchema">ObjectReaderSchema Class</see>.
            </summary>
            <param name="dataReader">The data reader used to create the schema. This data reader is set given by the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see>.</param>
            <param name="type">The type of the persistent object.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectReaderSchema.IndexOfColumn(System.Int32)">
            <summary>
            Returns the index of the given member index or -1 if the column hasn't been found.
            </summary>
            <param name="memberIndex">Index of hte member.</param>
            <returns>Index of the column or -1 if not found.</returns>
        </member>
        <member name="T:Chili.Opf3.Mapping.RelationInfoCollection">
            <summary>
            Class that represents a collection of <see cref="T:Chili.Opf3.Mapping.RelationInfo">RelationInfo</see> objects.
            </summary>
            <remarks>
            This class represents a collection of <see cref="T:Chili.Opf3.Mapping.RelationInfo">RelationInfo</see> objects. An instance of this class
            is stored as list of all relations with an instance of the <see cref="T:Chili.Opf3.Mapping.TypeMapping">TypeMapping</see> class.
            </remarks>
        </member>
        <member name="T:Chili.Opf3.Mapping.IRelationInfoCollection">
            <summary>
            Interface that represents a collection of <see cref="T:Chili.Opf3.Mapping.IRelationInfo">IRelationInfo</see> objects.
            </summary>
            <remarks>
            This interface represents a collection of <see cref="T:Chili.Opf3.Mapping.IRelationInfo">IRelationInfo</see> objects. An instance of this class
            is stored as list of all relations with an instance of the <see cref="T:Chili.Opf3.Mapping.TypeMapping">TypeMapping</see>.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Mapping.IRelationInfoCollection.Contains(Chili.Opf3.Mapping.IRelationInfo)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.IRelationInfoCollection.CopyTo(Chili.Opf3.Mapping.IRelationInfo[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.IRelationInfoCollection.GetRelationMapping(System.Type)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Mapping.ITypeRelationInfoCollection">ITypeRelationInfoCollection</see> object for the given type.
            </summary>
            <param name="type">Type of the related object.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.IRelationInfoCollection.GetRelationMapping(System.String)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Mapping.IRelationInfo">IRelationInfo</see> object associated with the 
            <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see>'s name.
            </summary>
            <param name="name">The relation's name. The name is specified by setting 
            the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see>'s name property.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.IRelationInfoCollection.InvalidateAll(System.Object)">
            <summary>
            Invalidates all relations in this collection.
            </summary>
            <param name="obj">The persistent object on which all relations are invalidated.</param>
        </member>
        <member name="P:Chili.Opf3.Mapping.IRelationInfoCollection.Count">
            <summary>
            Gets the number of elements actually contained in the collection.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IRelationInfoCollection.IsReadOnly">
            <summary>
            Returns whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IRelationInfoCollection.Item(System.Int32)">
            <summary>
            Returns the item at the given index.
            </summary>
            <param name="index">The index of the item that is returned.</param>
            <returns>The item at the given index.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelationInfoCollection.Add(System.Type,Chili.Opf3.Relations.RelationAttribute,Chili.Opf3.Mapping.RelationInfo)">
            <summary>
            Adds the <see cref="T:Chili.Opf3.Mapping.RelationInfo">RelationInfo</see> object to the list.
            </summary>
            <param name="info">The object that is added.</param>
            <param name="attribute">The <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> of the relation.</param>
            <param name="genericType">The type of the associated persistent object(s).</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelationInfoCollection.GetRelationMapping(System.Type)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Mapping.ITypeRelationInfoCollection">ITypeRelationInfoCollection</see> object for the given type.
            </summary>
            <param name="type">Type of the related object.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelationInfoCollection.GetRelationMapping(System.String)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Mapping.IRelationInfo">IRelationInfo</see> object associated with the 
            <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see>'s name.
            </summary>
            <param name="name">The relation's name. The name is specified by setting 
            the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see>'s name property.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelationInfoCollection.Contains(Chili.Opf3.Mapping.IRelationInfo)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelationInfoCollection.CopyTo(Chili.Opf3.Mapping.IRelationInfo[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelationInfoCollection.InvalidateAll(System.Object)">
            <summary>
            Invalidates all relations in this collection.
            </summary>
            <param name="obj">The persistent object on which all relations are invalidated.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelationInfoCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns> A enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelationInfoCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An enumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Chili.Opf3.Mapping.RelationInfoCollection.Count">
            <summary>
            Gets the number of elements actually contained in the collection.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.RelationInfoCollection.IsReadOnly">
            <summary>
            Returns whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.RelationInfoCollection.Item(System.Int32)">
            <summary>
            Returns the item at the given index.
            </summary>
            <param name="index">The index of the item that is returned.</param>
            <returns>The item at the given index.</returns>
        </member>
        <member name="T:Chili.Opf3.Mapping.IdentifierMemberInfoCollection">
            <summary>
            This class represents the list of identifier <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> objects for 
            the persistent object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.IdentifierMemberInfoCollection.Add(Chili.Opf3.Mapping.IMemberInfo)">
            <summary>
            Adds the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> object to the list.
            </summary>
            <param name="info">The object that is added.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.IdentifierMemberInfoCollection.GetMemberInfoByField(System.String)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> object associated with the given field name.
            </summary>
            <param name="fieldName">The name of the field in the storage.</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> class associated with the given field name.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.IdentifierMemberInfoCollection.GetMemberInfoByName(System.String)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> object associated with the given name of an object member.
            </summary>
            <param name="memberName">The name of an object member (a property or a field).</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> class associated with the given object member.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.IdentifierMemberInfoCollection.Contains(Chili.Opf3.Mapping.IMemberInfo)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.IdentifierMemberInfoCollection.CopyTo(Chili.Opf3.Mapping.IMemberInfo[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.IdentifierMemberInfoCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns> A enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.IdentifierMemberInfoCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An enumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Chili.Opf3.Mapping.IdentifierMemberInfoCollection.Count">
            <summary>
            Gets the number of elements actually contained in the collection.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IdentifierMemberInfoCollection.IsReadOnly">
            <summary>
            Returns whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IdentifierMemberInfoCollection.Item(System.Int32)">
            <summary>
            Returns the item at the given index.
            </summary>
            <param name="index">The index of the item that is returned.</param>
            <returns>The item at the given index.</returns>
        </member>
        <member name="T:Chili.Opf3.Caching.CacheObjectReader`1">
            <summary>
            Provides a way of reading a forward-only stream of objects from a cache.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Caching.CacheObjectReader`1.#ctor(Chili.Opf3.ObjectContext,System.Collections.Generic.IList{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Caching.CacheObjectReader`1">CacheObjectReader Class</see>.
            </summary>
            <param name="context">The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> associated with the 
            ObjectReader. It is required to get the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object
            of created objects.</param>
            <param name="objects">A list of objects that are used by the <see cref="T:Chili.Opf3.Caching.CacheObjectReader`1">CacheObjectReader</see>.</param>
            <exception cref="T:System.ArgumentNullException">Objects is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Caching.CacheObjectReader`1.InternalRead(System.Int32)">
            <summary>
            Advances the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> to one of the next records. 
            </summary>
            <param name="step">The step that is performed while reading.</param>
            <returns>Returns true if the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> could be
            advanced to the next object.</returns>
        </member>
        <member name="M:Chili.Opf3.Caching.CacheObjectReader`1.Close">
            <summary>
            Closes the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Caching.CacheObjectReader`1.GetCurrentObject">
            <summary>
            Returns the current object managed by the ObjectReader.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Chili.Opf3.Caching.CacheObjectReader`1.IsClosed">
            <summary>
            Indicates whether the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> has been closed. 
            </summary>
            <value>Returns true if the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> is closed.</value>
        </member>
        <member name="P:Chili.Opf3.Caching.CacheObjectReader`1.HasObjects">
            <summary>
            Returns whether the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> contains 
            one or more rows. 
            </summary>
            <value>Returns true if the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> has fetched one
            ore more objects.</value>
        </member>
        <member name="P:Chili.Opf3.Caching.CacheObjectReader`1.FinishedReading">
            <summary>
            Returns if the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> has finished reading. 
            Is true after Read returned false.
            </summary>
            <value>Returns true if the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> has finished reading.</value>
        </member>
        <member name="T:Chili.Opf3.ObjectInfo">
            <summary>
            Implements all information that are required to remote or persist a persistent
            object to any kind of device.
            </summary>
            <remarks>
            	<para>This class contains all information to save a persistent object to any kind
                of device. It makes the persistent object independent from the
                <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>. This object is returned by the
                <see cref="T:Chili.Opf3.ISelfContainingObject">ISelfContaining</see> interface that is
                implemented if an object is remoted or persisted to a device (other then a
                storage). The interface should also be implemented if the object is loaded with one
                <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> and then saved with
                another.</para>
            	<para><b>Attention:</b> Please do not change any properties of this object from
                your code, since this could affect the stability of your application! If you
                implement some new kind of
                <see cref="T:Chili.Opf3.Concurrency.IConcurrencyManager">IConcurrencyManager</see> you have
                to populate the <see cref="P:Chili.Opf3.ObjectInfo.ConcurrencyData">ConcurrencyData</see>
                property with your concurrency data. Other properties are not required to
                modify.</para>
            </remarks>
            <example>
            	<code lang="CS">
            [Persistent("USER")]
            public class User : ISelfContainingObject
            {
                // ... Other properties and fields.
            }
             
            // ... Other code
             
            // Loads a user object from the storage.
            ISelfContainingObject user = 
                (ISelfContainingObject)context.GetObject&lt;User&gt;("Id = {0}", "1");
            // Checks if the object has been loaded.
            if (user.ObjectInfo.ObjectState == ObjectStates.Loaded)
            {
                Debug.WriteLine("Object has been loaded.");
            }
                </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.ObjectInfo.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectInfo.Restore(Chili.Opf3.ObjectInfo)">
            <summary>
            Restores the data of the <paramref name="ObjectInfo">ObjectInfo</paramref> object
            by using the data of the <paramref name="ObjectInfo">ObjectInfo</paramref> object
            passed.
            </summary>
            <param name="objectInfo">
            	<see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object used to restored this
            instance.
            </param>
        </member>
        <member name="M:Chili.Opf3.ObjectInfo.Clone">
            <summary>Creates a new object that is a copy of the current instance.</summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Chili.Opf3.ObjectInfo.ObjectState">
            <summary>
            Specifies the <see cref="P:Chili.Opf3.ObjectInfo.ObjectState">state</see> of the persistent object
            associated with this <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> instance.
            </summary>
            <value>
            Returns the <see cref="P:Chili.Opf3.ObjectInfo.ObjectState">ObjectState</see> of the persistent
            object
            </value>
        </member>
        <member name="P:Chili.Opf3.ObjectInfo.ConcurrencyData">
            <summary>
            Contains the data for/of the 
            <see cref="T:Chili.Opf3.Concurrency.IConcurrencyManager">IConcurrencyManager</see>.
            It is not required to change this property from your application. Changing
            this property is only required from any kind of 
            <see cref="T:Chili.Opf3.Concurrency.IConcurrencyManager">IConcurrencyManager</see>.
            </summary>
            <example>
                The following example shows how to set the concurrency data, usually implemented in
                a IConcurrencyManager . 
                <code lang="CS">
            // Sets the concurrency data.
            private void SetConcurrencyData&lt;T&gt;(T obj, ConcurrencyManagerEventArgs e)
            {
                // Calculates the MD5 representation of the object.
                MD5 md5 = CalculateMd5(obj);
             
                // Create the ConcurrencyData object.
                Md5ConcurrencyData concurrencyData = new Md5ConcurrencyData();
                concurrencyData.Md5 = md5;
             
                // Attachs it to the ObjectInfo object.
                e.ObjectInfo.ConcurrencyData = concurrencyData;
            }
                </code>
            </example>
            <value>
            Returns the concurrency information for the
            <see cref="T:Chili.Opf3.Concurrency.IConcurrencyManager">IConcurrencyManager</see>.
            </value>
        </member>
        <member name="P:Chili.Opf3.ObjectInfo.MarkForDeletion">
            <summary>
            Specifies whether the associated persistent object is marked for deletion.
            Objects marked for deletion are deleted the next time they are
            <see cref="M:Chili.Opf3.ObjectContext.PersistChanges``1(``0)">persisted</see>.
            </summary>
            <value>Returns true if the associated persistent object is marked for deletion.</value>
        </member>
        <member name="P:Chili.Opf3.ObjectInfo.Checksum">
            <summary>
            Specifies the checksum of the associated persistent object. This sum is used
            to check if the object has been changed since being in memory.
            </summary>
            <returns>A byte array that contains the checksum for the persistent object.</returns>
        </member>
        <member name="T:Chili.Opf3.ObjectContext">
            <summary>
            Represents the context that manages, loads, saves and deletes persistent objects.
            </summary>
            <remarks>
            	<para>
            		<strong>Thread Safety:</strong> Any public static members of this type are thread safe. 
            		Any instance members are not guaranteed to be thread safe.
            	</para>
            	<para>This class is the main point when loading, saving and deleting persistent
                objects to/from the storage. Whenever objects are loaded from the storage you need
                (<strong>don't use directly the storage</strong>) to request them by using an
                ObjectContext class. The class contains specialized methods (all generic) allowing
                the user to get single objects, a list of objects or an
                <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> from the storage. Each object can
                also be marked for deletion by using the
                <see cref="M:Chili.Opf3.ObjectContext.MarkForDeletion(System.Object)">MarkForDeletion</see> method of
                the ObjectContext. An object that has been marked for deletion is deleted the next
                time the changes are persisted to the storage.</para>
            	<para>When setting up an instance of the ObjectContext class you have to pass to
                the constructor an instance of a class that implements the
                <see cref="T:Chili.Opf3.Storages.IStorage">IStorage</see> interface. Those classes are so
                called "storages". They encapsulate a physical storage (like a database or anything
                else...) and each ObjectContext instance operates on one of those storages. The
                framework ships with a few storages for databases such as the
                <see cref="T:Chili.Opf3.Storages.Oracle.OracleStorage">OracleStorage</see>, the
                <see cref="T:Chili.Opf3.Storages.MsSql.MsSqlStorage">MsSqlStorage</see> and the
                <see cref="T:Chili.Opf3.Storages.OleDb.OleDbStorage">OleDbStorage</see> to mention any of
                them. When setting up the storage you have not to open it in any kind. This is done
                by the framework: the connections to the storage are handled by the classes
                internally (in the storages coming with the framework the ADO.NET connection pool
                is used).</para>
            	<para>Be aware that persistent objects loaded within one ObjectContext "life" in
                this ObjectContext. This means that the ObjectContext manages internally the state
                of the object (see <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see>). This could cause
                problems when loading the persistent object with one ObjectContext and saving it on
                another that works on the same storage. To avoid this problem persistent objects
                that are loaded on one ObjectContext and saved on another have to implement the
                <see cref="T:Chili.Opf3.ISelfContainingObject">ISelfContaining</see> interface. Persistent
                objects implementing this interface are ObjectContext independent and can be saved
                and loaded on any instance of an ObjectContext (if all of them are accessing the
                same storage). When implementing the interface the state is managed by the
                persisten object itself! The
                <see cref="T:Chili.Opf3.ISelfContainingObject">ISelfContainingObject</see> interface is
                also implemented if a persistent object is remoted over the network or persisted
                (serialized) to any kind of storage for further use.</para>
            	<para>Before using an ObjectContext you should also connect an instance of a class
                that implements the
                <see cref="T:Chili.Opf3.Concurrency.IConcurrencyManager">IConcurrencyManager</see>
                interface with the class by setting the
                <see cref="P:Chili.Opf3.ObjectContext.ConcurrencyManager">ConcurrencyManager</see> property
                of the ObjectContext. If the program works on a storage that is locally installed
                and if it is the only program working on that storage you could use no
                <see cref="T:Chili.Opf3.Concurrency.IConcurrencyManager">IConcurrencyManager</see>. But
                it's not recommended! A concurrency manager checks if the persistent object to save
                has been changed by anybody else in the meantime (while being in memory). If
                somebody else changed the object in the storage you get a
                <see cref="T:Chili.Opf3.Concurrency.ConcurrencyException">ConcurrencyException</see>. With
                this excpetion you can inform the user that somebody else altered the object in the
                meantime. The object could then be reloaded or saved in any other place.</para>
            	<para>To save the changes of your objects you have to use
                <see cref="M:Chili.Opf3.ObjectContext.PersistChanges``1(``0)">PersistChanges</see>
                of the ObjectContext. The method allows you to persist single objects or objects
                that implement the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see>
                interface. This interface is implemented by classes that persist more then one
                object. For an example look at the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>
                class.</para>
            	<para>If the class implementing the
                <see cref="T:Chili.Opf3.Storages.IStorage">IStorage</see> interface implements also the
                <see cref="T:Chili.Opf3.Storages.ITransactionStorage">ITransactionStorage</see> interface
                the ObjectContext supports also Transactions on that storage. Use
                <see cref="M:Chili.Opf3.ObjectContext.StartTransaction">StartTransaction</see>,
                <see cref="M:Chili.Opf3.ObjectContext.Rollback">Rollback</see> and
                <see cref="M:Chili.Opf3.ObjectContext.Commit">Commit</see> for transaction management.
                <strong>Please don't use directly the methods exposed by the
                storage.</strong></para>
            	<para>The ObjectContext returns an
                <see cref="T:Chili.Opf3.ObjectSearcher`1">ObjectSearcher</see> when invoking
                <see cref="M:Chili.Opf3.ObjectContext.GetObjectSearcher``1">GetObjectSearcher</see>. You could
                use this class to specify your search queries for a given object type. For more
                information about creating your own
                <see cref="T:Chili.Opf3.ObjectSearcher`1">ObjectSearcher</see> check out the
                <see cref="T:Chili.Opf3.ObjectSearcher`1">ObjectSearcher</see> class.</para>
            </remarks>
            <example>
                The following example shows how to use the functionality of the ObjectContext
                class. 
                <code lang="CS">
            [Persistent("USER")]
            public class User
            {
                private string _name = null;
             
                [Field("NAME")]
                public string Name
                {
                    get { return _name; }
                    set { _name = value; }
                }
             
                // ... Other properties and fields.
            }
             
            // ... Other code
             
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
            // Set the MD5 Concurrency Manager.
            context.ConcurrencyManager = new Md5ConcurrencyManager();
             
            // Loads a user object from the storage.
            User user = context.GetObject&lt;User&gt;("Id = {0}", "1");
            // Loads an ObjectSet of user and sorts them by Name.
            ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;
                ("Name like {0} SortBy Name Asc", "%mith%");
            // Change the name of each user.
            foreach(User user in objectSet)
            {
                user.Name = "Smith the II";
            }
             
            // Start a transaction on the ObjectContext.
            context.StartTransaction();
             
            try
            {
                // Save the changes on the ObjectSet
                context.PersistChanges&lt;User&gt;(objectSet);
                // Commit the transaction.
                context.Commit();
            }
            catch (ConcurrencyException ex)
            {
                // We got a concurrency problem. Roll the transaction
                // back and notify the user of the program.
                context.Rollback();
                Console.WriteLine("We got a concurrency problem!");
            }
                </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.#ctor(Chili.Opf3.Storages.IStorage)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext Class</see>.
            </summary>
            <example>
                The following example shows how to create a new ObjectContext. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
                </code>
            </example>
            <param name="storage">Instance of the class that represents the physical storage.</param>
            <exception cref="T:System.ArgumentNullException">Storage is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.Finalize">
            <summary>
            Destructs a new instance of the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObjectInfo(System.Object)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object of the given
            persistent object. The container holds information about the state of the
            object.
            </summary>
            <returns>
            The <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object of the given
            persistent.
            </returns>
            <param name="obj">Persistent object that's <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object is required.</param>
            <exception cref="T:System.ArgumentNullException">Obj is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.SetObjectInfo(System.Object,Chili.Opf3.ObjectInfo)">
            <summary>
            Sets the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object of the perisistent
            object. The container holds information about the state of the persistent object.
            </summary>
            <param name="obj">
            Persistent object that's <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object is set.
            </param>
            <param name="oi">The ObjectInfo object that is set.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObjectSearcher``1">
            <summary>
            Returns a new generic <see cref="T:Chili.Opf3.ObjectSearcher`1">ObjectSearcher</see>
            class.
            </summary>
            <remarks>
            An <see cref="T:Chili.Opf3.ObjectSearcher`1">ObjectSearcher</see> is used to find items in
            the storage, by applying conditions on the
            <see cref="M:Chili.Opf3.ObjectSearcher`1.FindAll">FindAll</see> routine of the class. By
            deriving form <see cref="T:Chili.Opf3.ObjectSearcher`1">ObjectSearcher</see> and overriding the
            <see cref="M:Chili.Opf3.ObjectSearcher`1.FindAll">FindAll</see> routines you can implement
            your own load mechanism for your persistent objects.
            </remarks>
            <example>
                The following example shows how to get and use an
                <see cref="T:Chili.Opf3.ObjectSearcher`1">ObjectSearcher</see>.
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get the ObjectSearcher class for user.
            ObjectSearcher&lt;User&gt; searcher = context.GetObjectSearcher&lt;User&gt;();
            // Find all user matching the name. The result is sorted by name.
            ObjectSet&lt;User&gt; objectSet = searcher.FindAll("Name like {0} SortBy Name Asc", "%mith%");
             
            foreach(User user in objectSet)
            {
                // Do something.
            }
                </code>
            </example>
            <returns>
            A generic <see cref="T:Chili.Opf3.ObjectSearcher`1">ObjectSearcher</see> class that allows
            you to search for persistent objects.
            </returns>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.Attach(System.Object)">
            <summary>
            Attaches the persistent object and the related objects to the <see cref="T:Chili.Opf3.ObjectContext"/>.
            </summary>
            <param name="persistent">The persistent object whose related objects are 
            attached to the <see cref="T:Chili.Opf3.ObjectContext"/>.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.IsModified(System.Object)">
            <summary>
            Returns whether the object has been modified since the last operation.
            </summary>
            <remarks>
            Validates the data of the object set as argument and returns whether the object has been
            modified since the last operation. The last operation is the last insert, load, update on the
            object.
            </remarks>
            <example>
                The following example shows how to use this method.
                <code lang="CS">
             // Load the object from the storage.
             User user = context.GetObject&lt;User&gt;("Id = {0}", "1");
             
             // Set a new name for the user object.
             user.Name = "new Name";
             
             // Check if the object has been modified.
             if (context.IsModified&lt;User&gt;(user))
                 Console.WriteLine("Object has been changed.");
             
                </code>
            </example>
            <param name="obj">
            Persistent objects that is checked for being modified.
            </param>
            <exception cref="T:System.ArgumentNullException">Obj is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.IsModified(System.Object,System.Boolean)">
            <summary>
            Returns whether the object (and its related objects) has been modified since the last operation.
            </summary>
            <remarks>
            Validates the data of the object set as argument and returns whether the object (plus eventually 
            the full loaded object graph) has been modified since the last operation. The last operation is 
            the last insert, load, update on the object.
            </remarks>
            <example>
                The following example shows how to use this method.
                <code lang="CS">
             // Load the object from the storage.
             User user = context.GetObject&lt;User&gt;("Id = {0}", "1");
             
             // Set a new name for the user object.
             user.Name = "new Name";
             
             // Check if the object has been modified.
             if (context.IsModified&lt;User&gt;(user))
                 Console.WriteLine("Object has been changed.");
             
                </code>
            </example>
            <param name="obj">Persistent objects that is checked for being modified.</param>
            <param name="checkFullLoadedGraph">True to check all objects in the loaded object graph for being modified.</param>
            <exception cref="T:System.ArgumentNullException">Obj is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObjectReader``1">
            <summary>
            Creates and executes an <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> on
            the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>.
            </summary>
            <remarks>
            This routine returns an <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> that
            is a forward-only cursor through the resultset. The
            <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> allows you to go through the
            resultset object per object. Usually an
            <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> is used in export or batch routines
            to minimize the memory amount.
            </remarks>
            <example>
                The following example introduces the use of the GetObjectReader routine.
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Gets all object matching the name and sorting them by name.
            // Returns the objects in an ObjectReader.
            ObjectReader&lt;User&gt; reader = context.GetObjectReader&lt;User&gt;();
             
            while(reader.Read())
            {
                User user = reader.Current;
                // Do something.
            }
             
            // ObjectReader supports also foreach
            // foreach(User user in reader)
            // {
            //       // Do something.
            // }
                </code>
            </example>
            <returns>
            An <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> representing a
            forward-only cursor on the resultset.
            </returns>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObjectReader``1(Chili.Opf3.Query.IQuery)">
            <summary>
            Creates and executes an <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> on
            the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>.
            </summary>
            <remarks>
            This routine returns an <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> that can 
            be seen as forward-only cursor through the resultset. The 
            <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> allows you to go through the resultset
            object per object. Usually an <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> is used
            in export or batch routines to minimize the memory amount.
            </remarks>
            <example>
                The following example introduces to the use of the GetObjectReader routine. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Gets all object matching the name and sorting them by name.
            // Returns the objects in an ObjectReader.
            ObjectReader&lt;User&gt; reader = context.GetObjectReader&lt;User&gt;
                ("Name like {0} SortBy Name Asc", "%mith%");
             
            while(reader.Read())
            {
                User user = reader.Current;
                // Do something.
            }
             
            // ObjectReader supports also foreach
            // foreach(User user in reader)
            // {
            //       // Do something.
            // }
                </code>
            </example>
            <returns>
            An <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> representing a
            forward-only cursor on the resultset.
            </returns>
            <param name="query">
            An instance of a class that implements the
            <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface. This query is compiled and used
            to retrieve the objects from the storage.
            </param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObjectReader``1(Chili.Opf3.Query.IQuery,System.Boolean)">
            <summary>
            Creates and executes an <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> on
            the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>.
            </summary>
            <remarks>
            This routine returns an <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> that can 
            be seen as forward-only cursor through the resultset. The 
            <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> allows you to go through the resultset
            object per object. Usually an <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> is used
            in export or batch routines to minimize the memory amount.
            </remarks>
            <example>
                The following example introduces to the use of the GetObjectReader routine. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Gets all object matching the name and sorting them by name.
            // Returns the objects in an ObjectReader.
            ObjectReader&lt;User&gt; reader = context.GetObjectReader&lt;User&gt;
                ("Name like {0} SortBy Name Asc", "%mith%");
             
            while(reader.Read())
            {
                User user = reader.Current;
                // Do something.
            }
             
            // ObjectReader supports also foreach
            // foreach(User user in reader)
            // {
            //       // Do something.
            // }
                </code>
            </example>
            <returns>
            An <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> representing a
            forward-only cursor on the resultset.
            </returns>
            <param name="query">
            An instance of a class that implements the
            <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface. This query is compiled and used
            to retrieve the objects from the storage.
            </param>
            <param name="ignoreCache">True to ignore the cache set.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObjectReader``1(System.String,System.Object[])">
            <summary>
            Creates and executes an <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> on
            the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>.
            </summary>
            <remarks>
            This routine returns an <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> that
            is a forward-only cursor through the resultset. The
            <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> allows you to go through the
            resultset object per object. Usually an
            <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> is used in export or batch routines
            to minimize the memory amount.
            </remarks>
            <example>
                The following example introduces the use of the GetObjectReader routine.
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Gets all object matching the name and sorting them by name.
            // Returns the objects in an ObjectReader.
            ObjectReader&lt;User&gt; reader = context.GetObjectReader&lt;User&gt;
                ("Name like {0} SortBy Name Asc", "%mith%");
             
            while(reader.Read())
            {
                User user = reader.Current;
                // Do something.
            }
             
            // ObjectReader supports also foreach
            // foreach(User user in reader)
            // {
            //       // Do something.
            // }
                </code>
            </example>
            <returns>
            An <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> representing a
            forward-only cursor on the resultset.
            </returns>
            <param name="conditions">A condition string that specifies the objects that are loaded.</param>
            <param name="parameter">A list of parameter that is passed as parameter for the conditions.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObjectList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Fills an instance of a class that implements the <see cref="T:System.Collections.Generic.IList`1">IList</see>
            interface with all objects (found in the storage) of the given type.
            </summary>
            <remarks>
            Returns a filled list of objects. All kind of lists that implement
            the <see cref="T:System.Collections.Generic.IList`1">IList</see> interface are allowed.
            </remarks>
            <example>
                The following example introduces to the use of the GetObjectList routine. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Gets all object matching the name and sorting them by name.
            IList&lt;User%gt; userList = null;
            userList = context.GetObjectReader&lt;User&gt;(new List&lt;User&gt;());
             
            // Loop through all items and do something.
            foreach(User user in userList)
            {
                // Do something.
            }
                </code>
            </example>
            <returns>
            The instance of a class that implements the <see cref="T:System.Collections.Generic.IList`1">IList</see>
            interface.
            </returns>
            <param name="list">An instance of a class that implements the <see cref="T:System.Collections.Generic.IList`1">IList</see>
            interface.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObjectList``1(System.Collections.Generic.IList{``0},System.String,System.Object[])">
            <summary>
            Fills an instance of a class that implements the <see cref="T:System.Collections.Generic.IList`1">IList</see>
            interface with objects.
            </summary>
            <remarks>
            Returns a filled list of objects. All kind of lists that implement
            the <see cref="T:System.Collections.Generic.IList`1">IList</see> interface are allowed.
            </remarks>
            <example>
                The following example introduces to the use of the GetObjectList routine. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Gets all object matching the name and sorting them by name.
            IList&lt;User%gt; userList = null;
            userList = context.GetObjectReader&lt;User&gt;(new List&lt;User&gt;(), 
            	"Name like {0} SortBy Name Asc", "%mith%");
             
            // Loop through all items and do something.
            foreach(User user in userList)
            {
                // Do something.
            }
                </code>
            </example>
            <returns>
            The instance of a class that implements the <see cref="T:System.Collections.Generic.IList`1">IList</see>
            interface.
            </returns>
            <param name="list">An instance of a class that implements the <see cref="T:System.Collections.Generic.IList`1">IList</see>
            interface.</param>
            <param name="conditions">A condition string that specifies the objects that are loaded.</param>
            <param name="parameter">A list of parameter that is passed as parameter for the conditions.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObjectList``1(System.Collections.Generic.IList{``0},Chili.Opf3.Query.IQuery)">
            <summary>
            Fills an instance of a class that implements the <see cref="T:System.Collections.Generic.IList`1">IList</see>
            interface with objects.
            </summary>
            <remarks>
            Returns a filled list of objects. All kind of lists that implement
            the <see cref="T:System.Collections.Generic.IList`1">IList</see> interface are allowed.
            </remarks>
            <example>
                The following example introduces to the use of the GetObjectList routine. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Gets all object matching the name and sorting them by name.
            IList&lt;User%gt; userList = null;
            userList = context.GetObjectReader&lt;User&gt;(new List&lt;User&gt;(), 
            	new ObjectQuery&lt;User&gt;("Name like {0} SortBy Name Asc", "%mith%"));
             
            // Loop through all items and do something.
            foreach(User user in userList)
            {
                // Do something.
            }
                </code>
            </example>
            <returns>
            The instance of a class that implements the <see cref="T:System.Collections.Generic.IList`1">IList</see>
            interface.
            </returns>
            <param name="list">An instance of a class that implements the <see cref="T:System.Collections.Generic.IList`1">IList</see>
            interface.</param>
            <param name="query">
            An instance of a class that implements the
            <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface. This query is compiled and used
            to retrieve the objects from the storage.
            </param>
            <exception cref="T:System.ArgumentNullException">List is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObjectList``1(System.Collections.Generic.IList{``0},Chili.Opf3.Query.IQuery,System.Int32)">
            <summary>
            Fills an instance of a class that implements the <see cref="T:System.Collections.Generic.IList`1">IList</see>
            interface with objects.
            </summary>
            <remarks>
            Returns a filled list of objects. All kind of lists that implement
            the <see cref="T:System.Collections.Generic.IList`1">IList</see> interface are allowed.
            </remarks>
            <example>
                The following example introduces to the use of the GetObjectList routine. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Gets all object matching the name and sorting them by name.
            IList&lt;User%gt; userList = null;
            userList = context.GetObjectReader&lt;User&gt;(new List&lt;User&gt;(), 
            	new ObjectQuery&lt;User&gt;("Name like {0} SortBy Name Asc", "%mith%"), 10);
             
            // Loop through all items and do something.
            foreach(User user in userList)
            {
                // Do something.
            }
                </code>
            </example>
            <returns>
            The instance of a class that implements the <see cref="T:System.Collections.Generic.IList`1">IList</see>
            interface.
            </returns>
            <param name="list">An instance of a class that implements the <see cref="T:System.Collections.Generic.IList`1">IList</see>
            interface.</param>
            <param name="query">
            An instance of a class that implements the
            <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface. This query is compiled and used
            to retrieve the objects from the storage.
            </param>
            <param name="amount">Amount of objects that are loaded from the storage. This allows you
            to load only the first, for example, 10 objects.</param>
            <exception cref="T:System.ArgumentNullException">List is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObjectSet``1">
            <summary>
            Fills an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> with all the objects of the given type.
            </summary>
            <remarks>
            Returns a filled <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. An 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> is as a in memory cache for objects. Use the
            conditions to restrict the result of the routine.
            </remarks>
            <example>
                The following example introduces to the use of the GetObjectSet routine. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get the ObjectSet with user matching the name and sorting them by name.
            ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;();
             
            // Loop through all items and do something.
            foreach(User user in objectSet)
            {
                // Do something.
            }
                </code>
            </example>
            <returns>
            An instance of an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> filled with the objects from the storage.
            </returns>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObjectSet``1(System.String,System.Object[])">
            <summary>
            Fills an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> with objects.
            </summary>
            <remarks>
            Returns a filled <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. An 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> is as a in memory cache for objects. Use the
            conditions to restrict the result of the routine.
            </remarks>
            <example>
                The following example introduces to the use of the GetObjectSet routine. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get the ObjectSet with user matching the name and sorting them by name.
            ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;
                ("Name like {0} SortBy Name Asc", "%mith%");
             
            // Loop through all items and do something.
            foreach(User user in objectSet)
            {
                // Do something.
            }
                </code>
            </example>
            <returns>
            An instance of an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> filled with the objects from the storage.
            </returns>
            <param name="conditions">A condition string that specifies the objects that are loaded.</param>
            <param name="parameter">A list of parameter that is passed as parameter for the conditions.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObjectSet``1(Chili.Opf3.Query.IQuery)">
            <summary>
            Fills an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> with objects.
            </summary>
            <remarks>
            Returns a filled <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. An 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> is as a in memory cache for objects.
            </remarks>
            <example>
                The following example introduces to the use of the GetObjectSet routine. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get the ObjectSet with user matching the name and sorting them by name.
            ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;
                (new ObjectQuery&lt;User&gt;("Name like {0} SortBy Name Asc", "%mith%"));
             
            // Loop through all items and do something.
            foreach(User user in objectSet)
            {
                // Do something.
            }
                </code>
            </example>
            <returns>
            An instance of an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> filled with the objects from the storage.
            </returns>
            <param name="query">
            An instance of a class that implements the
            <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface. This query is compiled and used
            to retrieve the objects from the storage.
            </param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObjectSet``1(Chili.Opf3.Query.IQuery,System.Int32)">
            <summary>
            Fills an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> with objects.
            </summary>
            <remarks>
            Returns a filled <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. An 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> is as a in memory cache for objects.
            </remarks>
            <example>
                The following example introduces to the use of the GetObjectSet routine. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get the ObjectSet for user.
            ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;
                (new ObjectQuery&lt;User&gt;("Name like {0}", "%mith%"), 10);
             
            // Loop through all items and do something.
            foreach(User user in objectSet)
            {
                // Do something.
            }
                </code>
            </example>
            <returns>
            An instance of an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> filled with the objects from the storage.
            </returns>
            <param name="query">
            An instance of a class that implements the
            <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface. This query is compiled and used
            to retrieve the objects from the storage.
            </param>
            <param name="amount">Amount of objects that are loaded from the storage. This allows you
            to load only the first, for example, 10 objects.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObjectSet``1(Chili.Opf3.PersistentTypeSelector)">
            <summary>
            Fills an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> with all the objects of the given type.
            </summary>
            <remarks>
            Returns a filled <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. An 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> is as a in memory cache for objects. Use the
            conditions to restrict the result of the routine.
            </remarks>
            <example>
                The following example introduces to the use of the GetObjectSet routine. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get the ObjectSet with user matching the name and sorting them by name.
            ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;(
            	new PersistentTypeSelector(MySelection));
             
            // Loop through all items and do something.
            foreach(User user in objectSet)
            {
                // Do something.
            }
            
            // ...
            
            private void MySelection(object sender, FetchingStorageRecordEventArgs e)
            {
                if (e.DataRecord["Type"] == "1")
                {
                    // Switch the type of the persistent that is created to User1.
                    e.Type = typeof(User1);
                }
                // Have a persistent of type User created.
                e.Type = typeof(User);
            }
                </code>
            </example>
            <returns>
            An instance of an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> filled with the objects from the storage.
            </returns>
            <param name="typeSelector">Delegate invoked before each creating of a persistent object. This allows
            to dynamically change the type of the created persistent object or ignore some objects.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObjectSet``1(Chili.Opf3.PersistentTypeSelector,System.String,System.Object[])">
            <summary>
            Fills an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> with objects.
            </summary>
            <remarks>
            Returns a filled <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. An 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> is as a in memory cache for objects. Use the
            conditions to restrict the result of the routine.
            </remarks>
            <example>
                The following example introduces to the use of the GetObjectSet routine. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get the ObjectSet with user matching the name and sorting them by name.
            ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;
                (new PersistentTypeSelector(MySelection), "Name like {0} SortBy Name Asc", "%mith%");
             
            // Loop through all items and do something.
            foreach(User user in objectSet)
            {
                // Do something.
            }
            
            // ...
            
            private void MySelection(object sender, FetchingStorageRecordEventArgs e)
            {
                if (e.DataRecord["Type"] == "1")
                {
                    // Switch the type of the persistent that is created to User1.
                    e.Type = typeof(User1);
                }
                // Have a persistent of type User created.
                e.Type = typeof(User);
            }
                </code>
            </example>
            <returns>
            An instance of an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> filled with the objects from the storage.
            </returns>
            <param name="conditions">A condition string that specifies the objects that are loaded.</param>
            <param name="parameter">A list of parameter that is passed as parameter for the conditions.</param>
            <param name="typeSelector">Delegate invoked before each creating of a persistent object. This allows
            to dynamically change the type of the created persistent object or ignore some objects.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObjectSet``1(Chili.Opf3.PersistentTypeSelector,Chili.Opf3.Query.IQuery)">
            <summary>
            Fills an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> with objects.
            </summary>
            <remarks>
            Returns a filled <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. An 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> is as a in memory cache for objects.
            </remarks>
            <example>
                The following example introduces to the use of the GetObjectSet routine. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get the ObjectSet with user matching the name and sorting them by name.
            ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;
                (new PersistentTypeSelector(MySelection), 
                 new ObjectQuery&lt;User&gt;("Name like {0} SortBy Name Asc", "%mith%"));
             
            // Loop through all items and do something.
            foreach(User user in objectSet)
            {
                // Do something.
            }
            
            // ...
            
            private void MySelection(object sender, FetchingStorageRecordEventArgs e)
            {
                if (e.DataRecord["Type"] == "1")
                {
                    // Switch the type of the persistent that is created to User1.
                    e.Type = typeof(User1);
                }
                // Have a persistent of type User created.
                e.Type = typeof(User);
            }
                </code>
            </example>
            <returns>
            An instance of an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> filled with the objects from the storage.
            </returns>
            <param name="query">
            An instance of a class that implements the
            <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface. This query is compiled and used
            to retrieve the objects from the storage.
            </param>
            <param name="typeSelector">Delegate invoked before each creating of a persistent object. This allows
            to dynamically change the type of the created persistent object or ignore some objects.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObjectSet``1(Chili.Opf3.PersistentTypeSelector,Chili.Opf3.Query.IQuery,System.Int32)">
            <summary>
            Fills an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> with objects.
            </summary>
            <remarks>
            Returns a filled <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. An 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> is as a in memory cache for objects.
            </remarks>
            <example>
                The following example introduces to the use of the GetObjectSet routine. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get the ObjectSet for user.
            ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;
                (new PersistentTypeSelector(MySelection), 
                 new ObjectQuery&lt;User&gt;("Name like {0}", "%mith%"), 10);
             
            // Loop through all items and do something.
            foreach(User user in objectSet)
            {
                // Do something.
            }
            
            // ...
            
            private void MySelection(object sender, FetchingStorageRecordEventArgs e)
            {
                if (e.DataRecord["Type"] == "1")
                {
                    // Switch the type of the persistent that is created to User1.
                    e.Type = typeof(User1);
                }
                // Have a persistent of type User created.
                e.Type = typeof(User);
            }
                </code>
            </example>
            <returns>
            An instance of an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> filled with the objects from the storage.
            </returns>
            <param name="query">
            An instance of a class that implements the
            <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface. This query is compiled and used
            to retrieve the objects from the storage.
            </param>
            <param name="amount">Amount of objects that are loaded from the storage. This allows you
            to load only the first, for example, 10 objects.</param>
            <param name="typeSelector">Delegate invoked before each creating of a persistent object. This allows
            to dynamically change the type of the created persistent object or ignore some objects.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObject``1(System.String,System.Object[])">
            <summary>
            Fetches the first object matching the conditions and returns it.
            </summary>
            <remarks>
            Executes a query on the storage and returns the first object that matches the query. 
            If no object is found Null is returned.
            </remarks>
            <example>
                The following example introduces to the use of the GetObject routine. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get the first user matching the name and sorts them by name.
            User user = context.GetObject&lt;User&gt;("Name like {0} SortBy Name Asc", "%mith%");
             
            // If the user object is null nothing that matches has been found.
            if (user == null)
                Debug.WriteLine("No object found!");
            else
                Debug.WriteLine(
                    string.Format("Object with name {0} has been found.", 
                    user.Name));
                </code>
            </example>
            <returns>
            The first object matching the conditions.
            </returns>
            <param name="conditions">A condition string that specifies the object that is loaded.</param>
            <param name="parameters">A list of parameter that is passed as parameter for the conditions.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObject``1(Chili.Opf3.Query.IQuery)">
            <summary>
            Fetches the first object matching the conditions and returns it.
            </summary>
            <remarks>
            Executes a query on the storage and returns the first object that matches the query. 
            If no object is found Null is returned.
            </remarks>
            <example>
                The following example introduces to the use of the GetObject routine. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get the first user matching the name and sorts them by name.
            User user = context.GetObject&lt;User&gt;("Name like {0} SortBy Name Asc", "%mith%");
             
            // If the user object is null nothing that matches has been found.
            if (user == null)
                Debug.WriteLine("No object found!");
            else
                Debug.WriteLine(
                    string.Format("Object with name {0} has been found.", 
                    user.Name));
                </code>
            </example>
            <returns>
            The first object matching the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see>.
            </returns>
            <param name="query">
            An instance of a class that implements the
            <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface. This query is compiled and used
            to retrieve the object from the storage.
            </param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObject``1(Chili.Opf3.ICustomPersister,System.String,System.Object[])">
            <summary>
            Populates a class implementing the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> interface with data.
            </summary>
            <remarks>
            Populates the class implementing the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> with data
            from the storage. The class gets the control on how to load the objects from the storage. A query
            is also given to have the object loaded the objects matching the query. There is no guarantuee that
            the object loads exactly the objects returned by the query, since it controls the loading process
            by itself.
            </remarks>
            <example>
            The following example introduces to the use of the GetObject routine 
            with the ICustomPersister interface. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Populates the given ObjectSet with data.
            ObjectSet&lt;User&gt; = context.GetObject&lt;User&gt;(new ObjectSet&lt;User&gt;(), 
            	"Name like {0} SortBy Name Asc", "%mith%");
                </code>
            </example>
            <returns>
            The first object implementing the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> interface.
            </returns>
            <param name="customPersister">The class implementing the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see>
            interface.</param>
            <param name="conditions">A condition string that specifies the object that is loaded.</param>
            <param name="parameters">A list of parameter that is passed as parameter for the conditions.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObject``1(Chili.Opf3.ICustomPersister,Chili.Opf3.Query.IQuery)">
            <summary>
            Populates a class implementing the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> interface with data.
            </summary>
            <remarks>
            Populates the class implementing the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> with data
            from the storage. The class gets the control on how to load the objects from the storage. A query
            is also given to have the object loaded the objects matching the query. There is no guarantuee that
            the object loads exactly the objects returned by the query, since it controls the loading process
            by itself.
            </remarks>
            <example>
            The following example introduces to the use of the GetObject routine 
            with the ICustomPersister interface. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Populates the given ObjectSet with data.
            ObjectSet&lt;User&gt; = context.GetObject&lt;User&gt;(new ObjectSet&lt;User&gt;(), 
            	"Name like {0} SortBy Name Asc", "%mith%");
                </code>
            </example>
            <returns>
            The first object implementing the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> interface.
            </returns>
            <param name="query">
            An instance of a class that implements the
            <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface. This query is compiled and used
            to retrieve the object from the storage.
            </param>
            <param name="customPersister">The class implementing the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see>
            interface.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObject``1(Chili.Opf3.PersistentTypeSelector,System.String,System.Object[])">
            <summary>
            Fetches the first object matching the conditions and returns it.
            </summary>
            <remarks>
            Executes a query on the storage and returns the first object that matches the query. 
            If no object is found Null is returned.
            </remarks>
            <example>
                The following example introduces to the use of the GetObject routine. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get the first user matching the name and sorts them by name.
            User user = context.GetObject&lt;User&gt;(new PersistentTypeSelector(MySelection),
                "Name like {0} SortBy Name Asc", "%mith%");
             
            // If the user object is null nothing that matches has been found.
            if (user == null)
                Debug.WriteLine("No object found!");
            else
                Debug.WriteLine(
                    string.Format("Object with name {0} has been found.", 
                    user.Name));
            
            // ...
            
            private void MySelection(object sender, FetchingStorageRecordEventArgs e)
            {
                if (e.DataRecord["Type"] == "1")
                {
                    // Switch the type of the persistent that is created to User1.
                    e.Type = typeof(User1);
                }
                // Have a persistent of type User created.
                e.Type = typeof(User);
            }
                </code>
            </example>
            <returns>
            The first object matching the conditions.
            </returns>
            <param name="typeSelector">Delegate invoked before each creating of a persistent object. This allows
            to dynamically change the type of the created persistent object or ignore some objects.</param>
            <param name="conditions">A condition string that specifies the object that is loaded.</param>
            <param name="parameters">A list of parameter that is passed as parameter for the conditions.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.GetObject``1(Chili.Opf3.PersistentTypeSelector,Chili.Opf3.Query.IQuery)">
            <summary>
            Fetches the first object matching the conditions and returns it.
            </summary>
            <remarks>
            Executes a query on the storage and returns the first object that matches the query. 
            If no object is found Null is returned.
            </remarks>
            <example>
                The following example introduces to the use of the GetObject routine. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get the first user matching the name and sorts them by name.
            User user = context.GetObject&lt;User&gt;(new PersistentTypeSelector(MySelection),
                new ObjectQuery&lt;User&gt;("Name like {0} SortBy Name Asc", "%mith%"));
             
            // If the user object is null nothing that matches has been found.
            if (user == null)
                Debug.WriteLine("No object found!");
            else
                Debug.WriteLine(
                    string.Format("Object with name {0} has been found.", 
                    user.Name));
            
            // ...
            
            private void MySelection(object sender, FetchingStorageRecordEventArgs e)
            {
                if (e.DataRecord["Type"] == "1")
                {
                    // Switch the type of the persistent that is created to User1.
                    e.Type = typeof(User1);
                }
                // Have a persistent of type User created.
                e.Type = typeof(User);
            }
                </code>
            </example>
            <returns>
            The first object matching the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see>.
            </returns>
            <param name="typeSelector">Delegate invoked before each creating of a persistent object. This allows
            to dynamically change the type of the created persistent object or ignore some objects.</param>
            <param name="query">An instance of a class that implements the
            <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface. This query is compiled and used
            to retrieve the object from the storage.
            </param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.Synchronize(System.Object,System.Object)">
            <summary>
            Synchronizes the target with the data that has been given with the template.
            </summary>
            <remarks>
            This method synchronizes the mapped data of the target persistent object with the data that has been given 
            with the template persistent object. The synchronization will only apply as a flat synchronization; that means
            that related objects won't be synchronized.
            </remarks>
            <param name="targetPersistent">The persistent that is synchronized with the data from the template persistent.</param>
            <param name="templatePersistent">The persistent holds the data that is put into the target persistent.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.Reload``1(``0,System.Boolean)">
            <summary>
            Reloads the given persistent object from the storage. Returns true if the reload was successful or
            false if not.
            </summary>
            <param name="obj">The persistent object that is reloaded from the storage.</param>
            <param name="ignoreCache">True to ignore the cache (if one has been set by using the CacheManager property of the ObjectContext).</param>
            <returns>True if the persistent object has been reloaded sucessfully; false if not.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.Reload``1(``0)">
            <summary>
            Reloads the given persistent object from the storage. Returns true if the reload was successful or
            false if not.
            </summary>
            <param name="obj">The persistent object that is reloaded from the storage.</param>
            <returns>True if the persistent object has been reloaded sucessfully; false if not.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.Reload``1(``0,System.Boolean,System.Boolean)">
            <summary>
            Reloads the given persistent object from the storage. Returns true if the reload was successful or
            false if not.
            </summary>
            <param name="obj">The persistent object that is reloaded from the storage.</param>
            <param name="ignoreCache">True to ignore the cache (if one has been set by using the CacheManager property of the ObjectContext).</param>
            <param name="invalidateRelations">True to invalidate all the relations. That means that related objects are also reloaded when requested for the next time.</param>
            <returns>True if the persistent object has been reloaded sucessfully; false if not.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.PersistChanges``1(``0)">
            <summary>
            Persists the changes on a single persistent object, an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> and 
            a class that implements the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> interface.
            </summary>
            <remarks>
            This routine persists the changes on one single persistent object, an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> and 
            a class that implements the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> interface. Some times you need
            to save only one single object in the storage. Use this routine if you have only one persistent object to be saved.
            Don't use this routine for lists of objects (except the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>) or non persistent 
            objects (if they don't implement <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see>).
            </remarks>
            <example>
                The following example shows you how to persist a single persistent object. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get the first user matching the name.
            User user = context.GetObject&lt;User&gt;("Name like {0}", "%mith%");
             
            // Changes the name property.
            user.Name = "new Name";
             
            // Persists the user object.
            context.PersistChanges(user);
                </code>
            </example>
            <param name="obj">Persistent object, <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> or class that implements 
            the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> interface that is persisted.</param>
            <exception cref="T:Chili.Opf3.ConstraintException">A mandatory property of one persistent object returned Null.</exception>
            <exception cref="T:Chili.Opf3.Concurrency.ConcurrencyException">Somebody else changed the object in the storage
            while it has been in memory.</exception>
            <exception cref="T:Chili.Opf3.Storages.StorageException">Indicates a problem with the storage. All derived exception 
            may also be thrown.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.PersistChanges``1(``0,Chili.Opf3.PersistDepths)">
            <summary>
            Persists the changes on a single persistent object, an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> and 
            a class that implements the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> interface.
            </summary>
            <remarks>
            This routine persists the changes on one single persistent object, an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> and 
            a class that implements the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> interface. Some times you need
            to save only one single object in the storage. Use this routine if you have only one persistent object to be saved.
            Don't use this routine for lists of objects (except the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>) or non persistent 
            objects (if they don't implement <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see>).
            </remarks>
            <example>
                The following example shows you how to persist a single persistent object. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get the first user matching the name.
            User user = context.GetObject&lt;User&gt;("Name like {0}", "%mith%");
             
            // Changes the name property.
            user.Name = "new Name";
             
            // Persists the user object.
            context.PersistChanges(user);
                </code>
            </example>
            <param name="obj">Persistent object, <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> or class that implements 
            the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> interface that is persisted.</param>
            <param name="persistDepth">Specifies the depth of the object graph that is persisted.</param>
            <exception cref="T:Chili.Opf3.ConstraintException">A mandatory property of one persistent object returned Null.</exception>
            <exception cref="T:Chili.Opf3.Concurrency.ConcurrencyException">Somebody else changed the object in the storage
            while it has been in memory.</exception>
            <exception cref="T:Chili.Opf3.Storages.StorageException">Indicates a problem with the storage. All derived exception 
            may also be thrown.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.MarkForDeletion(System.Object)">
            <summary>
            Marks a persistent object for deletion.
            </summary>
            <remarks>
            This routine marks a persistent object for deletion. The object
            is not deleted immediately. It is deleted on the next call of 
            <see cref="M:Chili.Opf3.ObjectContext.PersistChanges``1(``0)">PersistChanges</see>. 
            If you want to delete immediately an object from the storage you have
            to mark it for deletion and then call 
            <see cref="M:Chili.Opf3.ObjectContext.PersistChanges``1(``0)">PersistChanges</see>.
            </remarks>
            <example>
                The following example shows you how delete an object from the storage. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get the first user matching the name.
            User user = context.GetObject&lt;User&gt;("Name like {0}", "%mith%");
             
            // Mark the object for deletion.
            context.MarkForDeletion(user);
             
            // Deletes the user object from the storage.
            context.PersistChanges(user);
                </code>
            </example>
            <param name="obj">Persistent object that is marked for deletion.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.StartTransaction">
            <summary>
            Starts a new transaction.
            </summary>
            <remarks>
            Starts a new transaction on the connected <see cref="T:Chili.Opf3.Storages.IStorage">IStorage</see>.
            This routine is only supported if the storage implements also the 
            <see cref="T:Chili.Opf3.Storages.ITransactionStorage">ITransactionStorage</see> interface.
            You don't get an exception if the storage does not support transactions and you call
            this routine.
            </remarks>
            <example>
                The following example shows how to use transaction management. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get an ObjectSet containing all user matching the name.
            // The result is sorted by Name.
            ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;
                ("Name like {0} SortBy Name Asc", "%mith%");
             
            // Change all names of the user objects.
            foreach(User user in objectSet)
            {
                user.Name = "new Name";
            }
             
            try
            {
                // Starts a new Transaction.
                using(Transaction t = context.StartTransaction())
                {
                    // Deletes the user object from the storage.
                    context.PersistChanges(objectSet);
             
                    // Commit the changes to the storage.
                    t.Commit();
                }
            }
            catch (Exception ex)
            {
                // Rolls the changes back.
                context.Rollback();
                Console.WriteLine("Error: " + ex.Message");
            }
                </code>
            </example>
            <returns>Returns an object that inherits of the abstract <see cref="T:Chili.Opf3.Storages.Transaction">Transaction</see> class if the transaction 
            has been started sucessfully. Null otherwise.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.StartTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a new transaction.
            </summary>
            <remarks>
            Starts a new transaction on the connected <see cref="T:Chili.Opf3.Storages.IStorage">IStorage</see>.
            This routine is only supported if the storage implements also the 
            <see cref="T:Chili.Opf3.Storages.ITransactionStorage">ITransactionStorage</see> interface.
            You don't get an exception if the storage does not support transactions and you call
            this routine.
            </remarks>
            <example>
                The following example shows how to use transaction management. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get an ObjectSet containing all user matching the name.
            // The result is sorted by Name.
            ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;
                ("Name like {0} SortBy Name Asc", "%mith%");
             
            // Change all names of the user objects.
            foreach(User user in objectSet)
            {
                user.Name = "new Name";
            }
             
            try
            {
                // Starts a new Transaction.
                using(Transaction t = context.StartTransaction())
                {
                    // Deletes the user object from the storage.
                    context.PersistChanges(objectSet);
             
                    // Commit the changes to the storage.
                    t.Commit();
                }
            }
            catch (Exception ex)
            {
                // Rolls the changes back.
                context.Rollback();
                Console.WriteLine("Error: " + ex.Message");
            }
                </code>
            </example>
            <returns>Returns an object that inherits of the abstract <see cref="T:Chili.Opf3.Storages.Transaction">Transaction</see> class if the transaction 
            has been started sucessfully. Null otherwise.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.Commit">
            <summary>
            Commits the current transaction.
            </summary>
            <remarks>
            Commits an open transaction on the connected <see cref="T:Chili.Opf3.Storages.IStorage">IStorage</see>.
            This routine is only supported if the storage implements also the 
            <see cref="T:Chili.Opf3.Storages.ITransactionStorage">ITransactionStorage</see> interface.
            You don't get an exception if the storage does not support transactions and you call
            this routine.
            </remarks>
            <example>
                The following example shows how to use transaction management. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get an ObjectSet containing all user matching the name.
            // The result is sorted by Name.
            ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;
                ("Name like {0} SortBy Name Asc", "%mith%");
             
            // Change all names of the user objects.
            foreach(User user in objectSet)
            {
                user.Name = "new Name";
            }
             
            // Starts a new Transaction.
            context.StartTransaction();
             
            try
            {
                // Deletes the user object from the storage.
                context.PersistChanges(objectSet);
             
                // Commit the changes to the storage.
                context.Commit();
            }
            catch (Exception ex)
            {
                // Rolls the changes back.
                context.Rollback();
                Console.WriteLine("Error: " + ex.Message");
            }
                </code>
            </example>
            <exception cref="T:System.Exception">No transaction active.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.Rollback">
            <summary>
            Rolls the current transaction back.
            </summary>
            <remarks>
            Rolls the current transaction on the connected <see cref="T:Chili.Opf3.Storages.IStorage">IStorage</see>
            back. This routine is only supported if the storage implements also the 
            <see cref="T:Chili.Opf3.Storages.ITransactionStorage">ITransactionStorage</see> interface.
            You don't get an exception if the storage does not support transactions and you call
            this routine.
            </remarks>
            <example>
                The following example shows how to use transaction management. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
             
            // ... Other code.
             
            // Get an ObjectSet containing all user matching the name.
            // The result is sorted by Name.
            ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;
                ("Name like {0} SortBy Name Asc", "%mith%");
             
            // Change all names of the user objects.
            foreach(User user in objectSet)
            {
                user.Name = "new Name";
            }
             
            // Starts a new Transaction.
            context.StartTransaction();
             
            try
            {
                // Deletes the user object from the storage.
                context.PersistChanges(objectSet);
             
                // Commit the changes to the storage.
                context.Commit();
            }
            catch (Exception ex)
            {
                // Rolls the changes back.
                context.Rollback();
                Console.WriteLine("Error: " + ex.Message");
            }
                </code>
            </example>
            <exception cref="T:System.Exception">No transaction active.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.OnInserting(Chili.Opf3.ObjectPersistingEventArgs)">
            <summary>
            Invoked before an object is inserted into the storage.
            </summary>
            <param name="e">EventArgs of the routine.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.OnInserted(Chili.Opf3.ObjectPersistedEventArgs)">
            <summary>
            Invoked after an object is inserted into the storage.
            </summary>
            <param name="e">EventArgs of the routine.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.OnUpdating(Chili.Opf3.ObjectPersistingEventArgs)">
            <summary>
            Invoked before an object is updated in the storage.
            </summary>
            <param name="e">EventArgs of the routine.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.OnUpdated(Chili.Opf3.ObjectPersistedEventArgs)">
            <summary>
            Invoked after an object is updated in the storage.
            </summary>
            <param name="e">EventArgs of the routine.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.OnDeleting(Chili.Opf3.ObjectPersistingEventArgs)">
            <summary>
            Invoked before an object is deleted in the storage.
            </summary>
            <param name="e">EventArgs of the routine.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.OnDeleted(Chili.Opf3.ObjectPersistedEventArgs)">
            <summary>
            Invoked after an object is deleted from the storage.
            </summary>
            <param name="e">EventArgs of the routine.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.persister_Deleting(System.Object,Chili.Opf3.ObjectPersistingEventArgs)">
            <summary>
            Invoked before deleting an object.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.persister_Inserting(System.Object,Chili.Opf3.ObjectPersistingEventArgs)">
            <summary>
            Invoked before inserting an object.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.persister_Updating(System.Object,Chili.Opf3.ObjectPersistingEventArgs)">
            <summary>
            Invoked before updating an object.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.persister_Updated(System.Object,Chili.Opf3.ObjectPersistedEventArgs)">
            <summary>
            Invoked after updating an object.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.persister_Inserted(System.Object,Chili.Opf3.ObjectPersistedEventArgs)">
            <summary>
            Invoked after inserting an object.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.persister_Deleted(System.Object,Chili.Opf3.ObjectPersistedEventArgs)">
            <summary>
            Invoked after deleting an object.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.reader_Loaded(System.Object,Chili.Opf3.ObjectLoadedEventArgs)">
            <summary>
            Invoked each time after loading an object.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.reader_Loading(System.Object,Chili.Opf3.ObjectLoadingEventArgs)">
            <summary>
            Invoked each time before loading an object.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.OnLoaded(Chili.Opf3.ObjectLoadedEventArgs)">
            <summary>
            Invoked after an object is loaded from the storage.
            </summary>
            <param name="e">EventArgs of the routine.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.OnLoading(Chili.Opf3.ObjectLoadingEventArgs)">
            <summary>
            Invokes the event that is fired before an object has been loaded from the storage.
            </summary>
            <param name="e">The EventArgs for the event.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.OnPersisting(Chili.Opf3.BeforeObjectPersistingEventArgs)">
            <summary>
            Invoked before an object is persisted in the storage.
            </summary>
            <param name="e">EventArgs of the routine.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.OnMarkingForDeletion(Chili.Opf3.MarkForDeletionEventArgs)">
            <summary>
            Invoked before an object is marked for deletion in the storage.
            </summary>
            <param name="e">EventArgs of the routine.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.OnMarkedForDeletion(Chili.Opf3.MarkForDeletionEventArgs)">
            <summary>
            Invoked after an object is marked for deletion in the storage.
            </summary>
            <param name="e">EventArgs of the routine.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.Dispose(System.Boolean)">
            <summary>
            Disposes the instance of the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>.
            </summary>
            <param name="disposing">True to do only managed resources disposing.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContext.System#IDisposable#Dispose">
            <summary>
            Disposes the instance of the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectContext.PersistentFactory">
            <summary>
            Gets or sets a class implementing the <see cref="T:Chili.Opf3.IPersistentFactory">IPersistentFactory</see> interface.
            </summary>
            <remarks>
            A class implementing the interface provides instances of persistent objects.
            </remarks>
        </member>
        <member name="P:Chili.Opf3.ObjectContext.Factory">
             <summary>
             Gets the <see cref="T:Chili.Opf3.ObjectContextFactory">ObjectContextFactory</see> that allows creating 
             <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instances by applying a <see cref="T:Chili.Opf3.ObjectContextFactoryPolicyBase">policy</see>. 
             Such as creating a  new <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance on each call (ASP.NET applications) or for
             each different thread (Windows applications).
             </summary>
             <example>
             This example shows how to set up the factory to create an ObjectContext instance for each new thread.
             <code lang="CS">
             // Set the policy for multi threading.
             ObjectContext.Factory.Policy = new PerThreadObjectContextFactoryPolicy(delegate()
             {
                 MsSqlStorage storage = new MsSqlStorage("... connection string ...");
                 ObjectContext ctx = new ObjectContext(storage);
            
                 return ctx;
             });
             
             // ... Other code
             
             // Have an ObjectContext instance created
             ObjectContext context = ObjectContext.Factory.GetObjectContext();
             </code>
             </example>
        </member>
        <member name="P:Chili.Opf3.ObjectContext.Storage">
            <summary>
            Returns the class that implements the <see cref="T:Chili.Opf3.Storages.IStorage">IStorage</see>
            interface.
            </summary>
            <remarks>
            The class returned represents the physical storage that stores the objects on a device.
            </remarks>
            <value>The class that represents the physical storage.</value>
        </member>
        <member name="P:Chili.Opf3.ObjectContext.ConcurrencyManager">
            <summary>
            Specifies the class that implements the 
            <see cref="T:Chili.Opf3.Concurrency.IConcurrencyManager">IConcurrencyManager</see> interface.
            </summary>
            <remarks>
            The <see cref="T:Chili.Opf3.Concurrency.IConcurrencyManager">IConcurrencyManager</see>
            checks if somebody else has changed the object in the meantime (in the time it has been
            in memory). It throws a
            <see cref="T:Chili.Opf3.Concurrency.ConcurrencyException">ConcurrencyException</see> if
            somebody else altered the object in the meantime. If the program using the framework is
            not the only one working on a storage it is always required to set a
            <see cref="T:Chili.Opf3.Concurrency.IConcurrencyManager">IConcurrencyManager</see>.
            </remarks>
            <example>
                The following example shows how to set the Md5ConcurrencyManager. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
            // Set the ConcurrencyManager.
            context.ConcurrencyManager = new Md5ConurrencyManager();
                </code>
            </example>
            <value>
            Returns the
            <see cref="T:Chili.Opf3.Concurrency.IConcurrencyManager">IConcurrencyManager</see> of the
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> or null if no manager has been
            specified.
            </value>
        </member>
        <member name="P:Chili.Opf3.ObjectContext.CacheManager">
            <summary>
            Specifies the class that implements the <see cref="T:Chili.Opf3.Caching.ICacheManager">ICacheManager</see>
            interface.
            </summary>
            <remarks>
            The <see cref="T:Chili.Opf3.Caching.ICacheManager">ICacheManager</see> holds instances of created persistent
            objects as long as they do not expire. If the cache contains still an instance of a persistent object
            and the object is to be reloaded the cached instance is re-used.
            </remarks>
            <example>
                The following example shows how to set the SimpleCacheManager. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
            // Set the CacheManager.
            context.CacheManager = new SimpleCacheManager();
                </code>
            </example>
            <value>
            Returns the
            <see cref="T:Chili.Opf3.Caching.ICacheManager">ICacheManager</see> of the
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> or null if no manager has been
            specified.
            </value>
        </member>
        <member name="P:Chili.Opf3.ObjectContext.RelationsManager">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Relations.RelationsManager">RelationsManager</see>
            associated with the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>. This class manages
            the relations between persistent objects.
            </summary>
            <value>
            	<see cref="T:Chili.Opf3.Relations.RelationsManager">RelationsManager</see> created by the
            context.
            </value>
        </member>
        <member name="P:Chili.Opf3.ObjectContext.ObjectPersister">
            <summary>
            Returns the <see cref="T:Chili.Opf3.ObjectPersister">ObjectPersister</see> associated with the 
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>. This class persists a single persistent object
            to the storage.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectContext.PersistentQueriesProviders">
            <summary>
            Gets the list of <see cref="T:Chili.Opf3.IPersistentQueriesProvider">IPersistentQueriesProviders</see>. An
            <see cref="T:Chili.Opf3.IPersistentQueriesProvider">IPersistentQueriesProvider</see> allows to specify the insert,
            update and delete query statements directly. The framework is going to use these statements (instead of 
            the automatically created ones) when doing inserts, updates and deletes on persistent objects.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectContext.AutomaticallyLoadRelatedObjects">
            <summary>
            Gets or sets a value that specifies whether the related objects should be loaded automatically.
            </summary>
            <remarks>
            <para>
            This property specifies a value that indicates whether related objects should be loaded automatically when
            invoking the Value property of the <see cref="T:Chili.Opf3.Relations.ObjectHolder`1"/>, <see cref="T:Chili.Opf3.Relations.ObjectSetHolder`1"/> 
            or <see cref="T:Chili.Opf3.Relations.ObjectListHolder`1"/>.
            </para>
            <para>
            If the behaviour (default is true) is changed the related objects can only be loaded by using the Load 
            method of the object holder objects. After calling the Load method the InnerObject property will hold 
            the related objects.
            </para>
            </remarks>
        </member>
        <member name="P:Chili.Opf3.ObjectContext.EnableRemotingSerialization">
            <summary>
            Gets or sets whether the objects (and its relations) are serialized for .NET remoting over binary channels. 
            If the object is serialized for remoting lazy loading of relations is enabled. Otherwise lazy loading 
            is disabled. This option should only get enabled for remoting over binary channels and does not work 
            with Windows Communication Foundation or web services in general.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectContext.IdentityMap">
            <summary>
            Gets the <see cref="P:Chili.Opf3.ObjectContext.IdentityMap"/> for the current <see cref="T:Chili.Opf3.ObjectContext"/> instance.
            </summary>
            <remarks>
            An identity map represents the set of the current loaded persistent objects. Enabling it
            means that persistent objects that are found in memory won't get reloaded from the storage. The objects
            in memory will be used instead of items that might have come from the storage.
            </remarks>
        </member>
        <member name="E:Chili.Opf3.ObjectContext.Updating">
            <summary>
            Event fired before an object is updated.
            </summary>
            <remarks>
            This event is fired before an object is updated in the storage.
            It may be used if you want to customize the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see>
            for the operation.
            </remarks>
        </member>
        <member name="E:Chili.Opf3.ObjectContext.Updated">
            <summary>
            Event fired after an object is updated.
            </summary>
            <remarks>
            This event is fired after an object has been updated in the storage.
            </remarks>
        </member>
        <member name="E:Chili.Opf3.ObjectContext.Inserting">
            <summary>
            Event fired before an object is inserted.
            </summary>
            <remarks>
            This event is fired before an object is inserted into the storage.
            It may be used if you want to customize the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see>
            for the operation.
            </remarks>
        </member>
        <member name="E:Chili.Opf3.ObjectContext.Inserted">
            <summary>
            Event fired after an object is inserted.
            </summary>
            <remarks>
            This event is fired after an object has been inserted to the storage.
            </remarks>
        </member>
        <member name="E:Chili.Opf3.ObjectContext.Deleting">
            <summary>
            Event fired before an object is deleted.
            </summary>
            <remarks>
            This event is fired before an object is deleted from the storage.
            It may be used if you want to customize the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see>
            for the operation.
            </remarks>
        </member>
        <member name="E:Chili.Opf3.ObjectContext.Deleted">
            <summary>
            Event fired after an object is deleted.
            </summary>
            <remarks>
            This event is fired after an object has been deleted in the storage.
            </remarks>
        </member>
        <member name="E:Chili.Opf3.ObjectContext.Loading">
            <summary>
            Event fired before an object is loaded. The persistent is populated
            after this event has been fired!
            </summary>
            <remarks>
            This event is fired before an object has been loaded from the storage. The persistent is populated
            after this event has been fired!
            </remarks>
        </member>
        <member name="E:Chili.Opf3.ObjectContext.Loaded">
            <summary>
            Event fired after an object is loaded.
            </summary>
            <remarks>
            This event is fired after an object has been loaded from the storage.
            </remarks>
        </member>
        <member name="E:Chili.Opf3.ObjectContext.Persisting">
            <summary>
            Event fired before an object is persisted (inserted, updated or deleted).
            </summary>
            <remarks>
            This event is fired before an object is persisted in the storage.
            </remarks>
        </member>
        <member name="E:Chili.Opf3.ObjectContext.MarkingForDeletion">
            <summary>
            Event fired before an object is marked for deletion.
            </summary>
            <remarks>
            This event is fired before an object is marked for deletion in the storage.
            </remarks>
        </member>
        <member name="E:Chili.Opf3.ObjectContext.MarkedForDeletion">
            <summary>
            Event fired after an object is marked for deletion.
            </summary>
            <remarks>
            This event is fired before an object is marked for deletion in the storage.
            </remarks>
        </member>
        <member name="T:Chili.Opf3.Storages.ObjectDataAdapter">
            <summary>
            Maps the data from the storage to the object and vice versa.
            </summary>
            <remarks>
            This class gets a DataReader that comes from ADO.NET and maps the content of that
            item to one single object that is also passed. The class maps also the properties of an
            object to an <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see> that can
            then be used by the <see cref="T:Chili.Opf3.Storages.IStorage">IStorage</see> to save the
            object to the physical storage.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Storages.ObjectDataAdapter.#ctor(Chili.Opf3.Storages.IStorage)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.ObjectDataAdapter">ObjectDataAdapter
            Class</see>.
            </summary>
            <param name="storage">
            Storage that is associated with the
            <see cref="T:Chili.Opf3.Storages.ObjectDataAdapter">ObjectDataAdapter</see> class. The storage is required to
            handle DBNulls that come from and go to the storage.
            </param>
        </member>
        <member name="M:Chili.Opf3.Storages.ObjectDataAdapter.FillObject(System.Type,System.Data.IDataRecord,Chili.Opf3.ObjectReaderSchema)">
            <summary>Fills the object with the data from the current data record.</summary>
            <param name="type">The type of object that is populated with the data from the current item in the DataReader.</param>
            <param name="dataRecord">Data record that is used to populate the object.</param>
            <param name="schema">Contains the schema of the current ObjectReader instance.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.ObjectDataAdapter.FillObject(System.Object,System.Data.IDataRecord,Chili.Opf3.ObjectInfo,Chili.Opf3.ObjectReaderSchema)">
            <summary>Fills the object with the data from the current data record.</summary>
            <param name="obj">Object that is populated with the data from the current item in the DataReader.</param>
            <param name="dataRecord">Data record that is used to populate the object.</param>
            <param name="objectInfo">The ObjectInfo object containing additional data on the object.</param>
            <param name="schema">Contains the schema of the current ObjectReader instance.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.ObjectDataAdapter.FillDynamicExtensible(Chili.Opf3.IDynamicExtensible,System.String,System.Object)">
            <summary>
            Fills one single dynamic extensible of the persistent object with data.
            </summary>
            <param name="dynamicExtensible"><see cref="T:Chili.Opf3.IDynamicExtensible">IDynamicExtensible</see> that is populated with data.</param>
            <param name="fieldName">The name of the field that is associated with the item.</param>
            <param name="value">The value that is used to fill the object.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.ObjectDataAdapter.FillMember(System.Object,Chili.Opf3.Mapping.IMemberInfo,System.Object)">
            <summary>
            Fills one single member of the persistent object with data.
            </summary>
            <param name="obj">Object that is populated with the data from the current item in the DataReader.</param>
            <param name="value">The value that is used to fill the object.</param>
            <param name="info">The member info object that is used to fill the member.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.ObjectDataAdapter.FillAutoNumber(System.Object,System.Object)">
            <summary>
            Fills the persistent object's
            <see cref="P:Chili.Opf3.FieldAttribute.AutoNumber">AutoNumber</see> property with the value
            from the storage.
            </summary>
            <param name="obj">
            Object that's first <see cref="P:Chili.Opf3.FieldAttribute.AutoNumber">AutoNumber</see>
            property is filled with the value.
            </param>
            <param name="value">Value that is filled in as autonumber value.</param>
        </member>
        <member name="T:Chili.Opf3.Storages.SqlRawStorageAccess">
            <summary>
            Allows access to the raw ADO.NET storage objects.
            </summary>
            <remarks>
            This class gives access to the raw ADO.NET storage objects, created by storages that inherit from
            <see cref="T:Chili.Opf3.Storages.SqlStorageBase">SqlStorageBase</see> (all storages that access an SQL database).
            </remarks>
            <example>
                The following example shows how to use this class to get access to the raw objects.
                <code lang="CS">
            // ... Other code
             
            // Creates a new ObjectContext that uses an Oracle database as storage.
            // You should only pass an instance of the storage to your ObjectContext.
            // That's it! Nothing more. The methods of the storage are accessed
            // by the context internally.
            ObjectContext context = new ObjectContext(
                new OracleStorage("... some ConnectionString ..."));
            
            SqlRawStorageAccess raw = 
            	new SqlRawStorageAccess(context.Storage as SqlStorageBase);
            // Use the raw connection from the storage.
            IDbConnection connection = raw.GetConnection();
            // Get the raw command from the storage.
            IDbCommand command = raw.CreateCommand("select * from Foo");
            
            // ... Other code
                </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlRawStorageAccess.#ctor(Chili.Opf3.Storages.SqlStorageBase)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.SqlRawStorageAccess">SqlRawStorageAccess Class</see>.
            </summary>
            <param name="storage">The storage that's raw objects are returned.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlRawStorageAccess.GetConnection">
            <summary>
            Gets the connection of the storage. If a transaction is active
            the connection of the transaction is returned. If no transaction is active,
            a new connection is created and returned.
            </summary>
            <returns>A connection to the physical storage (database).</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlRawStorageAccess.GetCurrentTransaction">
            <summary>
            Gets the current transaction. If no transaction is active null is returned.
            </summary>
            <returns>The active transaction or null if none is active.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlRawStorageAccess.CreateCommand(System.Data.IDbConnection)">
            <summary>
            Creates a command for the storage. The specified connection is set
            as connection of the command.
            </summary>
            <param name="connection">The connection that is associated with the command.</param>
            <returns>A command object that may be executed on the storage.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlRawStorageAccess.CreateCommand">
            <summary>
            Creates a command for the storage. The current transasction and connection
            is set automatically.
            </summary>
            <returns>A command object that may be executed on the storage.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlRawStorageAccess.SetCommandProperties(System.Data.IDbCommand)">
            <summary>
            Sets the command properties.
            </summary>
            <param name="command">The command whose properties are set.</param>
            <returns></returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlRawStorageAccess.CreateCommand(System.String)">
            <summary>
            Creates a command for the storage. The current transasction and connection
            is set automatically.
            </summary>
            <param name="text">The text for the command.</param>
            <returns>A command object that may be executed on the storage.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlRawStorageAccess.CreateCommand(System.String,System.Data.IDataParameter[])">
            <summary>
            Creates a command for the storage. The current transasction and connection
            is set automatically.
            </summary>
            <param name="text">The text for the command.</param>
            <param name="parameters">The parameter for the command.</param>
            <returns>A command object that may be executed on the storage.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlRawStorageAccess.CreateCommand(Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a command for the storage. The current transaction and connection
            is set automatically.
            </summary>
            <param name="query">The query that is transformed to a command.</param>
            <returns>A command object that may be executed on the storage.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlRawStorageAccess.CreateParameter(System.String@,System.Object,System.Type)">
            <summary>
            Creates a parameter for the storage.
            </summary>
            <param name="name">The name of the parameter. Is passed as reference, because may be changed by the storage!</param>
            <param name="value">The value of the parameter.</param>
            <param name="type">The type of the value of the parameter. This is especially required if the parameter value is null.</param>
            <returns>An instance of a parameter that may be used with a command.</returns>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.OECondition">
            <summary>
            Represents a condition in the OPath statement. 
            </summary>
            <remarks>
            Conditions in a OPath statement are converted to this class when OPath is compiled.
            A condition contains an <see cref="T:Chili.Opf3.Query.OPathParser.OEMember">OEMember</see>, an <see cref="T:Chili.Opf3.Query.OPathParser.OEComparer">OEComparer</see>
            and an <see cref="T:Chili.Opf3.Query.OPathParser.OEParameter">OEParameter</see>. Those items are stored into the Item collection of the
            item.
            </remarks>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.OEItem">
            <summary>
            Represents an Item of the <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see>.
            </summary>
            <remarks>
            All items that are in the Items collection of the 
            <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see> are inherited from this class.
            </remarks>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.OEItem.Items">
            <summary>
            Returns the list of items. Each <see cref="T:Chili.Opf3.Query.OPathParser.OEItem">OEItem</see> can contain a list of other
            <see cref="T:Chili.Opf3.Query.OPathParser.OEItem">OEItem</see>.
            </summary>
            <value>List of items derived from <see cref="T:Chili.Opf3.Query.OPathParser.OEItem">OEItem</see>.</value>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OECondition.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.OPathParser.OECondition">OECondition Class</see>.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.OEComparer">
            <summary>
            Represents a comparer in the OPath statement. 
            </summary>
            <remarks>
            Comparer in a OPath statement are converted to this class when OPath is compiled.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OEComparer.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.OPathParser.OEComparer">OEComparer Class</see>.
            </summary>
            <param name="value">Value of the command.</param>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.OEComparer.Value">
            <summary>
            Returns the value of the comparer.
            </summary>
            <value>The value of the comparer.</value>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.OEBrackets">
            <summary>
            Represents a bracket in the OPath statement. 
            </summary>
            <remarks>
            Brackets in a OPath statement are converted to this class when OPath is compiled.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OEBrackets.#ctor">
            <summary>
            Creates a new instance of the 
            <see cref="T:Chili.Opf3.Query.OPathParser.OEBrackets">OEBrackets Class</see>.
            </summary>
        </member>
        <member name="T:Chili.Opf3.ISelfContainingObject">
            <summary>
            A class implementing this interface is self containing (manages the state by
            itself) and can be remoted or persisted to any kind of device without problems.
            </summary>
            <remarks>
            	<para>This interface is implemented by classes that are (or should be) independent
                of any <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance.</para>
            	<para>Usually a class "lives" within one
                <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>, as that context internally
                holds the state (loaded, saved, deleted, marked for deletion, ..) of the object. By
                implementing this interface the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>
                saves that information directly in the object and does not hold it internally. Each
                time the object is saved (or any other thing is done on the object that requires
                the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>) the context gets the data
                directly from the object itself. This makes it independent from the
                <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>.</para>
            	<para>Usually this interface is implemented by classes that are remoted, serialized
                or persisted to any kind of device (other then the storage). It could be optionally
                implemented by any persistent object to have it independent from its
                <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>.</para>
            </remarks>
            <example>
                The following example shows a class that implements the interface. 
                <code lang="CS">
            [Persistent("USER")]
            public class User : ISelfContainingObject
            {
                private ObjectInfo _objectInfo = null;
             
                public ObjectInfo ObjectInfo
                {
                    get { return _objectInfo; }
                    set { _objectInfo = value; }
                }
             
                // ... Other properties and fields.
            }
                </code>
            </example>
        </member>
        <member name="P:Chili.Opf3.ISelfContainingObject.ObjectInfo">
            <summary>
            Returns the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object that contains all
            information required to make the persistent object
            <see cref="T:Chili.Opf3.ObjectContext">independent from any ObjectContext</see>.
            </summary>
            <value>
            	<see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object that holds the status
            information of the persistent object.
            </value>
        </member>
        <member name="T:Chili.Opf3.Mapping.PropertySetDelegate">
            <summary>
            This delegate is used to invoked the dynamic method that returns the value of a mapped
            property.
            </summary>
            <param name="obj">The persistent object whose dynamic method is invoked.</param>
            <param name="value">The value that is set.</param>
        </member>
        <member name="T:Chili.Opf3.ChecksumBuilder">
            <summary>
            This class is used to generate the checksums for persistent objects.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ChecksumBuilder.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ChecksumBuilder">ChecksumBuilder Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ChecksumBuilder.CalculatePersistentChecksum(System.Object)">
            <summary>
            Calculates the checksum for the given persistent object.
            </summary>
            <param name="obj">Object thats checksum is calculated.</param>
        </member>
        <member name="M:Chili.Opf3.ChecksumBuilder.ToChecksum">
            <summary>
            Converts the content of the builder to a checksum.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ChecksumBuilder.AddMember(System.Object,Chili.Opf3.FieldAttribute)">
            <summary>
            Adds the member data to the checksum data. 
            </summary>
            <param name="value">Value that is added to the checksum data.</param>
            <param name="fieldAttribute">The <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> associated with the member.</param>
        </member>
        <member name="M:Chili.Opf3.ChecksumBuilder.EqualsChecksum(System.Byte[],System.Byte[])">
            <summary>
            Checks if two checksums are equal.
            </summary>
            <param name="checksum1"></param>
            <param name="checksum2"></param>
        </member>
        <member name="T:Chili.Opf3.ChecksumBuilder.ByteArrayBuilder">
            <summary>
            Builds an array of bytes.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ChecksumBuilder.ByteArrayBuilder.Append(System.String)">
            <summary>
            Appends a string to the byte array.
            </summary>
            <param name="value">The value to be added.</param>
        </member>
        <member name="M:Chili.Opf3.ChecksumBuilder.ByteArrayBuilder.Append(System.Byte[])">
            <summary>
            Appends the bytes to the byte array.
            </summary>
            <param name="value">The value to be added.</param>
        </member>
        <member name="M:Chili.Opf3.ChecksumBuilder.ByteArrayBuilder.ToByteArray">
            <summary>
            Returns a byte array.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampConcurrencyManager">
             <summary>
             Implements the time stamp concurrency manager. This class uses a time stamp check
             to discover if somebody else has changed the object in the meantime.
             </summary>
             <remarks>
             This class implements a time stamp check that is used to validate an object against the storage.
             It checks if somebody else changed the object in the meantime (while it has been in memory)
             and informs the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> whether a problem has
             been encountered.
             </remarks>
             <example>
             The following example shows the usage of the class in your application.
             <code lang="CS">
             [Persistent("USER")]
             public class User
             {
                 // ... Other code of the class.
            
                 [TimeStamp]
            		[Field("TIME_STAMP")]
                 public string TimeStamp
                 {
                     // ... code of the property.
                 }
             }
            
             // ... Other code
             
             // Creates a new ObjectContext that uses an MsSql Server as storage.
             ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", "localhost", "application"));
             // Set the time stamp concurrency manager. The ObjectContext uses it from 
             // now on to check the concurrency.
             context.ConcurrencyManager = new TimeStampConcurrencyManager();
             
             // ... Other code
             </code>
             </example>
        </member>
        <member name="T:Chili.Opf3.Concurrency.IConcurrencyManager">
            <summary>
            Interface implemented by classes that validate an object against the storage.
            </summary>
            <remarks>
            This interface is implemented by classes that validate an object against the storage.
            They check if somebody else changed the object in the meantime (while it has been in memory)
            and inform the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> whether a problem has
            been encountered.
            A class that implements this interface is the 
            <see cref="T:Chili.Opf3.Concurrency.Md5.Md5ConcurrencyManager">Md5ConcurrencyManager</see>.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Concurrency.IConcurrencyManager.OnBeforeUpdate``1(``0,Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs)">
            <summary>
            Invoked before the update operation of the object.
            </summary>
            <param name="obj">Persistent object that is validated.</param>
            <param name="e">EventArgs of the current routine.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.IConcurrencyManager.OnAfterUpdate``1(``0,Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs)">
            <summary>
            Invoked after the update operation of the object.
            </summary>
            <param name="obj">Persistent object that is validated.</param>
            <param name="e">EventArgs of the current routine.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.IConcurrencyManager.OnBeforeInsert``1(``0,Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs)">
            <summary>
            Invoked before the insert operation of the object.
            </summary>
            <param name="obj">Persistent object that is validated.</param>
            <param name="e">EventArgs of the current routine.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.IConcurrencyManager.OnAfterInsert``1(``0,Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs)">
            <summary>
            Invoked after the insert operation of the object.
            </summary>
            <param name="obj">Persistent object that is validated.</param>
            <param name="e">EventArgs of the current routine.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.IConcurrencyManager.OnBeforeDelete``1(``0,Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs)">
            <summary>
            Invoked before the delete operation of the object.
            </summary>
            <param name="obj">Persistent object that is validated.</param>
            <param name="e">EventArgs of the current routine.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.IConcurrencyManager.OnAfterLoad``1(``0,Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs)">
            <summary>
            Invoked after the load operation of the object.
            </summary>
            <param name="obj">Persistent object that is validated.</param>
            <param name="e">EventArgs of the current routine.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.TimeStamp.TimeStampConcurrencyManager.OnBeforeUpdate``1(``0,Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs)">
            <summary>
            Invoked before the update operation of the object.
            </summary>
            <param name="obj">Persistent object that is validated.</param>
            <param name="e">EventArgs of the current routine.</param>
            <exception cref="T:Chili.Opf3.Concurrency.ConcurrencyException">A concurrency problem has been encountered.</exception>
        </member>
        <member name="M:Chili.Opf3.Concurrency.TimeStamp.TimeStampConcurrencyManager.OnAfterUpdate``1(``0,Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs)">
            <summary>
            Invoked after the update operation of the object.
            </summary>
            <param name="obj">Persistent object that is validated.</param>
            <param name="e">EventArgs of the current routine.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.TimeStamp.TimeStampConcurrencyManager.OnBeforeInsert``1(``0,Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs)">
            <summary>
            Invoked before the insert operation of the object.
            </summary>
            <param name="obj">Persistent object that is validated.</param>
            <param name="e">EventArgs of the current routine.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.TimeStamp.TimeStampConcurrencyManager.OnAfterInsert``1(``0,Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs)">
            <summary>
            Invoked after the insert operation of the object.
            </summary>
            <param name="obj">Persistent object that is validated.</param>
            <param name="e">EventArgs of the current routine.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.TimeStamp.TimeStampConcurrencyManager.OnBeforeDelete``1(``0,Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs)">
            <summary>
            Invoked before the delete operation of the object.
            </summary>
            <param name="obj">Persistent object that is validated.</param>
            <param name="e">EventArgs of the current routine.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.TimeStamp.TimeStampConcurrencyManager.OnAfterLoad``1(``0,Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs)">
            <summary>
            Invoked after the load operation of the object.
            </summary>
            <param name="obj">Persistent object that is validated.</param>
            <param name="e">EventArgs of the current routine.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.TimeStamp.TimeStampConcurrencyManager.GetTimeStampMember(System.Object)">
            <summary>
            Returns the member of the object that holds the time stamp.
            </summary>
            <param name="obj">The object that is searched for the time stamp.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.TimeStamp.TimeStampConcurrencyManager.AddMemberInfo(System.Type,Chili.Opf3.Mapping.IMemberInfo)">
            <summary>
            This routine adds the meta info object for the given type to the dictionary.
            </summary>
            <param name="type">The type of the object for that the meta info object is added.</param>
            <param name="memberInfo">The member info object of the current member.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.TimeStamp.TimeStampConcurrencyManager.GetMemberInfoFromDictionary(System.Type)">
            <summary>
            Gets the meta info object for the given type from the dictionary.
            </summary>
            <param name="type">The type for that the meta info object is searched.</param>
        </member>
        <member name="T:Chili.Opf3.Caching.ICacheManager">
            <summary>
            Interface implemented by classes that provide a caching algorithm for persistent objects.
            </summary>
            <remarks>
            This interface is implemented by classes that provide a caching algorithm for persistent objects.
            The cache holds instance of loaded persistence objects until they expire. On a load operation the 
            cache is queried to see if it holds still an instance of a persistent object that is due to load.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Caching.ICacheManager.GetObjectReader``1(Chili.Opf3.ObjectContext,Chili.Opf3.Query.IQuery)">
            <summary>
            Gets an instance of the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> for the given query.
            </summary>
            <param name="context">The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> used to load the reader.</param>
            <param name="query">A class that implements the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.ICacheManager.AddPersistentObject(System.Object)">
            <summary>
            Adds a persistent object to the cache.
            </summary>
            <param name="obj">The object that is added.</param>
        </member>
        <member name="T:Chili.Opf3.IPersistentQueriesProvider">
            <summary>
            An interface that is implemented to create custom queries for a persistent object's insert,
            update and delete operations.
            </summary>
            <remarks>
            <para>
            This interface is implemented to create custom queries for a persistent's insert, update and 
            delete operations. The interface contains a method for each operation: The class may return an own query 
            or return the query that is created by the framework. It's not required that a custom query is created for
            each operation.
            </para>
            <para>
            It's also required to specify the persistent's type that this class is created for! Each class can only be used for
            one given persistent object type.
            </para>
            </remarks>
            <example>This example shows how to implement the IPersistentQueriesProvider interface and how to register
            it with the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>.
            <code lang="CS">
            public sealed class CallQueriesProvider : IPersistentQueriesProvider
            {
                public IQuery GetInsertQuery(IStorage storage, object persistent)
                {
                    // Return the null to have the framework create the query.
                    return null;
                }
            
                public IQuery GetUpdateQuery(IStorage storage, IQuery query, object persistent)
                {
                    Call c = (Call)persistent;
                    // Check if the storage is the MsSqlStorage.
                    if (storage is MsSqlStorage)
                    {
                        // If that's true, create a custom query and return that query.
                        return new SqlQuery("UPDATE CALLS SET DURATION = {0} WHERE ID = {1}", c.Duration, c.ID);
                    }
                    // Otherwise return null.
                    return null;
                }
            
                public IQuery GetDeleteQuery(IStorage storage, IQuery query, object persistent)
                {
                    // Return the null to have the framework create the query.
                    return null;
                }
            
                // Return the type of persistent this class has been created for.
                public Type PersistentType
                {
                    get { return typeof(Call); }
                }
            }
            
            // ... Other code.
            
            // Register the provider with the ObjectContext instance.
            context.PersistentQueriesProviders.Add(new CallQueriesProvider());
            </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.IPersistentQueriesProvider.GetInsertQuery(Chili.Opf3.Storages.IStorage,System.Object)">
            <summary>
            Creates and returns a query for the persistent's insert operation; or null if the query generated by the framework should be used.
            </summary>
            <param name="storage">The storage the query is created for. By checking the storage type different optimized queries may be created.</param>
            <param name="persistent">The persistent object that's going to be inserted.</param>
            <returns>An class that implements the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface; or null if the query generated by the framework should be used.</returns>
        </member>
        <member name="M:Chili.Opf3.IPersistentQueriesProvider.GetUpdateQuery(Chili.Opf3.Storages.IStorage,System.Object)">
            <summary>
            Creates and returns a query for the persistent's update operation; or null if the query generated by the framework should be used.
            </summary>
            <param name="storage">The storage the query is created for. By checking the storage type different optimized queries may be created.</param>
            <param name="persistent">The persistent object that's going to be updated.</param>
            <returns>An class that implements the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface; or null if the query generated by the framework should be used.</returns>
        </member>
        <member name="M:Chili.Opf3.IPersistentQueriesProvider.GetDeleteQuery(Chili.Opf3.Storages.IStorage,System.Object)">
            <summary>
            Creates and returns a query for the persistent's delete operation; or null if the query generated by the framework should be used.
            </summary>
            <param name="storage">The storage the query is created for. By checking the storage type different optimized queries may be created.</param>
            <param name="persistent">The persistent object that's going to be deleted.</param>
            <returns>An class that implements the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface; or null if the query generated by the framework should be used.</returns>
        </member>
        <member name="P:Chili.Opf3.IPersistentQueriesProvider.PersistentType">
            <summary>
            Gets the type of the persistent object.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Storages.StorageException">
            <summary>
            Represents the base exception for all exceptions that are thrown by the storage
            classes.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageException.#ctor(Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.StorageException">StorageException
            Class</see>.
            </summary>
            <param name="query">Query that has been executed before the exception has been thrown.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageException.#ctor(System.String,Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.StorageException">StorageException
            Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="query">Query that has been executed before the exception has been thrown.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageException.#ctor(System.String,System.Exception,Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.StorageException">StorageException
            Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="inner">The exception that caused the current exception.</param>
            <param name="query">Query that has been executed before the exception has been thrown.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Storages.StorageException">StorageException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Restores the objects data after serialization.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Storages.StorageException.Query">
            <summary>Query that has been executed before the exception has been thrown.</summary>
            <value>
            Returns the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that has been executed
            before the exception has been thrown.
            </value>
        </member>
        <member name="T:Chili.Opf3.Storages.OleDb.AccessStorage">
            <summary>Storage class that encapsulates a pyhsical Ms Access database.</summary>
            <remarks>
            	<para>This class encapsulates a physical Ms Access database. It is used to access to
                an Oracle database that is installed somewhere on your or on a remote machine. The storage
                implements the basic interfaces, such as
                <see cref="T:Chili.Opf3.Storages.IStorage">IStorage</see> for the basic storage IO
                functinality and
                <see cref="T:Chili.Opf3.Storages.ITransactionStorage">ITransactionStorage</see> for the
                transaction management.</para>
            	<para><b>Attention:</b> You should not access the methods of the storage directly
                but instead register the storage with your instances of the
                <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>. The
                <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> accesses the methods internally
                to get the objects from the storage.</para>
            </remarks>
            <example>
            The following example shows how you should use the Ms Access storage in your 
            applications.
            <code lang="CS">
            // ... Other code
            
            // Creates a new ObjectContext that uses an Ms Access database as storage.
            // You should only pass an instance of the storage to your ObjectContext.
            // That's it! Nothing more. The methods of the storage are accessed
            // by the context internally.
            ObjectContext context = new ObjectContext(
            	new AccessStorage("... some ConnectionString ..."));
            
            // ... Other code
            </code>
            </example>
        </member>
        <member name="T:Chili.Opf3.Storages.OleDb.OleDbStorage">
            <summary>Storage class that encapsulates a pyhsical OleDb database.</summary>
            <remarks>
            	<para>This class encapsulates a physical OleDb database. It is used to access to
                an Oracle database that is installed somewhere on your or on a remote machine. The storage
                implements the basic interfaces, such as
                <see cref="T:Chili.Opf3.Storages.IStorage">IStorage</see> for the basic storage IO
                functinality and
                <see cref="T:Chili.Opf3.Storages.ITransactionStorage">ITransactionStorage</see> for the
                transaction management.</para>
            	<para><b>Attention:</b> You should not access the methods of the storage directly
                but instead register the storage with your instances of the
                <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>. The
                <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> accesses the methods internally
                to get the objects from the storage.</para>
            </remarks>
            <example>
            The following example shows how you should use the OleDb storage in your 
            applications.
            <code lang="CS">
            // ... Other code
            
            // Creates a new ObjectContext that uses an OleDb database as storage.
            // You should only pass an instance of the storage to your ObjectContext.
            // That's it! Nothing more. The methods of the storage are accessed
            // by the context internally.
            ObjectContext context = new ObjectContext(
            	new OleDbStorage("... some ConnectionString ..."));
            
            // ... Other code
            </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.Storages.OleDb.OleDbStorage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.OleDb.OleDbStorage">OleDbStorage
            Class</see>.
            </summary>
            <param name="connectionString">
            Specifies a string that contains the information (for ADO.NET) to connect to
            storage.
            </param>
        </member>
        <member name="M:Chili.Opf3.Storages.OleDb.OleDbStorage.ExecuteCommand(Chili.Opf3.Query.IQuery)">
            <summary>
            Executes a command on the storage that does not expect any results. It the method
            returns an argument it is used by the framework to set the
            <see cref="P:Chili.Opf3.FieldAttribute.AutoNumber">AutoNumber</see> property of the persistent
            object.
            </summary>
            <param name="query">
            	<see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is compiled and executed on the
            storage.
            </param>
            <exception cref="T:Chili.Opf3.Storages.StorageConstraintException">A constraint of the storage 
            has been violated.</exception>
            <exception cref="T:Chili.Opf3.Storages.ForeignKeyViolationException">A foreign key in the storage 
            has been violated.</exception>
            <exception cref="T:Chili.Opf3.Storages.PrimaryKeyViolationException">A duplicate primary key 
            is inserted in the storage.</exception>
            <exception cref="T:Chili.Opf3.Storages.PrimaryKeyViolationException">An index has been violated.</exception>
            <exception cref="T:Chili.Opf3.Storages.StorageException">Any other unexpected storage exception.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.OleDb.OleDbStorage.ExecuteReader``1(Chili.Opf3.ObjectContext,Chili.Opf3.Query.IQuery)">
            <summary>
            Executes and compiles the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> and returns
            an <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> with the resultsset.
            </summary>
            <param name="context">
            	<see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> that is connected with the
            <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see>.
            </param>
            <param name="query">
            	<see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is compiled and executed on the
            storage.
            </param>
            <exception cref="T:Chili.Opf3.Storages.StorageException">An unexpected storage exception has happened.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.OleDb.OleDbStorage.CreateConnection">
            <summary>Creates a new storage dependent connection object.</summary>
            <returns>Returns an instance of a storage dependent connection object.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.OleDb.OleDbStorage.CreateCommand">
            <summary>Creates a new storage dependent command object.</summary>
            <returns>Returns an instance of a storage dependent command object.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.OleDb.OleDbStorage.CreateParameter(System.Int32,System.String@,System.Object,System.Type)">
            <summary>Creates and populates a storage dependent parameter with data.</summary>
            <returns>
            The name of the storage parameter should be set to a valid parameter name (one
            that is supported by the storage) while creating the parameter.
            </returns>
            <param name="index">Index of the storage parameter.</param>
            <param name="name">Name of the storage parameter.</param>
            <param name="value">Value of the storage parameter.</param>
            <param name="type">The type of the value argument. This information is useful if the value is null.</param>
            <exception cref="T:System.ArgumentNullException">Name is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.OleDb.OleDbStorage.GetValidFieldName(System.String)">
            <summary>Transforms the parameter to a valid field.</summary>
            <returns>Returns a string that represents a valid field name.</returns>
            <remarks>
            This method returns a field name that is valid for the current storage. For some
            storages it is a better choice to start each field name with a '[' and end with a ']'
            (Ms Access) - This method could wrap each field name passed with '[]'.
            </remarks>
            <param name="name">Name for the field that is transformed.</param>
            <exception cref="T:System.ArgumentNullException">Name is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.OleDb.OleDbStorage.GetValidEntityName(System.String)">
            <summary>
            Transforms the name of the entity to a valid entity name.
            </summary>
            <returns>Returns a string that represents a valid entity name.</returns>
            <remarks>
            This method returns an entity name that is valid for the current storage. For
            some storages it is a better choice to start each entity name with a '[' and end with a
            ']' (Ms Access) - This method could wrap each entity name passed with '[]'.
            </remarks>
            <param name="name">Name of the entity.</param>
            <exception cref="T:System.ArgumentNullException">Name is null.</exception>
        </member>
        <member name="T:Chili.Opf3.Storages.ICustomDataTypesStorage">
             <summary>This interface is implemented by a storage that does not support all simple types of the .NET framework.</summary>
             <remarks>
             A storage that does not natively support all simple types of the .NET framework has to implement this interface. 
             It allows the storage to change the type that comes from the storage to a type that is supported by the .NET framework
             and to change it back to a type that is supported by the storage.
             </remarks>
             <example>
             Firebird does, for example, not support the .NET type Boolean. Therefore a field with type integer is used
             in the database. By implementing this interface the integer from the database is converted to an boolean 
             (during load of the object). When saving the object the boolean of the object is converted back to an integer.
             <code lang="C#">
             object ICustomDataTypesStorage.ChangeFromDataType(object obj, Type targetType)
             {
                 if (!(obj is bool) &amp;&amp; targetType == typeof(bool))
                     return Convert.ToBoolean(obj);
                 return obj;
             }
            
             object ICustomDataTypesStorage.ChangeToDataType(object obj)
             {
                 if (obj is bool)
                     return Convert.ToInt32((bool)obj);
                 return obj;
             }
             </code>
             </example>
        </member>
        <member name="M:Chili.Opf3.Storages.ICustomDataTypesStorage.ChangeFromDataType(System.Object,System.Type)">
            <summary>
            Allows to convert from the type in the storage to the target type of the object.
            </summary>
            <param name="value">Value loaded from the storage.</param>
            <param name="targetType">The type of the member of the persistent object.</param>
            <returns>The value converted to the target type.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.ICustomDataTypesStorage.ChangeToDataType(System.Object)">
            <summary>
            Allows to convert from the type of the object to a type that is supported by the storage.
            </summary>
            <param name="value">Value from the persistent object that is converted to a type supported by the storage.</param>
            <returns>The value converted to a type that is supported by the storage.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.OleDb.AccessStorage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.OleDb.AccessStorage">AccessStorage
            Class</see>.
            </summary>
            <param name="connectionString">
            Specifies a string that contains the information (for ADO.NET) to connect to
            storage.
            </param>
        </member>
        <member name="M:Chili.Opf3.Storages.OleDb.AccessStorage.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.OleDb.AccessStorage">AccessStorage
            Class</see>.
            </summary>
            <param name="path">Specifies the path of the database.</param>
            <param name="fileName">Specifies the file name of the database.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.OleDb.AccessStorage.ExecuteCommand(Chili.Opf3.Query.IQuery)">
            <summary>
            Executes a command on the storage that does not expect any results. It the method
            returns an argument it is used by the framework to set the
            <see cref="P:Chili.Opf3.FieldAttribute.AutoNumber">AutoNumber</see> property of the persistent
            object.
            </summary>
            <param name="query">
            	<see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is compiled and executed on the
            storage.
            </param>
            <exception cref="T:Chili.Opf3.Storages.StorageConstraintException">A constraint of the storage 
            has been violated.</exception>
            <exception cref="T:Chili.Opf3.Storages.ForeignKeyViolationException">A foreign key in the storage 
            has been violated.</exception>
            <exception cref="T:Chili.Opf3.Storages.PrimaryKeyViolationException">A duplicate primary key 
            is inserted in the storage.</exception>
            <exception cref="T:Chili.Opf3.Storages.PrimaryKeyViolationException">An index has been violated.</exception>
            <exception cref="T:Chili.Opf3.Storages.StorageException">Any other unexpected storage exception.</exception>
            <exception cref="T:System.ArgumentNullException">Query is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.OleDb.AccessStorage.CompactDatabase">
            <summary>
            Repairs and compresses the database using the Ms Access build in functionalities.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">The database file couldn't be found.</exception>
            <exception cref="T:System.IO.IOException">The database file has been read-only.</exception>
        </member>
        <member name="M:Chili.Opf3.Storages.OleDb.AccessStorage.Chili#Opf3#Storages#ICustomDataTypesStorage#ChangeFromDataType(System.Object,System.Type)">
            <summary>
            Allows to convert from the type in the storage to the target type of the object.
            </summary>
            <param name="value">Value loaded from the storage.</param>
            <param name="targetType">The type of the member of the persistent object.</param>
            <returns>The value converted to the target type.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.OleDb.AccessStorage.Chili#Opf3#Storages#ICustomDataTypesStorage#ChangeToDataType(System.Object)">
            <summary>
            Allows to convert from the type of the object to a type that is supported by the storage.
            </summary>
            <param name="value">Value from the persistent object that is converted to a type supported by the storage.</param>
            <returns>The value converted to a type that is supported by the storage.</returns>
        </member>
        <member name="T:Chili.Opf3.Storages.MsSql.MsSqlSubTransaction">
            <summary>
            Class that provides a sub transaction object for the <see cref="T:Chili.Opf3.Storages.MsSql.MsSqlStorage">MsSqlStorage</see> class.
            </summary>
            <remarks>
            This class provides a sub transaction object for the <see cref="T:Chili.Opf3.Storages.MsSql.MsSqlStorage">MsSqlStorage</see> class.
            It is returned by the <see cref="M:Chili.Opf3.Storages.MsSql.MsSqlStorage.StartTransaction(System.Data.IsolationLevel)">StartTransaction</see> methods of 
            the class.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlSubTransaction.#ctor(System.Data.SqlClient.SqlTransaction)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.MsSql.MsSqlSubTransaction">MsSqlSubTransaction Class</see>.
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlSubTransaction.Rollback">
            <summary>
            Rolls the current transaction back.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlSubTransaction.Commit">
            <summary>
            Commits the current transaction.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Storages.MsSql.MsSqlSubTransaction.Active">
            <summary>
            Returns whether the transaction is active.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Query.CompiledQuery">
            <summary>This class represents a storage dependent query.</summary>
            <remarks>
            	<para>This query is storage dependent. It is created from any other query type and
                can only be executed on the storage it has been compiled for. If you create a
                CompiledQuery for MsSql Server (for example) you can execute the query only on a
                MsSql Server storage.</para>
            	<para>A CompiledQuery is generated by invoking the
                <see cref="M:Chili.Opf3.Query.IQuery.ToCompiledQuery(Chili.Opf3.Storages.IStorage)">ToCompiledQuery</see> routine of a
                class that implements the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface.</para>
            </remarks>
            <example>
                The following example shows how to use the <see cref="T:Chili.Opf3.Query.OPath">OPath</see> and
                <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see> class to create a CompiledQuery
                from a <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see> .
                <code lang="CS">
            // ... Other code
             
            // Create an ObjectQuery for User persistent objects and
            // add a condition to load only user with a name that contains "hri"
            ObjectQuery&lt;User&gt; objectQuery = 
            new ObjectQuery&lt;User&gt;("UserName like {0}", "%hri%");
             
            // Create an ObjectExpression by parsing the ObjectQuery.
            ObjectExpression objectExpresion = OPath.Parse(objectQuery);
             
            // Compile the ObjectExpression to get a CompildQuery.
            // You have to set the storage that is used to compile the query.
            CompiledQuery compiled = objectExpression.ToCompiledQuery(ObjectContext.Storage);
             
            // ... Other code
                </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.Query.CompiledQuery.#ctor(System.Data.IDbCommand,Chili.Opf3.Query.QueryTypes)">
            <summary>
            <para>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery
            Class</see>.
            </para>
            <para>
            <b>Attention:</b> Don't create a CompiledQuery in your application. This constructor
            is only required for some storage classes. Use <see cref="M:Chili.Opf3.Query.IQuery.ToCompiledQuery(Chili.Opf3.Storages.IStorage)">ToCompiledQuery</see>
            instead.
            </para>
            </summary>
            <param name="command">Storage dependent command that is executed on the storage.</param>
            <param name="queryType">The <see cref="T:Chili.Opf3.Query.QueryTypes">QueryType</see> of the 
            <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see>.</param>
            <exception cref="T:System.ArgumentNullException">Command is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Query.CompiledQuery.ToString">
            <summary>
            Gets a string representation of the class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chili.Opf3.Query.CompiledQuery.ToCompiledQuery(Chili.Opf3.Storages.IStorage)">
            <summary>
            Converts the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> to an
            <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see> that is then executed on a
            specific <see cref="T:Chili.Opf3.Storages.IStorage">storage</see>.
            </summary>
            <returns>
            This method is only implemented by the
            <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see> class since the class implements the
            <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface. The method returns the query itself.
            </returns>
            <param name="storage">
            Class that implements the <see cref="T:Chili.Opf3.Storages.IStorage">IStorage</see>
            interface. The query is executed on that storage.
            </param>
        </member>
        <member name="P:Chili.Opf3.Query.CompiledQuery.Command">
            <summary>
            Returns the storage specific command associated with the
            <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see>.
            </summary>
            <value>A storage dependent command object.</value>
        </member>
        <member name="P:Chili.Opf3.Query.CompiledQuery.AutoNumberItems">
            <summary>
            Specifies the autonumber collection that contains the properties and 
            <see cref="T:Chili.Opf3.FieldAttribute">FieldAttributes</see> of the persistent object that is represented
            by this query.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Query.CompiledQuery.Timeout">
            <summary>
            Specifies the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <value>An integer that specifies the wait time in seconds.</value>
            <exception cref="T:System.ArgumentException">Value is lower then zero.</exception>
        </member>
        <member name="P:Chili.Opf3.Query.CompiledQuery.QueryType">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Query.QueryTypes">QueryType</see> of the CompiledQuery.
            </summary>
            <value>
            A member of the <see cref="T:Chili.Opf3.Query.QueryTypes">QueryType</see>
            enumeration.
            </value>
        </member>
        <member name="T:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection">
            <summary>
            Contains <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperties</see> that 
            are used to save semi-structured data in the storage.
            </summary>
            <remarks>
            <para>
            This class contains a set of 
            <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperties</see> allowing
            to extend dynamically an entity in the storage. The DynamicPropertiesContainer is set as type
            of property in the persistent object and that property is then mapped (using the 
            <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see>) to a field in the storage that can contain
            xml strings. 
            </para>
            <para>
            <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperties</see> are saved
            to that field as xml string and restored after load. This feature allows to extend the entity
            dynamically. The user of the final program can theirfore add new fields to extend the functionality 
            of the program.
            </para>
            </remarks>
            <example>
            The following example shows how to use the DynamicPropertiesContainer in your application.
            <code lang="CS">
            [Persistent("USER")]
            public class User
            {
            	private DynamicPropertiesCollection _dyn = 
            		new DynamicPropertiesCollection();
            
            	[Field("DYN_PROPS")]
            	public DynamicPropertiesCollection DynProps
            	{
            		get { return _dynProps; }
            		set { _dynProps = value; }
            	}
            
            	// ... Other properties and code
            }
            
            // ... Other code
            
            // Create a new User object.
            User user = new User();
            
            // Create the DynamicProperty and set a value.
            DynamicProperty prop = new DynamicProperty("PLZ", typeof(string));
            prop.Value = "1234";
            
            // Add the DynamicProperty to the container.
            user.DynProps.Add(prop);
            
            // ... Other code
            
            // Persist the object.
            context.PersistChanges(user);
            
            // Get the DynamicProperty with the name "PLZ"
            // and get the value as string.
            PLZLabel.Text = user.DynProps["PLZ"].ToString();
            </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection">DynamicPropertiesCollection Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.Chili#Opf3#IUserDefinedType#FromSimpleDataType(System.Object)">
            <summary>
            Populates the type that implements the interface (a type that can't be directly saved or 
            loaded from the storage) with data from the storage.
            </summary>
            <param name="value">The simple type representation in the storage (for example an xml string).</param>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.Chili#Opf3#IUserDefinedType#ToSimpleDataType">
            <summary>
            Converts the user-defined type to a type that can be persisted to the storage. You could
            return here for example an xml string or something else that can be saved to the storage.
            </summary>
            <returns>
            The object converted to a simple type that is saved to the storage.
            </returns>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.IndexOf(Chili.Opf3.DynamicProperties.DynamicProperty)">
            <summary>
            Returns the zero-based index of the first occurrence of a value in the container
            or in a portion of it.
            </summary>
            <param name="item">Item that's index in the container is returned.</param>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.Insert(System.Int32,Chili.Opf3.DynamicProperties.DynamicProperty)">
            <summary>
            Inserts an element into the container at the specified index.
            </summary>
            <param name="index">Index where the item is inserted.</param>
            <param name="item">Item that is inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is not a valid index in the 
            <see cref="T:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection">DynamicPropertiesCollection</see>.</exception>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">Index of the item that is removed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is not a valid index in the 
            <see cref="T:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection">DynamicPropertiesCollection</see>.</exception>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.Add(Chili.Opf3.DynamicProperties.DynamicProperty)">
            <summary>
            Adds an item to the container.
            </summary>
            <param name="item">Item that is added to the container.</param>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.Clear">
            <summary>
            Removes all items from the container.
            </summary>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.Contains(Chili.Opf3.DynamicProperties.DynamicProperty)">
            <summary>
            Determines whether the container contains a specific value.
            </summary>
            <param name="item">Item that is searched for.</param>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.CopyTo(Chili.Opf3.DynamicProperties.DynamicProperty[],System.Int32)">
            <summary>
            Copies the elements of the container to an array, starting at a particular index.
            </summary>
            <param name="array">Array that is populated with data from the container.</param>
            <param name="arrayIndex">Index where to start.</param>
            <exception cref="T:System.ArgumentNullException">Array is null.</exception>
            <exception cref="T:System.ArgumentException">Array is multidimensional, array does not have zero-based
            indexing, the number of elements in the source is greater than the number of elements that the 
            destination array can contain or type T cannot be cast automatically to the type of the destination
            array.</exception>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.Remove(Chili.Opf3.DynamicProperties.DynamicProperty)">
            <summary>
            Removes the first occurrence of a specific object from the container.
            </summary>
            <param name="item">Item that's first occurence is removed.</param>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the container.
            </summary>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the container.
            </summary>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.AddOrSet(System.Type,System.String,System.Object)">
            <summary>
            Sets the value of element with the specified Identifier. If the elements dosent't exist create it
            </summary>
            <param name="id">Identifier of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>.</param>
            <param name="type">The type of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>.</param>
            <param name="value">Value of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>.</param>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.CheckDynamicType(Chili.Opf3.DynamicProperties.DynamicProperty)">
            <summary>
            Checks if the <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType</see> associated with the 
            <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see> should be removed.
            </summary>
            <param name="item">The <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see> that has been removed.</param>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.ParseXml">
            <summary>
            Parses the xml that comes from the storage and creates DynamicProperties.
            </summary>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.ParseDynamicProperty(System.Xml.XmlTextReader)">
            <summary>
            Parses a <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>.
            </summary>
            <param name="reader">The xml reader used to parse the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>.</param>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.ParseDynamicType(System.Xml.XmlTextReader)">
            <summary>
            Parses a <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType</see>.
            </summary>
            <param name="reader">The xml reader used to parse the <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType</see>.</param>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.ParseValues(System.Xml.XmlTextReader,Chili.Opf3.DynamicProperties.DynamicType)">
            <summary>
            Parses the values of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType</see>.
            </summary>
            <param name="reader">The xml reader used to get the data from the xml document.</param>
            <param name="type">The <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType</see> filled with the values.</param>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.CreateXml">
            <summary>
            Creates the xml from the DynamicProperties managed by this container.
            </summary>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.CreateDynamicTypeXml(System.Xml.XmlTextWriter,Chili.Opf3.DynamicProperties.DynamicType)">
            <summary>
            Creates the xml for a <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType</see>.
            </summary>
            <param name="textWriter">The xml text writer used to create the xml.</param>
            <param name="type">The <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType</see> transformed to xml.</param>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.CreateDynamicPropertyXml(System.Xml.XmlTextWriter,Chili.Opf3.DynamicProperties.DynamicProperty)">
            <summary>
            Creates the xml for a <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>.
            </summary>
            <param name="textWriter">The xml text writer used to create the xml.</param>
            <param name="property">The <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see> transformed to xml</param>
        </member>
        <member name="P:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.Chili#Opf3#IUserDefinedType#SupportedType">
            <summary>
            Returns the type supported by the class implementing this interface. The supported type is the type
            that is returned when converting to a simple type and the type that is set when converting from the simple type.
            </summary>
        </member>
        <member name="P:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">Index of the item that is modified.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is not a valid index in the 
            <see cref="T:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection">DynamicPropertiesCollection</see>.</exception>
        </member>
        <member name="P:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.Count">
            <summary>
            Gets the number of elements contained in the container.
            </summary>
        </member>
        <member name="P:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the container is read-only.
            </summary>
        </member>
        <member name="P:Chili.Opf3.DynamicProperties.DynamicPropertiesCollection.Item(System.String)">
            <summary>
            Gets or sets the element with the specified Identifier.
            </summary>
            <param name="id">Identifier of the item that is modified.</param>
            <value>The <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see> with the given id.</value>
        </member>
        <member name="T:Chili.Opf3.Caching.AddingQueryEventArgs">
            <summary>
            EventArgs used by the AddingQuery event of the <see cref="T:Chili.Opf3.Caching.SimpleCacheManager">SimpleCacheManager</see> Class.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Caching.AddingQueryEventArgs.#ctor(Chili.Opf3.Query.IQuery,Chili.Opf3.Storages.IStorage,System.DateTime,System.TimeSpan)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Caching.AddingQueryEventArgs">AddingQueryEventArgs Class</see>.
            </summary>
            <param name="validUntil">The time until the item is valid.</param>
            <param name="query">The query that is cached.</param>
            <param name="storage">The storage that the query is executed on.</param>
            <param name="executeTimeSpan">The timespan used to execute the query.</param>
        </member>
        <member name="P:Chili.Opf3.Caching.AddingQueryEventArgs.Cancel">
            <summary>
            Gets or sets whether to cancel the add to the cache for this query.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Caching.AddingQueryEventArgs.Query">
            <summary>
            Gets the query that is added to the cache.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Caching.AddingQueryEventArgs.ExecutionTimeSpan">
            <summary>
            Gets the time span needed to execute the query.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Caching.AddingQueryEventArgs.Storage">
            <summary>
            Gets the storage that the query is executed on.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Caching.AddingQueryEventArgs.ValidUntil">
            <summary>
            Gets or sets the date and time until the query is valid.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Storages.StorageCommandBuilderCollection">
            <summary>
            This class holds a collection of classes that implement the 
            <see cref="T:Chili.Opf3.Storages.IStorageCommandBuilder">IStorageCommandBuilder</see> interface. For 
            more information about the <see cref="T:Chili.Opf3.Storages.IStorageCommandBuilder">IStorageCommandBuilder</see>
            classes look at the documentation of the interface.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageCommandBuilderCollection.#ctor(Chili.Opf3.Storages.IStorage)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Chili.Opf3.Storages.StorageCommandBuilderCollection">StorageCommandBuilderCollection Class</see>.
            </summary>
            <param name="storage">Specifies the storage associated with this collection.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageCommandBuilderCollection.GetStorageCommandBuilder(Chili.Opf3.Query.IQuery)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Storages.IStorageCommandBuilder">IStorageCommandBuilder</see> that is able to convert
            the given query.
            </summary>
            <param name="query">The query that should be transformed to a storage dependent query.</param>
            <returns>A <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see> instance that represents the storage dependent query.</returns>
            <exception cref="T:System.NotSupportedException">If no class that implements the <see cref="T:Chili.Opf3.Storages.IStorageCommandBuilder">IStorageCommandBuilder</see>
            interface and is registered with the storage can handle the given query.</exception>
        </member>
        <member name="T:Chili.Opf3.ObjectSet`1">
            <summary>
            Represents an in-memory cache of persistent objects.
            </summary>
            <remarks>
            <para>
            The ObjectSet, which is an in-memory cache of persistent objects retrieved from the storage,
            is a major component of the framework. It consists of a collection that contains objects of 
            the type specified as generic argument.
            </para>
            <para>
            The class contains also a list of removed items. Use <see cref="M:Chili.Opf3.ObjectSet`1.Remove(`0)">Remove</see> or 
            <see cref="M:Chili.Opf3.ObjectSet`1.RemoveAt(System.Int32)">RemoveAt</see> to mark objects for deletion. They are moved to the 
            <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see> and deleted the next time the ObjectSet is saved. 
            Objects on the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see> can also be moved back to the
            ObjectSet (or removed from the RemovedList) if you won't delete them.
            </para>
            <para>
            The changes on the ObjectSet are saved using the 
            <see cref="M:Chili.Opf3.ObjectContext.PersistChanges``1(``0)">PersistChanges</see> method of the 
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>.
            </para>
            </remarks>
            <example>
            The following example shows how to use the ObjectSet in an application.
            	<code lang="CS">
            [Persistent("USER")]
            public class User
            {
            	private string _name;
            
            	[Field("NAME")]
            	public string Name
            	{
            		get { return _name; }
            		set { _name = value; }
            	}
            
            	// ... Other properties and fields.
            }
            
            // ... Other code
            
            // Loads an ObjectSet of User from the storage and sorts the result descending.
            ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;
            	("UserName like {0} SortBy UserName Desc", "%mit%");
            
            if (objectSet.Count &gt; 3)
            {
            	// Change a property of the first element in the
            	// ObjectSet.
            	User user = objectSet[0];
            	user.Name = "new Name";
            
            	// Mark the second and thirth element for deletion.
            	objectSet.Remove(objectSet[1]);
            	// When marking the thirth element we use 1 as index
            	// since the second object has been already moved
            	// to the RemovedList.
            	objectSet.RemoveAt(1);
            
            	// Restore the first element in the RemovedList.
            	user = objectSet.RemovedList[0];
            	objectSet.RemovedList.RemoveAt(0);
            	objectSet.Add(user);
            }
            
            // Save the changes.
            context.StartTransaction();
            context.PersistChanges&lt;User&gt;(objectSet);
            context.Commit();
            	</code>	
            </example>
        </member>
        <member name="T:Chili.Opf3.ICustomPersister">
             <summary>
             This interface is implemented by classes that want do their save and load in a special mode.
             </summary>
             <remarks>
             <para>
             A class that needs a special way to persist or to load its member from the storage has to 
             implement this interface. It's recommended to use this interface only for complex classes, that means
             classes consisting of a few or a list of persistent objects.
             If the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> encounters a class that implements
             this interface the load process (or persist process) is directly passed to the class. The class
             can then do it's special way to load or persist the members. As argument is passed 
             the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> that should be used to load (or persist) the
             changes on the objects.
             </para>
             <para>
             Currently <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> implements this interface to do the 
             custom save process. <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>
             uses this interface since it has to save all persistent objects in the main list and to delete 
             all persistent objects in the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see>. 
             Without implementing this interface the user would have to delete manually the objects in the 
             <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see>.
             </para>
             </remarks>
             <example>
             The following example shows a sample implementation of the interface.
             <code lang="CS">
             public class MyList&lt;T&gt; : ICustomPersister&lt;T:gt;
             {
            		private IList&lt;T&gt; _removedList = new List&lt;T&gt;();
             
            		public void Load(ObjectContext context, IQuery query)
            		{
            			// Load all objects matching the query.
            			using(ObjectReader&lt;T&gt; reader = 
            				context.GetObjectReader&lt;T&gt;(query))
            			{
            				// Add all objects found to the list.
            				foreach(T obj in reader)
            					this.Add(obj);
            			}
            		}
             
            		public void Persist(ObjectContext context, PersistDepths persistDepth, PersistingTrace trace)
            		{
            			foreach (T obj in this)
            				context.PersistChanges&lt;T&gt;(obj, persistDepth);
            
            			// Delete all objects in the RemovedList.
            			foreach (T obj in _removedList)
            			{
            				context.MarkForDeletion(obj);
            				context.PersistChanges&lt;T&gt;(obj, persistDepth);
            			}
            			_removedList.Clear();
            		}
             
            		public void MoveToRemovedList(T obj)
            		{
            			this.Remove(obj);
            			_removedList.Add(obj);
            		}
             
            		// ... Other properties and code.
             }
             </code>
             </example>
        </member>
        <member name="M:Chili.Opf3.ICustomPersister.Load(Chili.Opf3.ObjectContext,Chili.Opf3.Query.IQuery)">
            <summary>
            This method is called during load from the storage by the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> 
            class.
            </summary>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> that called this routine.</param>
            <param name="query"><see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is executed by the context to 
            load the objects.</param>
        </member>
        <member name="M:Chili.Opf3.ICustomPersister.Load(Chili.Opf3.ObjectContext,Chili.Opf3.Query.IQuery,System.Int32)">
            <summary>
            This method is called during load from the storage by the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> 
            class.
            </summary>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> that called this routine.</param>
            <param name="query"><see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is executed by the context to 
            load the objects.</param>
            <param name="amount">Specifies the maximum amount of objects that have to be loaded from the storage.</param>
        </member>
        <member name="M:Chili.Opf3.ICustomPersister.Persist(Chili.Opf3.ObjectContext,Chili.Opf3.PersistDepths,Chili.Opf3.PersistingTrace)">
            <summary>
            <para>
            This routine is called by the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>
            during save operations on the storage.
            </para>
            <para>
            <b>Attention:</b> The <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> should only add an object 
            to the <see cref="T:Chili.Opf3.PersistingTrace">PersistingTrace</see> (see the argument) if not
            using the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> to save its persistent objects.
            </para>
            </summary>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> that called this routine.</param>
            <param name="persistDepth">Specifies the depth of the object graph that is persisted.</param>
            <param name="persistingTrace">Contains information about the recently persistet objects. The 
            <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> should only add an object to this trace if not
            using the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> to save its persistent objects.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet Class</see>.
            </summary>
            <param name="capacity">The number of items that can be stored by the 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet Class</see>.
            </summary>
            <param name="list">List that contains the data to populate the 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.#ctor(Chili.Opf3.ObjectReader{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet Class</see>.
            </summary>
            <param name="objectReader"><see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> that is used 
            to populate the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.#ctor(Chili.Opf3.ObjectReader{`0},System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet Class</see>.
            </summary>
            <param name="objectReader"><see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> that is used 
            to populate the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</param>
            <param name="index">Index where to start with populating.</param>
            <param name="amount">Amount of objects that are populated.</param>
            <exception cref="T:System.IndexOutOfRangeException">Index is lower then zero.</exception>
            <exception cref="T:System.ArgumentException">Amount if lower then zero.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Initialize">
            <summary>
            Initializes the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> members appropriately.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.HookPropertyChanged(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Hooks the property changed event.
            </summary>
            <param name="item">The item that's property changed event is hooked.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.UnHookPropertyChanged(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Unhooks the property changed event.
            </summary>
            <param name="item">The item that's property changed event is unhooked.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.ItemPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Invoked each time a property of the child changed.
            </summary>
            <param name="sender">The item that is sending the event.</param>
            <param name="e">The EventArgs class that contains additional information for the event.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.objectReader_FetchingStorageRecord(System.Object,Chili.Opf3.FetchingStorageRecordEventArgs)">
            <summary>
            Invoked each time the event happens on the ObjectReader.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Invokes the ListChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> at the specified index. 
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or index is greater then
            <see cref="P:Chili.Opf3.ObjectSet`1.Count">Count</see>.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.RemoveAt(System.Int32)">
            <summary>
            Moves the object at the specified index from the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> to
            the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see>. 
            All objects on the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see> are deleted 
            when the changes on the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> are persisted.
            </summary>
            <param name="index">The zero-based index of the item to move.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is lesso than zero or index is equal to
            or greater than <see cref="P:Chili.Opf3.ObjectSet`1.Count">Count</see>.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> contains a specific object.
            </summary>
            <param name="item">The object to located in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</param>
            <returns>True, if item is found in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>; otherwise, false.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> to an Array, starting at 
            a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied 
            from <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">Array is null.</exception>
            <exception cref="T:System.ArgumentException">Array is multidimensional, array does not have zero-based
            indexing, the number of elements in the source is greater than the number of elements that the 
            destination array can contain or type T cannot be cast automatically to the type of the destination
            array.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>
            to the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see>.
            All objects on the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see> are deleted 
            when the changes on the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> are persisted.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</param>
            <returns>True, if item was successfully removed from the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>; otherwise, false. 
            This method also returns false if item was not found in the original 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
            <returns>An enumerator that can be used to iterate through the 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. The collection itself cannot be null, but it can 
            contain elements that are null, if type T is a reference type.</param>
            <exception cref="T:System.ArgumentNullException">Collection is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.AddRange(System.Collections.Generic.IEnumerable{`0},System.Predicate{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. The collection itself cannot be null, but it can 
            contain elements that are null, if type T is a reference type.</param>
            <param name="match">The Predicate delegate that defines the conditions to check against the elements.</param>
            <exception cref="T:System.ArgumentNullException">Collection is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.BinarySearch(`0)">
            <summary>
            Searches the entire sorted <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> for an element using the 
            default comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <returns>The zero-based index of item in the sorted <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>, if 
            item is found; otherwise, a negative number, which is the bitwise complement of the index 
            of the next element that is larger than item or, if there is no larger element, the 
            bitwise complement of <see cref="P:Chili.Opf3.ObjectSet`1.Count">Count</see>.</returns>
            <exception cref="T:System.InvalidOperationException">The default comparer cannot find an 
            IComparable implementation of the Type T.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> for an element 
            using the specified comparer and returns the zero-based index of the element. 
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The comparer implementation to use when comparing elements or null to use
            the default comparer.</param>
            <returns>The zero-based index of item in the sorted <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>, if 
            item is found; otherwise, a negative number, which is the bitwise complement of the index of the 
            next element that is larger than item or, if there is no larger element, the bitwise 
            complement of <see cref="P:Chili.Opf3.ObjectSet`1.Count">Count</see>.</returns>
            <exception cref="T:System.InvalidOperationException">The default comparer cannot find an 
            IComparable implementation of the Type T.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches a range of elements in the sorted <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> for an element 
            using the specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The cComparer implementation to use when comparing elements or null to use
             the default comparer.</param>
            <returns>The zero-based index of item in the sorted <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>, if 
            item is found; otherwise, a negative number, which is the bitwise complement of the index of the 
            next element that is larger than item or, if there is no larger element, the bitwise 
            complement of <see cref="P:Chili.Opf3.ObjectSet`1.Count">Count</see>.</returns>
            <exception cref="T:System.InvalidOperationException">The default comparer cannot find an 
            IComparable implementation of the Type T.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or 
            <see cref="P:Chili.Opf3.ObjectSet`1.Count">Count</see> is less then zero.</exception>
            <exception cref="T:System.ArgumentException">Index and count do not denote a valid range in the 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts the current <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> to another type.
            </summary>
            <param name="converter">A converter delegate that converts each element from one type to another type.</param>
            <returns>An <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> of the target type containing the 
            converted elements from the current <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. </returns>
            <exception cref="T:System.ArgumentNullException">Converter is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> contains elements that 
            match the conditions defined by the specified predicate. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns>true, if the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> contains one or more 
            elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the first occurrence within the entire <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; 
            otherwise, the default value for type T. </returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns>An <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> containing all the elements that match the 
            conditions defined by the specified predicate, if found; otherwise, an empty 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and 
            returns the zero-based index of the first occurrence within the entire
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that 
            matches the conditions defined by match, if found; otherwise, -1</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the first occurrence within the range of elements 
            in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> that extends from the specified index 
            to the last element. 
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The Predicate delegate that defines the conditions of the 
            element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions 
            defined by match, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">StartIndex is outside the range of valid indexes
            for the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the first occurrence within the range of elements 
            in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> that starts at the specified index and contains 
            the specified number of elements. 
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The Predicate delegate that defines the conditions of the 
            element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions 
            defined by match, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">StartIndex is outside the range of valid indexes
            for the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> or Count is less then zero.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the last occurrence within the entire <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; 
            otherwise, the default value for type T.</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the last occurrence within the entire 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions 
            defined by match, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the last occurrence within the range of elements in 
            the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> that extends from the first element 
            to the specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions 
            defined by match, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">StartIndex is outside the range of valid
            indexes for the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the last occurrence within the range of elements 
            in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> that contains the specified number of elements 
            and ends at the specified index. 
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions 
            defined by match, if found; otherwise, -1. </returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">StartIndex is outside the range of valid indexes
            for the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> or Count is less then zero.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. 
            </summary>
            <param name="action">The Action delegate to perform on each element of the 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</param>
            <exception cref="T:System.ArgumentNullException">Action is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
            <param name="index">The zero-based <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> index 
            at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the source 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</returns>
            <exception cref="T:System.ArgumentException">Index and count do not denote a valid range of elements
            in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or count is less than
            zero.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> 
            at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into 
            the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. The collection itself cannot be null, but 
            it can contain elements that are null, if type T is a reference type.</param>
            <exception cref="T:System.ArgumentNullException">Collection is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or index is greater
            then <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last 
            occurrence within the entire <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. 
            </summary>
            <param name="item">The object to locate in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. The 
            value can be null for reference types.</param>
            <returns>The zero-based index of the last occurrence of item within the entire the 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence 
            within the range of elements in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> that extends 
            from the first element to the specified index.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. The 
            value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <returns>The zero-based index of the last occurrence of item within the range of elements in 
            the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> that extends from the first element to index, 
            if found; otherwise, -1.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence 
            within the range of elements in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> that contains 
            the specified number of elements and ends at the specified index. 
            </summary>
            <param name="item">The object to locate in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. 
            The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the last occurrence of item within the range of elements 
            in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> that contains count number of elements and 
            ends at index, if found; otherwise, -1. </returns>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.RemoveAll">
            <summary>
            Removes all the elements in the list to the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see>.
            All objects on the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see> are deleted 
            when the changes on the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> are persisted.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            They are moved to the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see>.
            All objects on the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see> are deleted 
            when the changes on the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> are persisted.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. 
            They are moved to the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see>.
            All objects on the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see> are deleted 
            when the changes on the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> are persisted.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less then zero or count is less
            then zero.</exception>
            <exception cref="T:System.ArgumentException">Index and count do not denote a valid range of elements
            in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. 
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Sort">
            <summary>
            Sorts the elements in the entire <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> using the default comparer.
            </summary>
            <exception cref="T:System.InvalidOperationException">The default comparer cannot find a IComparable
            implementation for type T.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> using the 
            specified Comparison.
            </summary>
            <param name="comparison">The Comparison to use when comparing elements.</param>
            <exception cref="T:System.ArgumentNullException">Comparison is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> using 
            the specified comparer. 
            </summary>
            <param name="comparer">The IComparer implementation to use when comparing elements or null
            to use the default comparer.</param>
            <exception cref="T:System.InvalidOperationException">Comparar is null and the default comparer
            cannot find an IComparable implementation for type T.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> 
            using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The IComparer implementation to use when comparing elements or null
            to use the default comparer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or count is less
            than zero.</exception>
            <exception cref="T:System.ArgumentException">Index and count do not specify a valid range in the
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</exception>
            <exception cref="T:System.InvalidOperationException">Comparar is null and the default comparer
            cannot find an IComparable implementation for type T.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines whether every element in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> 
            matches the conditions defined by the specified predicate. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions to check against the elements.</param>
            <returns>true, if every element in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> matches 
            the conditions defined by the specified predicate; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Match is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Chili#Opf3#ICustomPersister#Load(Chili.Opf3.ObjectContext,Chili.Opf3.Query.IQuery)">
            <summary>
            This method is called during load from the storage by the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> 
            class.
            </summary>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> that called this routine.</param>
            <param name="query"><see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is executed by the context to 
            load the objects.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Chili#Opf3#ICustomPersister#Load(Chili.Opf3.ObjectContext,Chili.Opf3.Query.IQuery,System.Int32)">
            <summary>
            This method is called during load from the storage by the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> 
            class.
            </summary>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> that called this routine.</param>
            <param name="query"><see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is executed by the context to 
            load the objects.</param>
            <param name="amount">Specifies the maximum amount of objects that have to be loaded from the storage.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Chili#Opf3#ICustomPersister#Persist(Chili.Opf3.ObjectContext,Chili.Opf3.PersistDepths,Chili.Opf3.PersistingTrace)">
            <summary>
            This routine is called by the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>
            during save operations on the storage.
            <b>Attention:</b> The <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> should only add an object 
            to the <see cref="T:Chili.Opf3.PersistingTrace">PersistingTrace</see> (set as argument) if not
            using the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> to save it's persistent object.
            </summary>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> that called this routine.</param>
            <param name="persistDepth">Specifies the depth of the object graph that is persisted.</param>
            <param name="persistingTrace">Contains information about the recently persistet objects. The 
            <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> should only add an object to this trace if not
            using the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> to save it's persistent object.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Persist(Chili.Opf3.ObjectContext,Chili.Opf3.PersistDepths,Chili.Opf3.PersistingTrace)">
            <summary>
            This routine is called by the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>
            during save operations on the storage.
            <b>Attention:</b> The <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> should only add an object 
            to the <see cref="T:Chili.Opf3.PersistingTrace">PersistingTrace</see> (set as argument) if not
            using the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> to save it's persistent object.
            </summary>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> that called this routine.</param>
            <param name="persistDepth">Specifies the depth of the object graph that is persisted.</param>
            <param name="persistingTrace">Contains information about the recently persistet objects. The 
            <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> should only add an object to this trace if not
            using the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> to save it's persistent object.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Load(Chili.Opf3.ObjectContext,Chili.Opf3.Query.IQuery,System.Int32)">
            <summary>
            This method is called during load from the storage by the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> 
            class.
            </summary>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> that called this routine.</param>
            <param name="query"><see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is executed by the context to 
            load the objects.</param>
            <param name="amount">Specifies the maximum amount of objects that have to be loaded from the storage.
            If the value is -1 all objects should be loaded from the storage that are returned by the query.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.storage_TransactionCommit(System.Object,System.EventArgs)">
            <summary>
            Method is invoked if the transaction on the storage is committed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.storage_TransactionRollback(System.Object,System.EventArgs)">
            <summary>
            Method is invoked if the transaction on the storage is rolled back.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.ToString">
            <summary>
            Returns the string representation for the object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Distinct">
            <summary>
            All duplicates in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> are removed. Duplicates are identified
            by analyzing the identifiers.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Union(Chili.Opf3.ObjectSet{`0})">
            <summary>
            Unites this instance with another instance of <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. 
            Duplicates are removed (they are identified by analyzing the identifiers of the persistent objects) 
            and the current instance of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> 
            is sorted by identifiers. To have the instance resorted use the 
            <see cref="M:Chili.Opf3.ObjectSet`1.Sort(System.Comparison{`0})">Sort</see> routine of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
            <param name="objectSet">The <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> united with the current instance.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Intersect(Chili.Opf3.ObjectSet{`0})">
            <summary>
            Creates the intersecting set of this instance and another instance of <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. 
            Duplicates are removed (they are identified by analyzing the identifiers of the persistent objects) 
            and the current instance of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> is sorted by identifiers. To have the 
            instance resorted use the <see cref="M:Chili.Opf3.ObjectSet`1.Sort(System.Comparison{`0})">Sort</see> routine of the 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
            <param name="objectSet">The <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> used to create the intersecting set.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.Except(Chili.Opf3.ObjectSet{`0})">
            <summary>
            Creates the difference in quantities of this instance and another instance of 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. All objects being also in the second 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> are removed.
            Duplicates are removed (they are identified by analyzing the identifiers of the persistent objects) 
            and the current instance of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> is sorted by identifiers. To have the 
            instance resorted use the <see cref="M:Chili.Opf3.ObjectSet`1.Sort(System.Comparison{`0})">Sort</see> routine of the 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
            <param name="objectSet">The <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> used to create the difference in quantities.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.System#ComponentModel#IListSource#GetList">
            <summary>
            Returns a list that contains the objects in the current instance of the 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
            <returns>A list that contains the objects of the current instance.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.System#Collections#IList#Clear">
            <summary>
            Removes all items from the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> contains a specific object.
            </summary>
            <param name="item">The object to located in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</param>
            <returns>True, if item is found in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>; otherwise, false.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> at the specified index. 
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or index is greater then
            <see cref="P:Chili.Opf3.ObjectSet`1.Count">Count</see>.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>
            to the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see>.
            All objects on the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see> are deleted 
            when the changes on the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> are persisted.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Moves the object at the specified index from the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> to
            the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see>. 
            All objects on the <see cref="P:Chili.Opf3.ObjectSet`1.RemovedList">RemovedList</see> are deleted 
            when the changes on the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> are persisted.
            </summary>
            <param name="index">The zero-based index of the item to move.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or index is equal to
            or greater than <see cref="P:Chili.Opf3.ObjectSet`1.Count">Count</see>.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> to an Array, starting at 
            a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied 
            from <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">Array is null.</exception>
            <exception cref="T:System.ArgumentException">Array is multidimensional, array does not have zero-based
            indexing, the number of elements in the source is greater than the number of elements that the 
            destination array can contain or type T cannot be cast automatically to the type of the destination
            array.</exception>
        </member>
        <member name="E:Chili.Opf3.ObjectSet`1.FetchingStorageRecord">
            <summary>
            Event is fired before the data from the storage is used to populate an object.
            </summary>
            <remarks>
            This event is fired before the data from the storage is used to populate an object. It allows the user
            to specify another type for the row (item) that is populated with the data. It allows also to have 
            certain items ignored. This event can be used in certain scenarios of inheritance.
            </remarks>
            <example>
            The following example introduces to the use of the FecthingStorageRecord event. 
            <code lang="CS">
            ObjectSet&lt;User&gt; objectSet = new ObjectSet&lt;User&gt;();
            // Register the event.
            objectSet.FetchingStorageRecord += new PersistentTypeSelector(MySelection);
            // Fill the ObjectSet with the data from the storage.
            objectSet = (ObjectSet&lt;User&gt;)context.GetObjectList&lt;User&gt;(objectSet);
            
            // Loop trough all items.
            foreach (User user in objectSet)
            {
                if (user.GetType() == typeof(User1))
                    Console.WriteLine("User1 found.");
                else
                    Console.WriteLine("User found.");
            }
            
            // ...
            
            private void MySelection(object sender, FetchingStorageRecordEventArgs e)
            {
                if (e.DataRecord["Type"] == "1")
                {
                    // Switch the type of the persistent that is created to User1.
                    e.Type = typeof(User1);
                }
                else if ((bool)e.DataRecord["Ignore"])
                {
                    // Tell the framework to ignore this item.
                    e.Ignore = true;
                }
                // Have a persistent of type User created.
                e.Type = typeof(User);
            }
            </code>
            </example>
        </member>
        <member name="E:Chili.Opf3.ObjectSet`1.ListChanged">
            <summary>
            Occurs when the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> changes.
            </summary>
            <remarks>
            <para>
            This event is fired each time the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> changes to notify 
            that the object has been changed. It allows to act after the object has been changed.
            </para>
            <para>
            This event is also used by the <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> to get informed, when the 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> changes.
            </para>
            </remarks>
        </member>
        <member name="P:Chili.Opf3.ObjectSet`1.Item(System.Int32)">
            <summary>
            Gets or sets the object at the specified index.
            </summary>
            <param name="index">The zero-based index of the object to get or set.</param>
            <returns>The object at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less then zero or index is equal or greater
            then <see cref="P:Chili.Opf3.ObjectSet`1.Count">Count</see>.</exception>
        </member>
        <member name="P:Chili.Opf3.ObjectSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. 
            </summary>
            <value>The number of elements contained in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</value>
        </member>
        <member name="P:Chili.Opf3.ObjectSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> is read-only.
            </summary>
            <value>True, if the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> is read-only; otherwise, false.</value>
        </member>
        <member name="P:Chili.Opf3.ObjectSet`1.Capacity">
            <summary>
            Gets or sets the number of elements that the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> can contain. 
            </summary>
            <value>The number of elements that the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> can contain.</value>
        </member>
        <member name="P:Chili.Opf3.ObjectSet`1.RemovedList">
            <summary>
            Returns the list of removed objects. Objects that are marked for deletion 
            (using the methods of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>) are moved 
            to this list and deleted from storage when the changes are persisted.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectSet`1.InnerList">
            <summary>
            Returns the list that is used to store the persistent objects.
            </summary>
            <value>The list that contains the persistent objects of the 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</value>
        </member>
        <member name="P:Chili.Opf3.ObjectSet`1.DefaultView">
            <summary>
            Returns the default <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> for the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            This instance may be bound to data-driven controls. When the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> is bound
            to a control this instance is used.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectSet`1.ObjectViewManager">
            <summary>
            Returns the <see cref="T:Chili.Opf3.ObjectViewManager`1">ObjectViewManager</see> associated with the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectSet`1.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
            Returns true since the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> is a list of objects.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectSet`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> has a fixed size.
            </summary>
            <returns>True if the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Chili.Opf3.ObjectSet`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> is read-only.
            </summary>
            <value>True, if the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> is read-only; otherwise, false.</value>
        </member>
        <member name="P:Chili.Opf3.ObjectSet`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the object at the specified index.
            </summary>
            <param name="index">The zero-based index of the object to get or set.</param>
            <returns>The object at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less then zero or index is equal or greater
            then <see cref="P:Chili.Opf3.ObjectSet`1.Count">Count</see>.</exception>
        </member>
        <member name="P:Chili.Opf3.ObjectSet`1.System#Collections#ICollection#Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>. 
            </summary>
            <value>The number of elements contained in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.</value>
        </member>
        <member name="P:Chili.Opf3.ObjectSet`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectSet`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectSet`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
            <summary>
            Gets a value indicating whether the object raises the <see cref="E:Chili.Opf3.ObjectSet`1.ListChanged">ListChanged</see> event on changes in the managed items.
            </summary>
        </member>
        <member name="T:Chili.Opf3.ObjectSet`1.SetOperations">
            <summary>
            This class defines some of the common operations on sets.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.SetOperations.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectSet`1.SetOperations">SetOperations Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.SetOperations.Compare(`0,`0)">
            <summary>
            Compares the identifier of two different objects.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.SetOperations.Distinct(Chili.Opf3.ObjectSet{`0})">
            <summary>
            All duplicates in the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> are removed.
            </summary>
            <param name="objectSet">The <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> where the duplicates are removed.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.SetOperations.Union(Chili.Opf3.ObjectSet{`0},Chili.Opf3.ObjectSet{`0})">
            <summary>
            Unites two <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSets</see>. Duplicates are removed.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.SetOperations.Intersect(Chili.Opf3.ObjectSet{`0},Chili.Opf3.ObjectSet{`0})">
            <summary>
            Creates the intersecting set of two <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> instances.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.SetOperations.BuildObjectTable(Chili.Opf3.ObjectSet{`0})">
            <summary>
            Builds an table containing the identifiers of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.SetOperations.GetIdentifiers(`0)">
            <summary>
            Gets the identifiers of an object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectSet`1.SetOperations.Except(Chili.Opf3.ObjectSet{`0},Chili.Opf3.ObjectSet{`0})">
            <summary>
            Creates the difference in quantities of two <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> instances.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Relations.ObjectHolderUtility">
            <summary>
            Internal utility to simplify the work with the <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase</see> derived classes.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderUtility.DeleteManyToMany``1(System.Collections.Generic.IList{``0},Chili.Opf3.Relations.RelationAttribute,System.Object,Chili.Opf3.ObjectContext)">
            <summary>
            Deletes the objects in the weak entity. Those objects are the connection between the child objects and
            the parent object. Only the connection is deleted since in a many-to-many relation it's not known if the
            child objects aren't used by anybody else. Attention: This method deletes the connection between two objects
            in the many-to-many connection if the user marked one of the child objects as deleted. The child object is
            NOT deleted. That's very important, because in a many-to-many connection the child object may be in 
            connection with another parent object!
            </summary>
            <param name="attribute">The <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> specified on the <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase</see>.</param>
            <param name="context">The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase</see>.</param>
            <param name="list">The managed object in the <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase</see>.</param>
            <param name="parent">The parent object of the <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase</see>.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderUtility.DeleteWeakObject(Chili.Opf3.Relations.RelationAttribute,System.Object,Chili.Opf3.ObjectContext,Chili.Opf3.Mapping.TypeMapping,System.Object)">
            <summary>
            Deletes the persistent object in the weak entity.
            </summary>
            <param name="attribute">The <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> specified on the <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase</see>.</param>
            <param name="context">The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase</see>.</param>
            <param name="parent">The parent object of the <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase</see>.</param>
            <param name="parentMapping">The mapping of the parent persistent object type.</param>
            <param name="obj">The object that is deleted.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderUtility.SaveManyToMany``1(System.Collections.Generic.IList{``0},Chili.Opf3.Relations.RelationAttribute,System.Object,Chili.Opf3.ObjectContext)">
            <summary>
            Creates the connection between the two objects in the many-to-many relation. The connection is 
            only created if not done earlier. Therefore the routine has to do a select query and then an insert,
            if the select does not return anything.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectHolderUtility.PrepareQuery``1(Chili.Opf3.Relations.RelationAttribute,Chili.Opf3.Query.IQuery,System.Object)">
            <summary>
            Prepares the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> for the ObjectHolder.
            </summary>
            <param name="attribute">The relation attribute for which the query is generated.</param>
            <param name="query">The query that has been pre set.</param>
            <param name="parent">The parent object (The persistent object that contains the class inheriting 
            from <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase</see>).</param>
            <returns>Returns a class that implements the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface.
            It is used to get the objects from the storage.</returns>
        </member>
        <member name="T:Chili.Opf3.Storages.SqlQueryCommandBuilder">
            <summary>
            Compiles a <see cref="T:Chili.Opf3.Query.SqlQuery">SqlQuery</see> to a storage dependent query.
            </summary>
            <remarks>
            Compiles a <see cref="T:Chili.Opf3.Query.SqlQuery">SqlQuery</see> to a storage dependent
            <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see>. This class is used
            internally by the <see cref="T:Chili.Opf3.Query.SqlQuery">SqlQuery's</see> 
            <see cref="M:Chili.Opf3.Query.SqlQuery.ToCompiledQuery(Chili.Opf3.Storages.IStorage)">ToCompiledQuery</see> method.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlQueryCommandBuilder.ToCompiledQuery(Chili.Opf3.Storages.IStorage,Chili.Opf3.Query.IQuery)">
            <summary>
            Converts the given query to a storage dependent <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see>. 
            This method should only be called by a class that implements the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> 
            interface.
            </summary>
            <param name="query"><see cref="T:Chili.Opf3.Query.IQuery">Query</see> object
            that is converted to a storage dependent <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see>.
            </param>
            <param name="storage">The storage that the query is compiled for.</param>
            <returns>A storage dependent <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see>.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlQueryCommandBuilder.ParseMatch(System.String,System.Int32@,System.Type@)">
            <summary>
            Parses the match.
            </summary>
            <param name="match">The match that is parsed.</param>
            <param name="index">The index of the current match.</param>
            <param name="type">The type of the current match.</param>
            <returns>True if the parse process was successful.</returns>
        </member>
        <member name="M:Chili.Opf3.Storages.SqlQueryCommandBuilder.IsSupported(Chili.Opf3.Storages.IStorage,Chili.Opf3.Query.IQuery)">
            <summary>
            Returns whether the <see cref="T:Chili.Opf3.Storages.IStorageCommandBuilder">IStorageCommandBuilder</see> supports 
            the query type on the given storage.
            </summary>
            <param name="storage">The storage for which the query should be compiled.</param>
            <param name="query">The query that should be compiled to a storage dependent command.</param>
            <returns>True if the query can be parsed by the <see cref="T:Chili.Opf3.Storages.IStorageCommandBuilder">IStorageCommandBuilder</see>.</returns>
        </member>
        <member name="T:Chili.Opf3.ObjectViewManager`1">
            <summary>
            This class manages the <see cref="T:Chili.Opf3.ObjectView`1">ObjectViews</see> of an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ObjectViewManager`1.#ctor(Chili.Opf3.ObjectSet{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectViewManager`1">ObjectViewManager Class</see>.
            </summary>
            <param name="objectSet">The <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> associated with the manager.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectViewManager`1.NotifyListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Notifies the <see cref="T:Chili.Opf3.ObjectView`1">ObjectViews</see> that the list of the <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>
            has changed.
            </summary>
            <param name="e">The EventArgs argument passed with the event that fired the change of the list.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectViewManager`1.RegisterView(Chili.Opf3.ObjectView{`0})">
            <summary>
            Registers an <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> in the manager.
            </summary>
            <param name="view">The <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> that is registered.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectViewManager`1.UnRegisterView(Chili.Opf3.ObjectView{`0})">
            <summary>
            Unregisters an <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> in the manager.
            </summary>
            <param name="view">The <see cref="T:Chili.Opf3.ObjectView`1">ObjectView</see> that is unregistered.</param>
        </member>
        <member name="T:Chili.Opf3.DynamicProperties.DynamicProperty">
            <summary>
            Represents a DynamicProperty that contains a value of a simple type.
            </summary>
            <remarks>
            This class is a DynamicProperty that contains a value of a simple type (for example int, string). 
            You could also connect a DynamicProperty with a 
            <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType</see>.
            A <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType</see> is a set of values,
            like an enumeration, that's values can be set as value for the DynamicProperty. You could use such 
            a type for option boxes.
            </remarks>
            <example>
            The following example shows how to use the DynamicProperty class in your application.
            <code lang="CS">
            // ... Other code
            
            // Create a DynamicProperty of type string.
            DynamicProperty prop1 = new DynamicProperty("PLZ", typeof(string));
            prop.Value = "1234";
            
            // Create a DynamicProperty of type int.
            DynamicProperty prop1 = new DynamicProperty("Age", typeof(int));
            prop1.Value = 22;
            
            
            DynamicType type = new DynamicType();
            type.Values.Add("small");
            type.Values.Add("medium");
            type.Values.Add("large");
            
            // Create a DynamicProperty using a DynamicType.
            DynamicProperty prop1 = new DynamicProperty("Size", typeof(string), type);
            prop1.Value = "small";
            
            // ... Other code
            </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicProperty.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty Class</see>.
            This constructor is required for webservices.
            </summary>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicProperty.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty Class</see>.
            </summary>
            <param name="id">Identifier of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>.</param>
            <param name="type">The type of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>.</param>
            <exception cref="T:System.ArgumentNullException">Id is null.</exception>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicProperty.#ctor(System.Type,System.String,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty Class</see>.
            </summary>
            <param name="id">Identifier of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>.</param>
            <param name="type">The type of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>.</param>
            <param name="value">Value of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>.</param>
            <exception cref="T:System.ArgumentNullException">Id is null or value is null.</exception>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicProperty.#ctor(Chili.Opf3.DynamicProperties.DynamicType,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty Class</see>.
            </summary>
            <param name="id">Identifier of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>.</param>
            <param name="dynamicType"><see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType</see> 
            associated with the dynamic property.</param>
            <exception cref="T:System.ArgumentNullException">Id is null or dynamicType is null.</exception>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicProperty.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicProperty.ToString">
            <summary>
            Returns a string representation of the clas.
            </summary>
            <returns>A string representation of the class.</returns>
        </member>
        <member name="P:Chili.Opf3.DynamicProperties.DynamicProperty.Id">
            <summary>
            Specifies the identifier of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>.
            </summary>
            <value>A string that represents the identifier of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>.</value>
        </member>
        <member name="P:Chili.Opf3.DynamicProperties.DynamicProperty.Type">
            <summary>
            Specifies the type of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>.
            </summary>
        </member>
        <member name="P:Chili.Opf3.DynamicProperties.DynamicProperty.TypeAsString">
            <summary>
            Specifies the type of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see> as string.
            </summary>
        </member>
        <member name="P:Chili.Opf3.DynamicProperties.DynamicProperty.Value">
            <summary>
            Specifies the value of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>.
            </summary>
            <value>An object that represents the value of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>.</value>
        </member>
        <member name="P:Chili.Opf3.DynamicProperties.DynamicProperty.DynamicType">
            <summary>
            Returns the associated <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType</see>. 
            If no <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType</see> has been set 
            returns null.
            </summary>
            <value>Associated <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType</see> or null if
            none has been set.</value>
        </member>
        <member name="T:Chili.Opf3.Blob">
            <summary>Represents a BLOb (binary large object).</summary>
            <remarks>
            This class is used to save and load BLObs from and to the storage. BLObs are
            binary fields that contain an array of data (for example an image,
            sound, movies or something else). Usually the storage returns them directly as byte
            array which is not very convenient: therefore the framework provides the Blob
            class that encapsulates the byte array and provides a more convenient access to the data.
            </remarks>
            <example>
                The example shows how to use the Blob class in a persistent object.
                <code lang="CS">
            [Persistent("USER")]
            public class User
            {
                [Field("IMAGE", Mandatory = false)]
                public Blob Image
                {
                    // ... code of the property.
                }
             
                [Field("ID", Mandatory = true, Identifier = true)]
                public ID&lt;string&gt; Id
                {
                    // ... code of the property.
                }
             
                // ... Other code of the class.
            }
             
            // ... Other code.
             
            User user = new User();
            user.Image.Value = // Save something in it.
                </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.Blob.#ctor">
            <summary>Creates a new instance of the <see cref="T:Chili.Opf3.Blob">Blob Class</see>.</summary>
        </member>
        <member name="M:Chili.Opf3.Blob.#ctor(System.Byte[])">
            <summary>Creates a new instance of the <see cref="T:Chili.Opf3.Blob">Blob Class</see>.</summary>
            <param name="bytes">
            Bytes (representing the BLOb) managed by the <see cref="T:Chili.Opf3.Blob">Blob</see>
            class.
            </param>
        </member>
        <member name="M:Chili.Opf3.Blob.OnValueChanging(System.EventArgs)">
            <summary>
            Fires the corresponding event if somebody subscribed it.
            </summary>
            <param name="e">Instance of the EventArgs class.</param>
        </member>
        <member name="M:Chili.Opf3.Blob.OnValueChanged(System.EventArgs)">
            <summary>
            Fires the corresponding event if somebody subscribed it.
            </summary>
            <param name="e">Instance of the EventArgs class.</param>
        </member>
        <member name="M:Chili.Opf3.Blob.FromStream(System.IO.Stream)">
            <summary>Creates a <see cref="T:Chili.Opf3.Blob">Blob</see> from a stream.</summary>
            <param name="stream">Stream that's data is used to populate the <see cref="T:Chili.Opf3.Blob">Blob</see>.</param>
        </member>
        <member name="M:Chili.Opf3.Blob.Chili#Opf3#IUserDefinedType#FromSimpleDataType(System.Object)">
            <summary>
            Populates the type that implements the interface (a type that can't be directly saved or 
            loaded from the storage) with data from the storage.
            </summary>
            <param name="value">The simple type representation in the storage (for example an xml string).</param>
        </member>
        <member name="M:Chili.Opf3.Blob.Chili#Opf3#IUserDefinedType#ToSimpleDataType">
            <summary>
            Converts the user-defined type to a type that can be persisted to the storage. You could
            return here for example an xml string or something else that can be saved to the storage.
            </summary>
            <returns>
            The IUserDefinedType converted to a simple type that is saved to the
            storage.
            </returns>
        </member>
        <member name="M:Chili.Opf3.Blob.Clone">
            <summary>Creates a new object that is a copy of the current instance.</summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Chili.Opf3.Blob.ToString">
            <summary>Converts the content of the <see cref="T:Chili.Opf3.Blob">Blob</see> as string.</summary>
            <returns>Returns the content of the <see cref="T:Chili.Opf3.Blob">Blob</see> as string.</returns>
        </member>
        <member name="M:Chili.Opf3.Blob.ToMemoryStream">
            <summary>
            Converts the content of the <see cref="T:Chili.Opf3.Blob">Blob</see> to a memory stream. Null is returned
            if the <see cref="T:Chili.Opf3.Blob">Blob</see> is empty.
            </summary>
            <returns>Returns the content of the <see cref="T:Chili.Opf3.Blob">Blob</see> as memory stream.</returns>
        </member>
        <member name="E:Chili.Opf3.Blob.ValueChanging">
            <summary>
            Event fired before the value of the <see cref="T:Chili.Opf3.Blob">Blob</see> is changed.
            </summary>
        </member>
        <member name="E:Chili.Opf3.Blob.ValueChanged">
            <summary>
            Event fired after the value of the <see cref="T:Chili.Opf3.Blob">Blob</see> is changed.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Blob.Chili#Opf3#IUserDefinedType#SupportedType">
            <summary>
            Returns the type supported by the class implementing this interface. The supported type is the type
            that is returned when converting to a simple type and the type that is set when converting from the simple type.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Blob.Value">
            <summary>Specifies the byte array managed by the <see cref="T:Chili.Opf3.Blob">Blob</see>.</summary>
            <value>
            Returns the byte array managed by this instance of the
            <see cref="T:Chili.Opf3.Blob">Blob</see> class.
            </value>
        </member>
        <member name="P:Chili.Opf3.Blob.Length">
            <summary>Returns the length of the data in the <see cref="T:Chili.Opf3.Blob">Blob</see>.</summary>
            <value>Returns the length of the data in the <see cref="T:Chili.Opf3.Blob">Blob</see>.</value>
        </member>
        <member name="T:Chili.Opf3.Mapping.PopulateHelperMetaInfo">
            <summary>
            Class represents a meta element that is used to create the mapping between the persistent object and
            the field in the table.
            </summary>
            <remarks>
            This class represents a meta element that is used to create the mapping between a field
            of the persistent object and a field in the storage table. This class uses the <see cref="T:Chili.Opf3.IPopulateHelper">IPopulateHelper</see>
            interface to set and get the values in/from the persistent's members.
            </remarks>
        </member>
        <member name="T:Chili.Opf3.Mapping.MetaInfo">
            <summary>
            Class represents a meta element that is used to create the mapping between the persistent object and
            the field in the table.
            </summary>
            <remarks>
            <para>
            This class represents a meta element that is used to create the mapping between a property or a field
            of the persistent object and a field in the storage table.
            </para>
            <para>
            ATTENTION: Named MetaInfo instead of MemberInfo to avoid naming clashes with System.Reflection.MemberInfo.
            </para>
            </remarks>
        </member>
        <member name="T:Chili.Opf3.Mapping.IMemberInfo">
            <summary>
            Interface implemented by a member element that is used to create the mapping between the persistent object and
            the field in the table.
            </summary>
            <remarks>
            This interface is implemented by a member element that is used to create the mapping between a property or a field
            of the persistent object and a field in the storage table.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Mapping.IMemberInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            Returns an array containing the custom attributes on the element that is mapped to the storage.
            </summary>
            <param name="inherit">True to get also inherited attributes.</param>
            <returns>An array containing the custom attribute of the element.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.IMemberInfo.GetValue(System.Object)">
            <summary>
            Returns the value of the element of the persistent object type that is mapped to a field in the storage.
            </summary>
            <param name="obj">The persistent object that's member's value is returned.</param>
            <returns>Value of the persistent object's type element that is mapped to a field in the storage.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.IMemberInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets new value for the element of the persistent object type that is mapped to the storage.
            </summary>
            <param name="obj">The persistent object that's member's value is updated.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="P:Chili.Opf3.Mapping.IMemberInfo.FieldAttribute">
            <summary>
            Returns the <see cref="P:Chili.Opf3.Mapping.IMemberInfo.FieldAttribute">FieldAttribute</see> that contains the mapping information of
            the storage field.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IMemberInfo.IsNullable">
            <summary>
            Returns whether the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> object is representing an element that is a value
            type but is allowed to be null.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IMemberInfo.IsUserDefinedType">
            <summary>
            Returns whether the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> object is representing an element that is
            implementing the <see cref="T:Chili.Opf3.IUserDefinedType">IUserDefinedType</see> interface.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IMemberInfo.MemberType">
            <summary>
            Returns the type of the element of the persistent object.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IMemberInfo.Name">
            <summary>
            Returns the name of the element of the persistent object type that is mapped to the field in the storage.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.MetaInfo.#ctor(System.Type,System.Reflection.MemberInfo,Chili.Opf3.FieldAttribute)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Mapping.MetaInfo">MetaInfo Class</see>.
            </summary>
            <param name="memberType">The type of the MemberInfo object.</param>
            <param name="attribute">The <see cref="P:Chili.Opf3.Mapping.MetaInfo.FieldAttribute">FieldAttribute</see> that contains the mapping information
            of the storage field.</param>
            <param name="memberInfo">The object holding all informations about the member.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.MetaInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            Returns an array containing the custom attributes on the element that is mapped to the storage.
            </summary>
            <param name="inherit">True to get also inherited attributes.</param>
            <returns>An array containing the custom attribute of the element.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.MetaInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets new value for the element of the persistent object type that is mapped to the storage.
            </summary>
            <param name="obj">The persistent object that's member's value is updated.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.MetaInfo.GetValue(System.Object)">
            <summary>
            Returns the value of the element of the persistent object type that is mapped to a field in the storage.
            </summary>
            <param name="obj">The persistent object that's value is returned.</param>
            <returns>Value of the persistent object's type element that is mapped to a field in the storage.</returns>
        </member>
        <member name="P:Chili.Opf3.Mapping.MetaInfo.FieldAttribute">
            <summary>
            Returns the <see cref="P:Chili.Opf3.Mapping.MetaInfo.FieldAttribute">FieldAttribute</see> that contains the mapping information of
            the storage field.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.MetaInfo.IsUserDefinedType">
            <summary>
            Returns whether the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> object is representing an element that is
            implementing the <see cref="T:Chili.Opf3.IUserDefinedType">IUserDefinedType</see> interface.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.MetaInfo.IsNullable">
            <summary>
            Returns whether the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> object is representing an element that is a value
            type but is allowed to be null.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.MetaInfo.MemberType">
            <summary>
            Returns the type of the element of the persistent object.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.MetaInfo.Name">
            <summary>
            Returns the name of the element of the persistent object type that is mapped to the field in the storage.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.PopulateHelperMetaInfo.#ctor(System.Reflection.MemberInfo,System.Type,Chili.Opf3.FieldAttribute)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Mapping.PopulateHelperMetaInfo">PopulateHelperMetaInfo Class</see>.
            </summary>
            <param name="memberInfo">The MemberInfo object that represents the member in the persistent object's type.</param>
            <param name="type">Specifies the type of the member.</param>
            <param name="attribute">The <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> that contains the mapping information.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.PopulateHelperMetaInfo.GetValue(System.Object)">
            <summary>
            Returns the value of the element of the persistent object type that is mapped to a field in the storage.
            </summary>
            <param name="obj">The persistent object that's value is returned.</param>
            <returns>Value of the persistent object types's element that is mapped to a field in the storage.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.PopulateHelperMetaInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets new value for the element of the persistent object type that is mapped to the storage.
            </summary>
            <param name="obj">The persistent object that's value is updated.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="P:Chili.Opf3.Mapping.PopulateHelperMetaInfo.Name">
            <summary>
            Returns the name of the element of the persistent object type that is mapped to the field in the storage.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Mapping.Providers.ITypeMappingProvider">
            <summary>
            This interface is implemented by classes, which create the type mapping for a persistent type.
            </summary>
            <remarks>
            The mapping is created by compiling
            and returning instances of <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see>,
            <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> and <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see>
            classes. The framework uses those classes afterwards to create the <see cref="T:Chili.Opf3.Mapping.TypeMapping">TypeMapping</see>
            instances for the persistent types.
            </remarks>
            <example>
                The following example shows how to set a class that implements the ITypeMappingProvider.
                <code lang="CS">
            // Set the AttributeTypeMappingProvider that is creating the mapping by
            // inspecting the attriutes put on the persistent type's members.
            TypeMapping.Provider = new AttributeTypeMappingProvider();
                </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.ITypeMappingProvider.GetPersistentAttribute(System.Type)">
            <summary>
            Returns the persistent attribute of the type or null if the type has no 
            <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see>.
            </summary>
            <param name="type">Type investigated for the <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see>.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.ITypeMappingProvider.GetMemberFieldAttribute(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> for the given member. If the member is not mapped,
            null is returned.
            </summary>
            <param name="type">The persistent type that's mapping is created.</param>
            <param name="member">The member of the persistent type.</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> or null if the member is not mapped.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.ITypeMappingProvider.GetMemberRelationAttribute(System.Type,System.Reflection.MemberInfo,System.Type)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> for the given member. If the member does not
            have an attribute set, null is returned.
            </summary>
            <param name="type">The persistent type that's mapping is created.</param>
            <param name="member">The member of the persistent type.</param>
            <param name="relatedType">The related object's type.</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> or null if the member does not have
            an attribute set.</returns>
        </member>
        <member name="T:Chili.Opf3.Mapping.IRelatedPropertiesPair">
            <summary>
            Specifies the relation between two properties of two objects.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IRelatedPropertiesPair.ChildMember">
            <summary>
            Returns the object member of the child class.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IRelatedPropertiesPair.ParentMember">
            <summary>
            Returns the object member of the parent class.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Mapping.DynamicPopulateHelperMetaInfo">
            <summary>
            Class represents a meta element that is used to create the mapping between the persistent object and
            the field in the table.
            </summary>
            <remarks>
            This class represents a meta element that is used to create the mapping between a field
            of the persistent object and a field in the storage table. This class uses the <see cref="T:Chili.Opf3.IDynamicPopulateHelper">IDynamicPopulateHelper</see>
            interface to set and get the values in/from the persistent's members.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Mapping.DynamicPopulateHelperMetaInfo.#ctor(System.Reflection.MemberInfo,System.Type,Chili.Opf3.FieldAttribute)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Mapping.DynamicPopulateHelperMetaInfo">DynamicPopulateHelperMetaInfo Class</see>.
            </summary>
            <param name="memberInfo">The MemberInfo object that represents the member in the persistent object's type.</param>
            <param name="type">Specifies the type of the member.</param>
            <param name="attribute">The <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> that contains the mapping information.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.DynamicPopulateHelperMetaInfo.EmitMethods(System.Reflection.MemberInfo)">
            <summary>
            Emits the methods to the type.
            </summary>
            <param name="memberInfo">The member that is accessed via the method.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.DynamicPopulateHelperMetaInfo.EmitSetMethod(System.Reflection.PropertyInfo)">
            <summary>
            Emits the set method for the member in the type.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Chili.Opf3.Mapping.DynamicPopulateHelperMetaInfo.EmitGetMethod(System.Reflection.PropertyInfo)">
            <summary>
            Emits the get method for the member in the type.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Chili.Opf3.Mapping.DynamicPopulateHelperMetaInfo.GetValue(System.Object)">
            <summary>
            Returns the value of the element of the persistent object type that is mapped to a field in the storage.
            </summary>
            <param name="obj">The persistent object that's value is returned.</param>
            <returns>Value of the persistent object types's element that is mapped to a field in the storage.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.DynamicPopulateHelperMetaInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets new value for the element of the persistent object type that is mapped to the storage.
            </summary>
            <param name="obj">The persistent object that's value is updated.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="P:Chili.Opf3.Mapping.DynamicPopulateHelperMetaInfo.Name">
            <summary>
            Returns the name of the element of the persistent object type that is mapped to the field in the storage.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Caching.SimpleCacheManager">
            <summary>
            Class that implements a simple caching algorithm.
            </summary>
            <remarks>
            <para>
            	<strong>Thread Safety:</strong> This class is thread safe.
            </para>
            <para>
            This class implements a simple caching algorithm. This algorithm uses internally a weak
            references cache that holds instances of persistent objects. The instances are hold as long
            in the cache as long they exist in the current AppDomain (in simple words: in the current process). 
            If the instances have been collected by the GC they are also removed from this cache.
            </para>
            <para>
            To have persistent objects cached by the SimpleCacheManager they need to be decorated with the
            <see cref="T:Chili.Opf3.Caching.SimpleCacheAttribute">SimpleCacheAttribute</see>. All persistent without that attribute, are
            not cached!
            </para>
            </remarks>
            <example>
                The following example shows how to set the SimpleCacheManager. 
                <code lang="CS">
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", 
                "localhost", "application"));
            // Set the CacheManager.
            SimpleCacheManager cache = new SimpleCacheManager();
            context.CacheManager = cache;
            // Extend the cache duration of a persistent if requested a second time.
            // Basically reset the expiration timer for that persistent.
            cache.ExtendDurationOnRequest = true;
            
            // Set the default duration for a persistent to 10 seconds.
            cache.PersistentsDefaultDuration = new TimeSpan(10000);
            // Set the default duration for a query to 20 seconds.
            cache.QueriesDefaultDuration = new TimeSpan(20000);
            
            // ... Other code.
            
            // Clear all persistents that are cached.
            cache.ClearPersistents();
            
            // Clear also all queries that are cached.
            cache.ClearQueries();
                </code>
            </example>
        </member>
        <member name="T:Chili.Opf3.Caching.CacheManagerBase">
            <summary>
            Class offers some basic methods for caching manager.
            </summary>
            <remarks>
            This abstract class offers some basic methods for caching manager classes. The methods allow
            fast building of cache keys for a persistent object or to equal two keys.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Caching.CacheManagerBase.AddPersistentObject(System.Object)">
            <summary>
            Adds a persistent object to the cache.
            </summary>
            <param name="obj">The object that is added.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.CacheManagerBase.GetObjectReader``1(Chili.Opf3.ObjectContext,Chili.Opf3.Query.IQuery)">
            <summary>
            Gets an instance of the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> for the given query.
            </summary>
            <param name="context">The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> used to load the reader.</param>
            <param name="query">A class that implements the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.CacheManagerBase.BuildUniqueKey(System.Object)">
            <summary>
            Builds a key for the object. This key may be used in the cache. The key that is 
            created contains also information about the type of the persistent object.
            </summary>
            <param name="obj">The persistent object that's key is build.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.CacheManagerBase.BuildUniqueKey(System.Type,System.Data.IDataRecord)">
            <summary>
            Builds a key for the given type an data record. This key may be used in the cache.
            The key that is created contains also information about the type of the persistent object.
            </summary>
            <param name="type">The type of the persistent object.</param>
            <param name="dataRecord">The data record used to create the key.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.CacheManagerBase.BuildUniqueKey(Chili.Opf3.Storages.IStorage,Chili.Opf3.Query.IQuery)">
            <summary>
            Builds a key for the given query. This key may be used in the cache.
            </summary>
            <param name="storage">The storage on which the query is executed.</param>
            <param name="query">The query whose key is generated.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.CacheManagerBase.ChecksumToString(System.Byte[])">
            <summary>
            Converts the byte checksum to a string.
            </summary>
            <param name="checksum">The checksum to convert.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Caching.SimpleCacheManager">SimpleCacheManager Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.Collector">
            <summary>
            Collects expired instances found in the cached.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.GetObjectReader``1(Chili.Opf3.ObjectContext,Chili.Opf3.Query.IQuery)">
            <summary>
            Gets an instance of the <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see> for the given query.
            </summary>
            <param name="context">The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> used to load the reader.</param>
            <param name="query">A class that implements the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> interface.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.AddPersistentObject(System.Object)">
            <summary>
            Adds a persistent object to the cache.
            </summary>
            <param name="obj">The object that is added.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.AddObject(System.Object,Chili.Opf3.Caching.CachedPersistent@)">
            <summary>
            Adds an object to the cache.
            </summary>
            <param name="obj">The object that is added.</param>
            <param name="persistent">The cached persistent object that is generated for the object.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.IsPersistentObjectInCache(System.Object)">
            <summary>
            Returns whether the given persistent object is in cache.
            </summary>
            <param name="obj">The persistent object that is checked for being in the cache.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.RemovePersistentObject(System.Object)">
            <summary>
            Removes the persistent object from the cache.
            </summary>
            <param name="obj">The persistent object to remove.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.GetValidUntil(Chili.Opf3.Caching.SimpleCacheAttribute,System.Boolean)">
            <summary>
            Gets the valid until date time for the given attribute.
            </summary>
            <param name="attribute">The attribute that is used to create the date time.</param>
            <param name="persistent">Specifies whether the date time is created for a persistent or a query.</param>
            <returns></returns>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.GetAttribute(System.Type)">
            <summary>
            Gets the attribute for the given type or null if the type has no attribute.
            </summary>
            <param name="type">The type that is checked for the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.OnAddingQuery(Chili.Opf3.Caching.AddingQueryEventArgs)">
            <summary>
            Invokes the AddingQuery event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.OnAddingPersistent(Chili.Opf3.Caching.AddingPersistentEventArgs)">
            <summary>
            Invokes the AddingPersistent event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.Clear">
            <summary>
            Clears the whole cache.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.ClearQuery(Chili.Opf3.Storages.IStorage,Chili.Opf3.Query.IQuery)">
            <summary>
            Clears a query for the given storage.
            </summary>
            <param name="storage">The storage the query has been executed on.</param>
            <param name="query">The query to clear.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.ClearQueries">
            <summary>
            Clears the queries cache.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.ClearQueries(Chili.Opf3.Storages.IStorage)">
            <summary>
            Clears all queries for the given storage.
            </summary>
            <param name="storage">The storage the query has been executed on.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.ClearQueries(Chili.Opf3.Storages.IStorage,System.Type)">
            <summary>
            Clears all queries for the given storage and persistent type.
            </summary>
            <param name="storage">The storage the query has been executed on.</param>
            <param name="persistentsType">The persistents' type returned by the query.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.ClearQueriesOlderThan(Chili.Opf3.Storages.IStorage,System.DateTime)">
            <summary>
            Clears all queries for the given storage.
            </summary>
            <param name="storage">The storage the query has been executed on.</param>
            <param name="date">The date all queries older than should be deleted.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.ClearPersistentsOlderThan(System.Type,System.DateTime)">
            <summary>
            Clears all persistents of the given type which are older then the given date.
            </summary>
            <param name="type">The type of persistents that are deleted.</param>
            <param name="date">The date all persistent objects older than should be deleted.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.ClearPersistentsOlderThan(System.DateTime)">
            <summary>
            Clears all which are older then the given date.
            </summary>
            <param name="date">The date all persistent objects older than should be deleted.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.ClearPersistents">
            <summary>
            Clears all persistent objects in the cache.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheManager.ClearPersistents(System.Type)">
            <summary>
            Clears all persistent objects of the given type.
            </summary>
            <param name="type">The type of persistents that are deleted.</param>
        </member>
        <member name="P:Chili.Opf3.Caching.SimpleCacheManager.FetchFromStorageIfNull">
            <summary>
            Gets or sets whether to fetch the persistent from storage if not found in cache.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Caching.SimpleCacheManager.PersistentsDefaultDuration">
            <summary>
            Gets or sets the default cache duration for a cached persistent.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Caching.SimpleCacheManager.QueriesDefaultDuration">
            <summary>
            Gets or sets the default cache duration for a cached query.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Caching.SimpleCacheManager.ExtendDurationOnRequest">
            <summary>
            Gets or sets whether to extend the cache duration on a cache request. If true each request of a persistent
            or query extends the cache duration for the specified time span.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Caching.SimpleCacheManager.ExtendDurationOnMultipleAdd">
            <summary>
            Gets or sets whether to extend the cache duration of an existing item if added a second time. If true 
            on a second add the cache duration of the existing object is extended.
            </summary>
        </member>
        <member name="E:Chili.Opf3.Caching.SimpleCacheManager.AddingQuery">
            <summary>
            Signalizes that a query is being added to the cache.
            </summary>
        </member>
        <member name="E:Chili.Opf3.Caching.SimpleCacheManager.AddingPersistent">
            <summary>
            Signalizes that a persistent is being added to the cache.
            </summary>
        </member>
        <member name="T:Chili.Opf3.IRelationsPopulateHelper">
             <summary>
             Interface that is implemented to control the way how relations are loaded.
             </summary>
             <remarks>
             	<para>This interface is implemented by classes that won't let the framework
                 automatically populate the relations with data.</para>
             	<para>If the framework encounters a persistent object that implements this
                 interface it asks the persistent if to populate it. The persistent returns whether
            		to do it on its own or to let the framework populate it. If the interface loads
            		the related data a second method is invoked to do the loading.</para>
             </remarks>
             <example>
                 The following example shows how to implement the interface. In the following example
            		all the related properties aren't populate.
                 <code lang="CS">
             [Persistent("USER")]
             public class User : IRelationsPopulateHelper
             {
            	   // ... Other properties and code.
            		
                bool IRelationsPopulateHelper.RelationIsHandled(string relationName, RelationInformation info)
                {
                    // Return true for all relations. Means all are handled by this interface.
                    return true;
                }
            
                object IRelationsPopulateHelper.GetRelatedObject(string relationName, RelationInformation info)
                {
                   // Return null for all relations. No related object is going to be populated.
                   return null;
                }
             }
                 </code>
             </example>
        </member>
        <member name="M:Chili.Opf3.IRelationsPopulateHelper.RelationIsHandled(System.String,Chili.Opf3.Relations.RelationInformation)">
            <summary>
            Returns whether the relation is handled by the interface.
            </summary>
            <param name="relationName">The name of the relation that is checked for being handled.</param>
            <param name="info">An instance of the <see cref="T:Chili.Opf3.Relations.RelationInformation">RelationInformation</see> object
            that holds the most important information for the relation.</param>
            <returns>True if the relation is handled by the interface; otherwise false.</returns>
        </member>
        <member name="M:Chili.Opf3.IRelationsPopulateHelper.GetRelatedObject(System.String,Chili.Opf3.Relations.RelationInformation)">
            <summary>
            Returns the related object for the relation.
            </summary>
            <remarks>
            This method loads the related object(s) and returns it/them. If the relation would return an 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> (see <see cref="T:Chili.Opf3.Relations.ObjectSetHolder`1">ObjectSetHolder</see>) this 
            method needs to return an ObjectSet; the  same applies to List&lt;T&gt; (see 
            <see cref="T:Chili.Opf3.Relations.ObjectListHolder`1">ObjectListHolder</see>) and a single persistent 
            (see <see cref="T:Chili.Opf3.Relations.ObjectHolder`1">ObjectHolder</see>). Otherwise a runtime error is going to be thrown.		
            </remarks>
            <param name="relationName">The name of the relation.</param>
            <param name="info">An instance of the <see cref="T:Chili.Opf3.Relations.RelationInformation">RelationInformation</see> object
            that holds the most important information for the relation.</param>
            <returns>The related object(s) or null if nothing should be returned.</returns>
        </member>
        <member name="T:Chili.Opf3.Storages.StorageConstraintException">
            <summary>
            Exception is thrown if a constraint in the storage has been violated while 
            persisting an object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Storages.StorageConstraintException">StorageConstraintException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageConstraintException.#ctor(Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Storages.StorageConstraintException">StorageConstraintException Class</see>.
            </summary>
            <param name="query">Query that has been executed before the exception has been thrown.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageConstraintException.#ctor(System.String,Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Storages.StorageConstraintException">StorageConstraintException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="query">Query that has been executed before the exception has been thrown.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.StorageConstraintException.#ctor(System.String,System.Exception,Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Storages.StorageConstraintException">StorageConstraintException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="inner">The exception that caused the current exception.</param>
            <param name="query">Query that has been executed before the exception has been thrown.</param>
        </member>
        <member name="T:Chili.Opf3.Mapping.MappingContainer">
            <summary>
            Contains the all entity-object mappings of the persistent object types.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.MappingContainer.GetTypeMapping(System.Object)">
            <summary>
            Returns the mapping for a given object. If the mapping does not exist it is created by this routine.
            </summary>
            <param name="obj">The object the mapping is returned.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.MappingContainer.GetTypeMapping(System.Type)">
            <summary>
            Returns the mapping for the given persistent type. If the mapping does not exist it is 
            created by this routine.
            </summary>
            <param name="type">Type of object the mapping is returned.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.MappingContainer.GetPersistentType(System.Type)">
            <summary>
            Gets the persistent type from the given type.
            </summary>
            <param name="type">The type that's persistent type is returned.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.MappingContainer.RegisterPersistentInterface(System.Type,System.Type)">
            <summary>
            Registers the given interface type with the persistent object type.
            </summary>
            <param name="interfaceType">The type of the interface registered with the persistent type.</param>
            <param name="persistentType">The type of the persistent registered with the interface type.</param>
        </member>
        <member name="T:Chili.Opf3.Relations.RelationAttribute">
             <summary>
             This attribute is used to specify a relation between two or more persistent
             objects.
             </summary>
             <remarks>
             	<para>This attribute is used on ObjectHolder classes
                 (<see cref="T:Chili.Opf3.Relations.ObjectHolder`1">ObjectHolder</see>,
                 <see cref="T:Chili.Opf3.Relations.ObjectListHolder`1">ObjectListHolder</see>,
                 <see cref="T:Chili.Opf3.Relations.ObjectSetHolder`1">ObjectSetHolder</see>) to specify the
                 relation between the connected (related) persistent objects and the parent object
                 (the persistent object that contains the attribute and the ObjectHolder class). The
                 attribute supports one-to-one, one-to-many and many-to-many relations.</para>
             	<para>To use the attribute you have to specify the ParentMember (which is a
                 property or field of the parent object) and the ChildMember (which is one property or field of the
                 child object). Usually one of the object member (property or field) is marked as foreign key in the
                 storage.</para>
             </remarks>
             <example>
                 The following example shows the usage of the RelationAttribute in combination with
                 a ObjectSetHolder .
                 <code lang="CS">
             [Persistent("USER", PoolSize = 50)]
              public class User
              {
                     // ... Other properties and code.
              
                     // The class contains an ObjectSetHolder and a RelationAttribute
                     // that specifies the relation between the parent object and the 
                     // related objects.
                     [Relation("Id", "UserId")]
                     private ObjectSetHolder&lt;Call&gt; _calls = new ObjectSetHolder&lt;Call&gt;();
             
                     // This relation specifies a many-to-many relation. Each user has different rights
                     // and each right has different user.
                     [Relation("Id = UserId", WeakPersistent = typeof(UserRight), 
                         WeakRelations = "RightId = Id", Name = "Rights"]
                     private ObjectSetHolder&lt;Right&gt; _rights = new ObjectSetHolder&lt;Right&gt;();
                 
                     public ObjectSet&lt;Call&gt; Calls
                     {
                         get { return _calls.InnerObject; }
                         set { _calls.InnerObject = value; }
                     }
              
                     [Field("ID", Identifier = true, AllowDBNull = false)]
                     public string Id
                     {
                         get { return _id; }
                         set { _id = value; }
                     }
                     
                     // ... Other properties and code.
              }
              
              [Persistent("CALLS", PoolSize = 20)]
              public class Call
              {
                     // ... Other properties and code.
              
                     [Field("USER_ID")]
                     public string UserId
                     {
                         get { return _userId; }
                         set { _userId = value; }
                     }
              
                     // ... Other properties and code.
              }
             
              [Persistent("USER_RIGHTS")]
            	 public class UserRight
              {
                     // ... Other properties and code.
              
                     [Field("USER_ID", AllowDBNull = false, Identifier = true)]
                     public string UserId
                     {
                         get { return _userId; }
                         set { _userId = value; }
                     }
                     
                     [Field("RIGHT_ID", AllowDBNull = false, Identifier = true)]
                     public string RightId
                     {
                         get { return _rightId; }
                         set { _rightId = value; }
                     }
              }
             
              [Persistent("RIGHTS")]
              public class Right
              {
                     // ... Other properties and code.
            			
                     [Field("ID", AllowDBNull = false, Identifier = true)]
                     public string Id
                     {
                         get { return _rightId; }
                         set { _rightId = value; }
                     }
                     
                     [Field("NAME", AllowDBNull = false)]
                     public string Name
                     {
                         get { return _name; }
                         set { _name = value; }
                     }
              }
                 </code>
                 The following example shows the usage of the RelationAttribute with multiple columns as keys.
                 <code lang="CS">
             [Persistent("USER", PoolSize = 50)]
              public class User
              {
                     // ... Other properties and code.
              
                     // The class contains an ObjectSetHolder and a RelationAttribute
                     // that specifies the relation between the parent object and the 
                     // related objects. Multiple columns are separated by a semi colon (;).
                     // The relation is also given a name.
                     [RelationAttribute("Id1 = UserId1; Id2 = UserId2", Name = "Calls")]
                     private ObjectSetHolder&lt;Call&gt; _calls = new ObjectSetHolder&lt;Call&gt;();
                 
                     public ObjectSet&lt;Call&gt; Calls
                     {
                         get { return _calls.InnerObject; }
                         set { _calls.InnerObject = value; }
                     }
              
                     [Field("ID1", Identifier = true, AllowDBNull = false)]
                     public string Id1
                     {
                         get { return _id1; }
                         set { _id1 = value; }
                     }
                     
                     [Field("ID2", Identifier = true, AllowDBNull = false)]
                     public string Id2
                     {
                         get { return _id2; }
                         set { _id2 = value; }
                     }
            
                     // ... Other properties and code.
              }
            		</code>
             </example>
        </member>
        <member name="M:Chili.Opf3.Relations.RelationAttribute.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.RelationAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute Class</see>.
            </summary>
            <param name="parentMember">Specifies the name of the parent object member. The parent object member is 
            usually a property or field in the parent object.</param>
            <param name="childMember">Specifies the name of the child object member. The child object member is usually a
            property or field in the child object. The field of the object member should be marked as foreign key
            in the storage.</param>
            <exception cref="T:System.ArgumentNullException">ParentMember is null or childMember is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Relations.RelationAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute Class</see>.
            </summary>
            <param name="relations">Specifies the relations between properties of different objects.</param>
            <exception cref="T:System.ArgumentNullException">Relations is null.</exception>
        </member>
        <member name="P:Chili.Opf3.Relations.RelationAttribute.WeakRelations">
            <summary>
            Specifies the relations between the weak persistent object and the target child object.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is null.</exception>
        </member>
        <member name="P:Chili.Opf3.Relations.RelationAttribute.Relations">
            <summary>
            Returns the relations specified in the constructor of the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see>
            class.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Relations.RelationAttribute.WeakPersistent">
            <summary>
            Specifies the type of the weak persistent object. This object represents a weak entity required for
            many-to-many relations.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Relations.RelationAttribute.PersistRelationship">
            <summary>
            Specifies the
            <see cref="T:Chili.Opf3.Relations.PersistRelationships">PersistRelationship</see>
            between two persistent objects. This flag is only necessary when creating a 1:1
            relation. It specifies which object is saved first (the parent or the child object).
            Default is ParentFirst.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Relations.RelationAttribute.PersistBehaviours">
            <summary>Specifies the persist behaviour of the relation.</summary>
            <remarks>
            	<para>By setting the behaviour you may only allow to insert or update relation.
                The default behaviour is to insert and update the relation in the storage.</para>
            </remarks>
            <value>Returns the persist behaviour of the relation.</value>
        </member>
        <member name="P:Chili.Opf3.Relations.RelationAttribute.Name">
            <summary>
            Specifies the name for the relation. The name should be unique in a persistent type.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.OEJoin">
            <summary>
            Represents a simple join in the OPath statement. 
            </summary>
            <remarks>
            Simple joins in a OPath statement are converted to this class when OPath is compiled.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OEJoin.#ctor(Chili.Opf3.PersistentAttribute)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.OPathParser.OEJoin">OEJoin Class</see>.
            </summary>
            <param name="attribute">The <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see>
            of the joined persistent object.</param>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.OEJoin.PersistentAttribute">
            <summary>
            Returns the <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see> of the joined 
            persistent object.
            </summary>
            <value>The <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see>
            of the joined persistent object.</value>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.OEInlineParameter">
            <summary>
            Represents an inline parameter in the OPath statement. 
            </summary>
            <remarks>
            Inline parameters in a OPath statement are converted to this class when OPath is compiled. Those
            kind of parameters should only be used for non-dynamic parameters.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OEInlineParameter.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.OPathParser.OEInlineParameter">OEInlineParameter Class</see>.
            </summary>
            <param name="value">The value of the inline parameter. For example a string or a numeric value.</param>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.OEInlineParameter.Value">
            <summary>
            Returns the value of the inline parameter.
            </summary>
            <value>The value of the inline parameter.</value>
        </member>
        <member name="T:Chili.Opf3.PersistentOperations">
            <summary>
            This enumeration holds all operations that are available on a persistent object.
            </summary>
        </member>
        <member name="F:Chili.Opf3.PersistentOperations.Load">
            <summary>
            This operation loads the persistent object from the storage.
            </summary>
        </member>
        <member name="F:Chili.Opf3.PersistentOperations.Insert">
            <summary>
            This operatin inserts the persistent object in the storage.
            </summary>
        </member>
        <member name="F:Chili.Opf3.PersistentOperations.Update">
            <summary>
            This operation updates the persistent object in the storage.
            </summary>
        </member>
        <member name="F:Chili.Opf3.PersistentOperations.Delete">
            <summary>
            This operation deletes the persistent object from the storage.
            </summary>
        </member>
        <member name="T:Chili.Opf3.PersistBehaviours">
            <summary>
            The member of this enumeration mark and enhance properties with special behaviour
            applied during the save process of a persistent object.
            </summary>
            <remarks>
            This enumeration is used to mark properties with special persisting behaviour. It
            allows to control the persisting behaviour on properties during insert and update operations of 
            the persistent object. DontInsert means, for example, that the value of the property is not 
            inserted during an insert operation of the persistent object.
            </remarks>
            <example>
                The following example shows a property that is only saved during an insert of the persistent object.
                The <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> is used to connect a
                property with a field of the entity. For additional information check out the 
                documentation of the <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> or the
                <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see>.
                <code lang="CS">
            [Persistent("USER")]
            public class User
            {
                private string _name = null;
                
                [Field("NAME", PersistBehaviours = PersistBehaviours.DontUpdate)]
                public string Name
                {
                    get { return _name; }
                    set { _name = value; }
                }
                
                // ... Other properties and fields.
            }
                </code>
            </example>
        </member>
        <member name="F:Chili.Opf3.PersistBehaviours.None">
            <summary>
            A property marked with this flag is always persisted. It does not matter if the
            persistent is inserted or updated in the storage. This is the default behaviour of a
            property.
            </summary>
        </member>
        <member name="F:Chili.Opf3.PersistBehaviours.DontInsert">
            <summary>
            A property marked with this flag is not inserted. If the persistent object is updated this
            property is also updated.
            </summary>
        </member>
        <member name="F:Chili.Opf3.PersistBehaviours.DontUpdate">
            <summary>
            A property marked with this flag is not updated. If the persistent object is inserted this
            property is also inserted.
            </summary>
        </member>
        <member name="T:Chili.Opf3.ObjectPersistingEventArgs">
            <summary>
            EventArgs used in the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> events
            that are invoked before the persist process of an object.
            </summary>
            <remarks>
            This class is used by the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> in
            events that are invoked before the persist process of an object to send additional event
            data. The data contains the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object that
            contains further information about the state of the object, the object itself and the
            <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> object that represents the query of the
            current operation.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.ObjectPersistingEventArgs.#ctor(Chili.Opf3.Query.IQuery,System.Object,Chili.Opf3.ObjectInfo)">
            <summary>
            Creates a new instance of the<see cref="T:Chili.Opf3.ObjectPersistingEventArgs">ObjectPersistingEventArgs Class</see>.
            </summary>
            <param name="query"><see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> used by for the current operation.</param>
            <param name="obj">The object that is affected by the current operation. This object is persisted to the storage. </param>
            <param name="objectInfo"><see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object that contains state information about the persistent object.</param>
            <exception cref="T:System.ArgumentNullException">Query is null, obj is null or objectInfo is null.</exception>
        </member>
        <member name="P:Chili.Opf3.ObjectPersistingEventArgs.ObjectInfo">
            <summary>
            Returns the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object that 
            contains state information about the persistent object.
            </summary>
            <value>
            The <see cref="P:Chili.Opf3.ObjectPersistingEventArgs.ObjectInfo">ObjectInfo</see> object that contains state
            information about the persistent object.
            </value>
        </member>
        <member name="P:Chili.Opf3.ObjectPersistingEventArgs.Object">
            <summary>
            Returns the object that is affected by the current operation. This object is
            persisted to the storage.
            </summary>
            <value>The object affected by the current operation.</value>
        </member>
        <member name="P:Chili.Opf3.ObjectPersistingEventArgs.Query">
            <summary>
            Specifies the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> of the current
            operation.
            </summary>
            <value>
            The <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> of the current
            operation.<see cref="T:Chili.Opf3.ObjectPersistingEventArgs">ObjectPersistingEventArgs
            Class</see><see cref="T:Chili.Opf3.ObjectNotificationEventArgs">ObjectNotificationEventArgs
            Class</see>
            </value>
        </member>
        <member name="T:Chili.Opf3.Concurrency.ConcurrencyException">
            <summary>
            Exception is thrown if a concurrency problem happens.
            </summary>
            <remarks>
            This exception is thrown by the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> or
            <see cref="T:Chili.Opf3.Concurrency.IConcurrencyManager">IConcurrencyManager</see> if a concurrency
            problem happened. It should be catched on each save process in your application to notice 
            the user that a concurrency problem happend.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Concurrency.ConcurrencyException.#ctor(System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Concurrency.ConcurrencyException">ConcurrencyException Class</see>.
            </summary>
            <param name="persistent">The persistent object that caused the exception.</param>
            <param name="storagePersistent">The persistent object that has been reloaded from the storage to check for concurrency problems.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.ConcurrencyException.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Concurrency.ConcurrencyException">ConcurrencyException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="persistent">The persistent object that caused the exception.</param>
            <param name="storagePersistent">The persistent object that has been reloaded from the storage to check for concurrency problems.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.ConcurrencyException.#ctor(System.String,System.Object,System.Object,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Concurrency.ConcurrencyException">ConcurrencyException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="persistent">The persistent object that caused the exception.</param>
            <param name="inner">The exception that caused the current exception.</param>
            <param name="storagePersistent">The persistent object that has been reloaded from the storage to check for concurrency problems.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.ConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Concurrency.ConcurrencyException">ConcurrencyException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Concurrency.ConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Restores the objects data after serialization.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Concurrency.ConcurrencyException.Persistent">
            <summary>
            Returns the persistent object that caused the exception.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Concurrency.ConcurrencyException.StoragePersistent">
            <summary>
            Return the persistent object that has been reloaded from the storage to check for concurrency problems.
            Or null if the persistent hasn't been found in the storage.
            </summary>
        </member>
        <member name="T:Chili.Opf3.FetchingStorageRecordEventArgs">
            <summary>
            EventArgs used in the
            <see cref="T:Chili.Opf3.PersistentTypeSelector">PersistentTypeSelector</see> delegate and events using the
            <see cref="T:Chili.Opf3.PersistentTypeSelector">PersistentTypeSelector</see> delegate. 
            </summary>
            <remarks>
            This EventArgs class is used in the 
            <see cref="T:Chili.Opf3.PersistentTypeSelector">PersistentTypeSelector</see> delegate and events using the
            <see cref="T:Chili.Opf3.PersistentTypeSelector">PersistentTypeSelector</see> delegate. 
            Some examples for the usage of this class are:
            <see cref="E:Chili.Opf3.ObjectReader`1.FetchingStorageRecord">FetchingStorageRecord</see> of the 
            <see cref="T:Chili.Opf3.ObjectReader`1">ObjectReader</see>, 
            <see cref="E:Chili.Opf3.ObjectSet`1.FetchingStorageRecord">FetchingStorageRecord</see> of the 
            <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see>, 
            <see cref="E:Chili.Opf3.Relations.ObjectSetHolder`1.FetchingStorageRecord">FetchingStorageRecord</see> of the 
            <see cref="T:Chili.Opf3.Relations.ObjectSetHolder`1">ObjectSetHolder</see> and
            <see cref="E:Chili.Opf3.Relations.ObjectHolder`1.FetchingStorageRecord">FetchingStorageRecord</see> of the 
            <see cref="T:Chili.Opf3.Relations.ObjectHolder`1">ObjectHolder</see> class.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.FetchingStorageRecordEventArgs.#ctor(System.Data.IDataReader,System.Type)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Chili.Opf3.FetchingStorageRecordEventArgs">FetchingStorageRecordEventArgs Class</see>.
            </summary>
            <param name="dataRecord">The current record (row or item) of the storage.</param>
            <param name="type">The current type of the persistent object to create.</param>
        </member>
        <member name="P:Chili.Opf3.FetchingStorageRecordEventArgs.Type">
            <summary>
            Specifies the type of the persistent object that is created.
            </summary>
        </member>
        <member name="P:Chili.Opf3.FetchingStorageRecordEventArgs.DataRecord">
            <summary>
            Returns the current <see cref="T:System.Data.IDataRecord">IDataRecord</see> representing the current
            row or item of the storage.
            </summary>
        </member>
        <member name="P:Chili.Opf3.FetchingStorageRecordEventArgs.Ignore">
            <summary>
            Specifies whether to ignore the current row or item of the storage. Ignoring the current means
            that no persistent object is created and the framework tries to process the next item.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Concurrency.ConcurrencyDataBase">
            <summary>
            This class is the base class of all classes containing concurrency data.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Concurrency.ConcurrencyDataBase.Clone">
            <summary>Creates a new object that is a copy of the current instance.</summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Chili.Opf3.Mapping.RelatedPropertiesPair">
            <summary>
            Specifies the relation between two properties of two objects.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelatedPropertiesPair.#ctor(Chili.Opf3.Mapping.IMemberInfo,Chili.Opf3.Mapping.IMemberInfo)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Mapping.RelatedPropertiesPair">RelatedPropertiesPair Class</see>.
            </summary>
            <param name="parentMember">The object member in the parent class.</param>
            <param name="childMember">The object member in the child class.</param>
        </member>
        <member name="P:Chili.Opf3.Mapping.RelatedPropertiesPair.ParentMember">
            <summary>
            Returns the object member of the parent class.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.RelatedPropertiesPair.ChildMember">
            <summary>
            Returns the object member of the child class.
            </summary>
        </member>
        <member name="T:Chili.Opf3.RelationsNotificationEventArgs">
            <summary>
            EventArgs used in the
            <see cref="T:Chili.Opf3.IRelationsNotification">IRelationsNotification</see> interface.
            </summary>
            <remarks>
            This EventArgs class is used by the
            <see cref="T:Chili.Opf3.IRelationsNotification">IRelationsNotification</see> interface to send
            additional event data. The data that is passed contains the
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation. The type of the
            current relationship (<see cref="T:Chili.Opf3.Relations.PersistRelationships">PersistRelationships</see>) and the
            current operation on the persistent (<see cref="T:Chili.Opf3.PersistentOperations">PersistentOperations</see>) that
            holds the relation.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.RelationsNotificationEventArgs.#ctor(Chili.Opf3.ObjectContext,Chili.Opf3.Relations.PersistRelationships,Chili.Opf3.PersistentOperations)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.RelationsNotificationEventArgs">RelationsNotificationEventArgs Class</see>.
            </summary>
            <param name="context">The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.</param>
            <param name="persistRelationship">Specifies the relationship between the parent and the related objects.</param>
            <param name="currentOperation">Specifies the current operation on the parent persistent object.</param>
        </member>
        <member name="P:Chili.Opf3.RelationsNotificationEventArgs.Context">
            <summary>
            Returns the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.
            </summary>
            <value><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.</value>
        </member>
        <member name="P:Chili.Opf3.RelationsNotificationEventArgs.PersistRelationship">
            <summary>
            Returns the <see cref="P:Chili.Opf3.RelationsNotificationEventArgs.PersistRelationship">PersistRelationship</see> between the parent and the
            related objects.
            </summary>
        </member>
        <member name="P:Chili.Opf3.RelationsNotificationEventArgs.PersistentOperation">
            <summary>
            Returns the <see cref="T:Chili.Opf3.PersistentOperations">current operation</see> that is executed on the 
            persistent object that holds the relation.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Query.PersistentObjectExpression">
            <summary>
            Represents a dynamic runtime object expression that is used to create dynamic storage commands.
            </summary>
            <remarks>
            This class represents a dynamic runtime object expression that converts a persistent object to a dynamic storage
            command. The data of the persistent object to create the command is queried when the <see cref="M:Chili.Opf3.Query.Expression.ToCompiledQuery(Chili.Opf3.Storages.IStorage)">ToCompiledQuery</see>
            method is executed. All changes within the persistent object reflect immediately to the <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see> output.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.PersistentObjectExpression.#ctor(Chili.Opf3.Query.QueryTypes,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.PersistentObjectExpression">PersistentObjectExpression</see> Class.
            </summary>
            <param name="queryType"> Specifies the <see cref="T:Chili.Opf3.Query.QueryTypes">QueryType</see> of the <see cref="T:Chili.Opf3.Query.PersistentObjectExpression">PersistentObjectExpression</see>.
            </param>
            <param name="obj">The object that is bound to the PersistentObjectExpression.</param>
        </member>
        <member name="M:Chili.Opf3.Query.PersistentObjectExpression.CheckFieldForValidData(System.Object)">
            <summary>
            Checks the members of the persistent for valid data.
            </summary>
            <param name="obj">The persistent object whose members are checked.</param>
        </member>
        <member name="P:Chili.Opf3.Query.PersistentObjectExpression.Persistent">
            <summary>
            Returns the object managed by the expression.
            </summary>
        </member>
        <member name="T:Chili.Opf3.ObjectSearcher`1">
             <summary>
             Allows to search in the storage for persistent objects of a certain type.
             </summary>
             <remarks>
             <para>
             This class is specialized to load objects from the storage. The implementation is 
             gerneric: once created it allows you to load only objects of the generic type.
             Usually the generic ObjectSearcher class is created by using the 
             <see cref="M:Chili.Opf3.ObjectContext.GetObjectSearcher``1">GetObjectSearcher</see> function of the 
             <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>.
             ObjectSearcher contains a few methods (for example: <see cref="M:Chili.Opf3.ObjectSearcher`1.FindAll">FindAll</see>) to
             search for objects.
             </para>
             <para>
             <see cref="M:Chili.Opf3.ObjectSearcher`1.FindAll">FindAll</see> returns an instance of the
             <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> class. This class contains the result of the search. FindAll has been 
             overloaded to return also a class that implements the <see cref="T:System.Collections.Generic.IList`1">IList</see> 
             interface with the resultset.
             </para>
             <para>
             The ObjectSearcher should be also used to encapsulate complex queries. If you have a complex SQL statement you
             should derive from ObjectSearcher and create your own "Searcher" class. To create your own "Searcher" classes derive 
             directly from ObjectSearcher and extend it with your own methods (For further information see the example below). 
             </para>
             </remarks>
             <example>
             The following example shows how to get an ObjectSearcher that searches for User objects. 
             The second example shows how to derive from ObjectSearcher to create an own searcher class.
            		<code lang="CS">
             [Persistent("USER")]
             public class User
             {
            		private string _name = null;
             
            		[Field("NAME")]
            		public string Name
            		{
            			get { return _name; }
            			set { _name = value; }
            		}
             
            		// ... Other properties and fields.
             }
             
             // ... Other code
             
             // Get the ObjectSearcher for User.
             ObjectSearcher&lt;User&gt; searcher = context.GetObjectSearcher&lt;User&gt;();
             // Find all user in the storage.
             ObjectSet&lt;User&gt; objectSet = searcher.FindAll();
             
             // Find only those with a given name by using conditions and sorts them.
             objectSet = searcher.FindAll("Name Like {0} SortBy Name Asc", "%mith%");
            		</code>
            		<code lang="CS">
             // UserSearcher is a specialized class that searches only for user objects.
             public class UserSearcher : ObjectSearcher&lt;User&gt;
             {
            		public UserSearcher(ObjectContext context) : base(context)
            		{
            		}
             
            		// Returns all user with at least one call.
            		public ObjectSet&lt;User&gt; GetWithCalls()
            		{
            			// In the example a SqlQuery is used, but you could also use an ObjectQuery.
            			SqlQuery query = new SqlQuery("select distinct u.* from [USER] u, CALLS c where " + 
            				"u.ID = c.USER_ID;", null);
            			return Context.GetObjectSet&lt;User&gt;(query);
            		}
             }
             
             // ... Other code
            
             // Creates a new ObjectContext that uses an MsSql Server as storage.
             ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", "localhost", "application"));
             // Set the MD5 Concurrency Manager.
             context.ConcurrencyManager = new Md5ConcurrencyManager();
             
             // We can't use directly the methods of the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>
             // to get the UserSearcher. We have to create an instance and pass the current context.
             UserSearcher searcher = new UserSearcher(context);
             ObjectSet&lt;User&gt; os = searcher.GetWithCalls();
             </code>
             </example>
        </member>
        <member name="M:Chili.Opf3.ObjectSearcher`1.#ctor(Chili.Opf3.ObjectContext)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectSearcher`1">ObjectSearcher Class</see>.
            </summary>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> used by the 
            <see cref="T:Chili.Opf3.ObjectSearcher`1">ObjectSearcher</see> to execute the search.</param>
            <exception cref="T:System.ArgumentNullException">Context is null.</exception>
        </member>
        <member name="M:Chili.Opf3.ObjectSearcher`1.FindAll">
            <summary>
            Returns an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> containing all persistent objects of the generic type 
            that are found in the storage.
            </summary>
            <example>
            The example shows how this method is used in your application code.
            	<code lang="CS">
            [Persistent("USER")]
            public class User
            {
            	private string _name = null;
            
            	[Field("NAME")]
            	public string Name
            	{
            		get { return _name; }
            		set { _name = value; }
            	}
            
            	// ... Other properties and fields.
            }
            
            // ... Other code
            
            // Get the ObjectSearcher for User.
            ObjectSearcher&lt;User&gt; searcher = context.GetObjectSearcher&lt;User&gt;();
            // Find all user in the storage.
            ObjectSet&lt;User&gt; objectSet = searcher.FindAll();
            	</code>
            </example>
        </member>
        <member name="M:Chili.Opf3.ObjectSearcher`1.FindAll(System.String,System.Object[])">
            <summary>
            Returns an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> of all persistent objects matching
            the conditions that are found in the storage.
            </summary>
            <example>
            The example shows how this method is used in your application code.
            <code lang="CS">
            [Persistent("USER")]
            public class User
            {
            	private string _name = null;
            
            	[Field("NAME")]
            	public string Name
            	{
            		get { return _name; }
            		set { _name = value; }
            	}
            
            	// ... Other properties and fields.
            }
            
            // ... Other code
            
            // Get the ObjectSearcher for User.
            ObjectSearcher&lt;User&gt; searcher = context.GetObjectSearcher&lt;User&gt;();
            // Find only those with a given name by using conditions.
            objectSet = searcher.FindAll("Name like {0} SortBy Name Asc", "%mith%");
            </code>
            </example>
            <param name="conditions">A condition string that specifies the objects that are loaded.</param>
            <param name="parameters">A list of parameters that is passed as parameters for the conditions.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectSearcher`1.FindAll(System.Collections.Generic.IList{`0})">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IList`1">IList</see> containing all persistent objects of the 
            generic type that are found in the storage.
            </summary>
            <example>
            The example shows how this method is used in your application code.
            <code lang="CS">
            [Persistent("USER")]
            public class User
            {
            	private string _name = null;
            
            	[Field("NAME")]
            	public string Name
            	{
            		get { return _name; }
            		set { _name = value; }
            	}
            
            	// ... Other properties and fields.
            }
            
            // ... Other code
            
            // Get the ObjectSearcher for User.
            ObjectSearcher&lt;User&gt; searcher = context.GetObjectSearcher&lt;User&gt;();
            // Find all user in the storage.
            IList&lt;User&gt; = searcher.FindAll(new List&lt;User&gt;);
            </code>
            </example>
            <param name="list">A class that implements the 
            <see cref="T:System.Collections.Generic.IList`1">IList</see> interface is populated with the 
            result of the search.</param>
            <returns>Returns the <see cref="T:System.Collections.Generic.IList`1">IList</see> with the 
            objects returned by the search.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectSearcher`1.FindAll(System.Collections.Generic.IList{`0},System.String,System.Object[])">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IList`1">IList</see> of all persistent objects matching
            the conditions that are found in the storage.
            </summary>
            <example>
            The example shows how this method is used in your application code.
            <code lang="CS">
            [Persistent("USER")]
            public class User
            {
            	private string _name = null;
            
            	[Field("NAME")]
            	public string Name
            	{
            		get { return _name; }
            		set { _name = value; }
            	}
            
            	// ... Other properties and fields.
            }
            
            // ... Other code
            
            // Get the ObjectSearcher for User.
            ObjectSearcher&lt;User&gt; searcher = context.GetObjectSearcher&lt;User&gt;();
            // Find only those with a given name by using conditions.
            IList&lt;User&gt; = searcher.FindAll(new List&lt;User&gt;, "Name like {0} SortBy Name Asc", "%mith%");
            </code>
            </example>
            <param name="list">A class that implements the 
            <see cref="T:System.Collections.Generic.IList`1">IList</see> interface is populated with the 
            result of the search.</param>
            <param name="conditions">A condition string that specifies the objects that are loaded.</param>
            <param name="parameters">A list of parameters that is passed as parameters for the conditions.</param>
            <returns>Returns the <see cref="T:System.Collections.Generic.IList`1">IList</see> with the 
            objects returned by the search.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectSearcher`1.FindOne">
            <summary>
            Returns the first persistent object of the generic type that are found in the storage. Or default(T) if no 
            item has been found.
            </summary>
            <example>
            The example shows how this method is used in your application code.
            	<code lang="CS">
            [Persistent("USER")]
            public class User
            {
            	private string _name = null;
            
            	[Field("NAME")]
            	public string Name
            	{
            		get { return _name; }
            		set { _name = value; }
            	}
            
            	// ... Other properties and fields.
            }
            
            // ... Other code
            
            // Get the ObjectSearcher for User.
            ObjectSearcher&lt;User&gt; searcher = context.GetObjectSearcher&lt;User&gt;();
            // Find the first user in the storage.
            User user = searcher.FindOne();
            	</code>
            </example>
        </member>
        <member name="M:Chili.Opf3.ObjectSearcher`1.FindOne(System.String,System.Object[])">
            <summary>
            Returns the first persistent object of all items matching the conditions that are found in the storage. Or
            default(T) if no item has been found.
            </summary>
            <example>
            The example shows how this method is used in your application code.
            <code lang="CS">
            [Persistent("USER")]
            public class User
            {
            	private string _name = null;
            
            	[Field("NAME")]
            	public string Name
            	{
            		get { return _name; }
            		set { _name = value; }
            	}
            
            	// ... Other properties and fields.
            }
            
            // ... Other code
            
            // Get the ObjectSearcher for User.
            ObjectSearcher&lt;User&gt; searcher = context.GetObjectSearcher&lt;User&gt;();
            // Find the first with a given name by using conditions.
            User user = searcher.FindOne("Name like {0} SortBy Name Asc", "%mith%");
            </code>
            </example>
            <param name="conditions">A condition string that specifies the objects that are loaded.</param>
            <param name="parameters">A list of parameters that is passed as parameters for the conditions.</param>
        </member>
        <member name="P:Chili.Opf3.ObjectSearcher`1.Context">
            <summary>
            Specifies the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> used by this 
            <see cref="T:Chili.Opf3.ObjectSearcher`1">ObjectSearcher</see>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Context is null.</exception>
        </member>
        <member name="T:Chili.Opf3.Mapping.IMemberInfoCollection">
            <summary>
            Interface that represents a collection of <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> objects.
            </summary>
            <remarks>
            This interface represents a collection of <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> objects. An instance of this class 
            is stored as list of all mapped object elements with an instance of the 
            <see cref="T:Chili.Opf3.Mapping.TypeMapping">TypeMapping</see> class.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Mapping.IMemberInfoCollection.Contains(Chili.Opf3.Mapping.IMemberInfo)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.IMemberInfoCollection.CopyTo(Chili.Opf3.Mapping.IMemberInfo[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.IMemberInfoCollection.GetIdentifierMemberMappings">
            <summary>
            Returns a list that contains the member mappings for the identifier member of the type.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.IMemberInfoCollection.GetMemberInfoByField(System.String)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> object associated with the given field name.
            </summary>
            <param name="fieldName">The name of the field in the storage.</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> class associated with the given field name.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.IMemberInfoCollection.GetMemberInfoByName(System.String)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> object associated with the given name of an object member.
            </summary>
            <param name="memberName">The name of an object member (a property or a field).</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> class associated with the given object member.</returns>
        </member>
        <member name="P:Chili.Opf3.Mapping.IMemberInfoCollection.Count">
            <summary>
            Gets the number of elements actually contained in the collection.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IMemberInfoCollection.IsReadOnly">
            <summary>
            Returns whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IMemberInfoCollection.Item(System.Int32)">
            <summary>
            Returns the item at the given index.
            </summary>
            <param name="index">The index of the item that is returned.</param>
            <returns>The item at the given index.</returns>
        </member>
        <member name="T:Chili.Opf3.SingleCallObjectContextFactoryPolicy">
            <summary>
            This class creates a new <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance
            on each call of the <see cref="T:Chili.Opf3.ObjectContextFactory">ObjectContextFactory</see>'s
            GetContext method.
            </summary>
        </member>
        <member name="T:Chili.Opf3.ObjectContextFactoryPolicyBase">
             <summary>
             Class that represents the <see cref="T:Chili.Opf3.ObjectContextFactory">ObjectContextFactory</see>'s 
             policy base class. It needs to be implemented by policies and holds the logic for creating
             new <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instances.
             </summary>
             <example>
             This example shows how to set up the factory to create an ObjectContext instance for each new thread.
             <code lang="CS">
             // Set the policy for multi threading.
             ObjectContext.Factory.Policy = new PerThreadObjectContextFactoryPolicy(delegate()
             {
                 MsSqlStorage storage = new MsSqlStorage("... connection string ...");
                 ObjectContext ctx = new ObjectContext(storage);
            
                 return ctx;
             });
             
             // ... Other code
             
             // Have an ObjectContext instance created
             ObjectContext context = ObjectContext.Factory.GetObjectContext();
             </code>
             </example>
        </member>
        <member name="M:Chili.Opf3.ObjectContextFactoryPolicyBase.#ctor(Chili.Opf3.ObjectContextFactoryCreatorDelegate)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.ObjectContextFactoryPolicyBase">ObjectContextFactoryPolicyBase Class</see>.
            </summary>
            <param name="creator">The delegate that creates new <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instances.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectContextFactoryPolicyBase.GetObjectContext">
            <summary>
            Returns an <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance.
            </summary>
            <returns>An <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectContextFactoryPolicyBase.IsNewObjectContextRequired">
            <summary>
            Returns whether a new <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance is required.
            </summary>
            <returns>True if a new instance is required; false otherwise.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectContextFactoryPolicyBase.StoreNewObjectContext(Chili.Opf3.ObjectContext)">
            <summary>
            Stores the new <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance.
            </summary>
            <param name="context">The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> to store.</param>
            <returns>The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance that has been stored.</returns>
        </member>
        <member name="M:Chili.Opf3.ObjectContextFactoryPolicyBase.GetExistingObjectContext">
            <summary>
            Gets an existing <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance.
            </summary>
            <returns>An <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance.</returns>
        </member>
        <member name="M:Chili.Opf3.SingleCallObjectContextFactoryPolicy.#ctor(Chili.Opf3.ObjectContextFactoryCreatorDelegate)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.SingleCallObjectContextFactoryPolicy">SingleCallObjectContextFactoryPolicy Class</see>.
            </summary>
            <param name="creator">The delegate that creates new <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instances.</param>
        </member>
        <member name="M:Chili.Opf3.SingleCallObjectContextFactoryPolicy.IsNewObjectContextRequired">
            <summary>
            Returns whether a new <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance is required.
            </summary>
            <returns>True if a new instance is required; false otherwise.</returns>
        </member>
        <member name="M:Chili.Opf3.SingleCallObjectContextFactoryPolicy.StoreNewObjectContext(Chili.Opf3.ObjectContext)">
            <summary>
            Stores the new <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance.
            </summary>
            <param name="context">The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> to store.</param>
            <returns>The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance that has been stored.</returns>
        </member>
        <member name="M:Chili.Opf3.SingleCallObjectContextFactoryPolicy.GetExistingObjectContext">
            <summary>
            Gets an existing <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance.
            </summary>
            <returns>An <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance.</returns>
        </member>
        <member name="T:Chili.Opf3.Mapping.Providers.XmlMapping">
             <summary>
             This class represents an XML mapping for one or more persistent objects.
             </summary>
             <remarks>
             <para>
             This class holds the mapping for one or more persistent objects. The mapping that's managed by an instance
             of this class is based on XML. An <see cref="T:Chili.Opf3.Mapping.Providers.XmlMapping"/> instance needs to be added to an instance of the
             <see cref="T:Chili.Opf3.Mapping.Providers.XmlTypeMappingProvider"/> class to have the mapping used by the framework.
             </para>
             <para>
             The XML mapping file contains the same data that could also be created by using attributes for the
             mapping of persistent objects (the elements of the XML nodes have also the exact same names as the properties
             of the attributes). Using the XML mapping means that no attributes, such as
             <see cref="T:Chili.Opf3.FieldAttribute"/>, <see cref="T:Chili.Opf3.PersistentAttribute"/> or <see cref="T:Chili.Opf3.Relations.RelationAttribute"/>
             need to be specified on/in the persistent objects. The XML mapping can be used as a complete replacement
             for the attribute based mapping.
             </para>
             </remarks>
             <example>
             The following example shows how such an XML mapping file looks like. The file contains mapping for
             one persistent that has a relation (many-to-many) to another persistent.
             <code lang="csharp">
             &lt;persistents&gt;
                 &lt;persistent type="ConsoleApplication1.Persistents.Species" entity="SPECIES" poolSize="10" 
            	        rights="Load, Delete"&gt;
            	
                 &lt;fields&gt;
                     &lt;field member="SpeciesID" identifier="true" allowDBNull="false" /&gt;
                     &lt;field member="Img" /&gt;
                     &lt;field member="Family" /&gt;
                     &lt;field member="Genus" /&gt;
                     &lt;field member="SpeciesName" fieldName="Species" /&gt;
                     &lt;field member="Variety" /&gt;
                     &lt;field member="Symbol" /&gt;
                 &lt;/fields&gt;
             
                 &lt;relations&gt;
                     &lt;relation member="AttributesReference" relations="SpeciesID = SpeciesID"
                         weakPersistent="ConsoleApplication1.Persistents.SpeciesAttribute"
                         weakRelations="AttributeID = AttributeID" persistRelationShip="ParentFirst" /&gt;
                 &lt;/relations&gt;
            
                 &lt;/persistent&gt;
             &lt;/persistents&gt;
             </code>
             </example>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.XmlMapping.Load(System.String)">
            <summary>
            Loads the <see cref="T:Chili.Opf3.Mapping.Providers.XmlMapping"/> from the given file.
            </summary>
            <param name="fileName">The file name from where the mapping is to be loaded.</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.Mapping.Providers.XmlMapping"/> that holds the mapping from the given file.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.XmlMapping.Load(System.IO.Stream)">
            <summary>
            Loads the <see cref="T:Chili.Opf3.Mapping.Providers.XmlMapping"/> from the given stream.
            </summary>
            <param name="stream">The stream that contains the XML mapping.</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.Mapping.Providers.XmlMapping"/> that holds the mapping from the given stream.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.XmlMapping.#ctor(System.Xml.XmlDocument)">
            <summary>
            Creates an instance of the <see cref="T:Chili.Opf3.Mapping.Providers.XmlMapping"/> Class.
            </summary>
            <param name="xml">The XmlDocument holding the mapping from the file.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.XmlMapping.GetPersistentAttribute(System.Type)">
            <summary>
            Gets the <see cref="T:Chili.Opf3.PersistentAttribute"/> for the given type.
            </summary>
            <param name="type">The type whose <see cref="T:Chili.Opf3.PersistentAttribute"/> is to be returned.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.XmlMapping.GetFieldAttribute(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets the <see cref="T:Chili.Opf3.FieldAttribute"/> for the given type and member.
            </summary>
            <param name="type">The type where the <see cref="T:Chili.Opf3.FieldAttribute"/> should be searched in.</param>
            <param name="member">The member for which the <see cref="T:Chili.Opf3.FieldAttribute"/> is searched.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.XmlMapping.GetRelationAttribute(System.Type,System.Reflection.MemberInfo,System.Type)">
            <summary>
            Gets the <see cref="T:Chili.Opf3.Relations.RelationAttribute"/> for the given type, member and related type.
            </summary>
            <param name="type">The type where the <see cref="T:Chili.Opf3.Relations.RelationAttribute"/> should be searched in.</param>
            <param name="member">The member for which the <see cref="T:Chili.Opf3.Relations.RelationAttribute"/> is searched.</param>
            <param name="relatedType">The related type for which the <see cref="T:Chili.Opf3.Relations.RelationAttribute"/> is searched for.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.XmlMapping.GetPersistentNode(System.Type)">
            <summary>
            Gets the node for the given persistent type.
            </summary>
            <param name="type">The persistent type for which the node is returned.</param>
        </member>
        <member name="T:Chili.Opf3.Mapping.Providers.TypeMappingProviderCollection">
            <summary>
            This class contains a list of classes that implement the <see cref="T:Chili.Opf3.Mapping.Providers.ITypeMappingProvider">ITypeMappingProvider</see>
            interace. These classes can create a mapping for persistent objects.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.TypeMappingProviderCollection.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Mapping.Providers.TypeMappingProviderCollection">TypeMappingProviderCollection Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.TypeMappingProviderCollection.Add(Chili.Opf3.Mapping.Providers.ITypeMappingProvider)">
            <summary>
            Adds a class that implements the <see cref="T:Chili.Opf3.Mapping.Providers.ITypeMappingProvider">ITypeMappingProvider</see>
            interface to this list.
            </summary>
            <param name="provider">The provider to add.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.TypeMappingProviderCollection.Remove(Chili.Opf3.Mapping.Providers.ITypeMappingProvider)">
            <summary>
            Removes a class that implements the <see cref="T:Chili.Opf3.Mapping.Providers.ITypeMappingProvider">ITypeMappingProvider</see>
            interface from the collection.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.TypeMappingProviderCollection.RemoveAll">
            <summary>
            Removes all registered type mapping providers from the collection.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.TypeMappingProviderCollection.GetPersistentAttribute(System.Type)">
            <summary>
            Gets the persistent attribute for the given type.
            </summary>
            <param name="type">The persistent type for which the attribute is returned.</param>
            <returns></returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.TypeMappingProviderCollection.GetMemberFieldAttribute(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> for the given member. If the member is not mapped,
            null is returned.
            </summary>
            <param name="type">The persistent type that's mapping is created.</param>
            <param name="member">The member of the persistent type.</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> or null if the member is not mapped.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.TypeMappingProviderCollection.GetMemberRelationAttribute(System.Type,System.Reflection.MemberInfo,System.Type)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> for the given member. If the member does not
            have an attribute set, null is returned.
            </summary>
            <param name="type">The persistent type that's mapping is created.</param>
            <param name="member">The member of the persistent type.</param>
            <param name="relatedType">The related object's type.</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> or null if the member does not have
            an attribute set.</returns>
        </member>
        <member name="T:Chili.Opf3.Tracing">
            <summary>
            Class that traces the different operations of the framework.
            </summary>
            <remarks>
            This class traces the different operations of the framework. Please refer to the
            .NET documentation about how to create customized listener classes for this tracing
            utility. A listener class allows to specify the target of the trace output. Multiple
            listener classes can be registered with the <see cref="T:Chili.Opf3.Tracing">Tracing</see> class.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Tracing.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Tracing.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Chili.Opf3.Tracing">Tracing Class</see>.
            </summary>
            <param name="name">Specifies the name of the application.</param>
        </member>
        <member name="M:Chili.Opf3.Tracing.TraceError(System.String)">
            <summary>
            Traces an error.
            </summary>
            <param name="message">The message of the error.</param>
        </member>
        <member name="M:Chili.Opf3.Tracing.TraceException(System.Exception)">
            <summary>
            Traces an exception.
            </summary>
            <param name="ex">The exception that is traced.</param>
        </member>
        <member name="M:Chili.Opf3.Tracing.TraceVerbose(System.String)">
            <summary>
            Traces debug information.
            </summary>
            <param name="message">The debug information to trace.</param>
        </member>
        <member name="M:Chili.Opf3.Tracing.TraceWarning(System.String)">
            <summary>
            Traces a warning.
            </summary>
            <param name="message">The message of the warning.</param>
        </member>
        <member name="M:Chili.Opf3.Tracing.TraceStorageIO(System.String)">
            <summary>
            Traces a storage IO information.
            </summary>
            <param name="message">The message for the storage IO.</param>
        </member>
        <member name="M:Chili.Opf3.Tracing.TraceStorageIO(Chili.Opf3.Query.CompiledQuery)">
            <summary>
            Traces an instance of the <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see> class.
            </summary>
            <param name="query">The query to trace.</param>
        </member>
        <member name="P:Chili.Opf3.Tracing.Current">
            <summary>
            Returns the current instance of the <see cref="T:Chili.Opf3.Tracing">Tracing</see> class.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Storages.ForeignKeyViolationException">
            <summary>
            Exception is thrown if a foreign key has been violated while persisting an object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.ForeignKeyViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Storages.ForeignKeyViolationException">ForeignKeyViolationException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.ForeignKeyViolationException.#ctor(Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.PrimaryKeyViolationException">PrimaryKeyViolationException Class</see>.
            </summary>
            <param name="query">Query that has been executed before the exception has been thrown.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.ForeignKeyViolationException.#ctor(System.String,Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.PrimaryKeyViolationException">PrimaryKeyViolationException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="query">Query that has been executed before the exception has been thrown.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.ForeignKeyViolationException.#ctor(System.String,System.Exception,Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.PrimaryKeyViolationException">PrimaryKeyViolationException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="inner">The exception that caused the current exception.</param>
            <param name="query">Query that has been executed before the exception has been thrown.</param>
        </member>
        <member name="T:Chili.Opf3.Relations.RelationsManager">
            <summary>
            Manages the relations between the objects.
            </summary>
            <remarks>
            This class manages the relations between two or more objects. It is used
            by the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> to persist changes
            in the related objects and update the connections between related objects.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Relations.RelationsManager.#ctor(Chili.Opf3.ObjectContext)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.RelationsManager">RelationsManager
            Class</see>.
            </summary>
            <param name="context">
            	<see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> that holds the
            <see cref="T:Chili.Opf3.Relations.RelationsManager">RelationsManager</see> and is used by the
            <see cref="T:Chili.Opf3.Relations.RelationsManager">RelationsManager</see>
            </param>
        </member>
        <member name="M:Chili.Opf3.Relations.RelationsManager.ConnectRelated(System.Object)">
            <summary>Connects the related persistent objects to the given persistent object.</summary>
            <param name="obj">Persistent object that's relations mappings are created.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.RelationsManager.ConnectPropertiesInChildObjects(System.Object)">
            <summary>
            Connects all child object's foreign-key properties to the given persistent object's identifier.
            </summary>
            <param name="obj">The parent object that is saved.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.RelationsManager.PersistRelated(System.Object,Chili.Opf3.Relations.PersistRelationships,Chili.Opf3.PersistDepths,Chili.Opf3.PersistentOperations)">
            <summary>Persists the changes on related persistent objects.</summary>
            <param name="obj">Persistent object that's related persistent objects are persisted.</param>
            <param name="persistRelationship"><see cref="T:Chili.Opf3.Relations.PersistRelationships">PersistRelationship</see> 
            specifying which object in a relation is saved first.</param>
            <param name="persistDepth">Specifies the depth of the loaded object graph that is persisted.</param>
            <param name="persistentOperation">Specifies the operation on the parent persistent object.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.RelationsManager.IsRelatedModified(System.Object)">
            <summary>
            Checks if one of the related objects has been modified.
            </summary>
            <param name="obj">Persistent object that's related persistent objects are inspected.</param>
        </member>
        <member name="P:Chili.Opf3.Relations.RelationsManager.AutomaticallyLoadRelatedObjects">
            <summary>
            Gets or sets a value that indicates whether related objects should be loaded automatically when
            invoking the InnerObject property of the <see cref="T:Chili.Opf3.Relations.ObjectHolder`1"/>, <see cref="T:Chili.Opf3.Relations.ObjectSetHolder`1"/> 
            or <see cref="T:Chili.Opf3.Relations.ObjectListHolder`1"/>. If the behaviour (default is true) is changed the related objects 
            can only be loaded by using the Load method of the object holder objects. After calling the Load 
            method the InnerObject property will hold the related objects.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Relations.RelationsManager.UseRemotingSerialization">
            <summary>
            Gets or sets whether the objects (and its relations) are serialized for .NET remoting over binary channels. 
            If the object is serialized for remoting lazy loading of relations is enabled. Otherwise lazy loading 
            is disabled. This option should only get enabled for remoting over binary channels and does not work 
            with Windows Communication Foundation or web services in general.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Query.SqlQueryBuilder">
             <summary>
             A class that creates an instance of an <see cref="T:Chili.Opf3.Query.SqlQuery">SqlQuery</see> class.
             </summary>
             <remarks>
             <para>
             This class creates an instance of an <see cref="T:Chili.Opf3.Query.SqlQuery">SqlQuery</see> class. It allows 
             to specify the different items that can be added to an SqlQuery. For more information about the 
             SqlQuery, please consult the documentation of that class.
             </para>
             </remarks>
             <example>
             The following example shows how to use SqlQueryBuilder in your application.
             <code lang="CS">
             // ... Other code
             
             SqlQueryBuilder sqb = new SqlQueryBuilder("select * from USERS");
             sqb.AddConditionIfParameterNotNull("lower(LAST_NAME) like {0}", lastName);
             sqb.AddConditionIfParameterNotNull("lower(FIRST_NAME) like {0}", firstName);
            
             ObjectSet&lt;Call&gt; os = context.GetObjectSet&lt;Call&gt;(sqb.ToSqlQuery());
             
             // ... Other code.
             </code>
             </example>
        </member>
        <member name="M:Chili.Opf3.Query.SqlQueryBuilder.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.SqlQueryBuilder">SqlQueryBuilder Class</see>.
            </summary>
            <param name="selectPart">The select part of the query.</param>
        </member>
        <member name="M:Chili.Opf3.Query.SqlQueryBuilder.AppendCondition(System.String,System.Object[])">
            <summary>
            Appends a condition to the query. The parameter position is specified by the {0}, {1}, {2}, ... strings.
            </summary>
            <param name="condition">The conditional string that may also contain a parameter.</param>
            <param name="parameters">The list of parameter values.</param>
        </member>
        <member name="M:Chili.Opf3.Query.SqlQueryBuilder.AppendCondition(System.String)">
            <summary>
            Appends one or more parameter-less conditions to the query. Do not append any concat at the end.
            </summary>
            <param name="condition">The conditional string that may also contain a parameter.</param>
        </member>
        <member name="M:Chili.Opf3.Query.SqlQueryBuilder.AppendConditionIfParameterNotNull(System.String,System.Object)">
            <summary>
            Adds a condition to the query. The condition is only added if the paremeter is not null. The parameter
            position is specified by the {0} string.
            </summary>
            <param name="condition">The conditional string that may also contain a parameter.</param>
            <param name="parameter">The parameter value.</param>
        </member>
        <member name="M:Chili.Opf3.Query.SqlQueryBuilder.CheckForDefaultConcat">
            <summary>
            Checks if to add a default concat between two items of the query.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.SqlQueryBuilder.AppendConcat(Chili.Opf3.Query.Concats)">
            <summary>
            Appends a concat to the query.
            </summary>
            <param name="concat">The concat that is going to be added to the query.</param>
        </member>
        <member name="M:Chili.Opf3.Query.SqlQueryBuilder.AppendOpeningParenthesis">
            <summary>
            Appends an opening parenthesis to the query.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.SqlQueryBuilder.AppendClosingParenthesis">
            <summary>
            Appends a closing parenthesis to the query.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.SqlQueryBuilder.ClearConditions">
            <summary>
            Clears the current condtions of the <see cref="T:Chili.Opf3.Query.SqlQueryBuilder">SqlQueryBuilder</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.SqlQueryBuilder.ToSqlQuery">
            <summary>
            Converts the value to a instance of the <see cref="T:Chili.Opf3.Query.SqlQuery">SqlQuery</see> Class.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Query.SqlQueryBuilder.DefaultConcat">
            <summary>
            Specifies the default concat that is used if <see cref="M:Chili.Opf3.Query.ObjectQueryBuilder`1.AppendProperty(System.String,Chili.Opf3.Query.Comparisons,System.Object)">AppendProperty</see> is 
            called more then one time without calling <see cref="M:Chili.Opf3.Query.ObjectQueryBuilder`1.AppendConcat(Chili.Opf3.Query.Concats)">AppendConcat</see>.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Query.SqlQueryBuilder.HasConditions">
            <summary>
            Returns whether the current instance of the class is empty.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Query.SqlQueryBuilder.SelectPart">
            <summary>
            Gets or sets the select part of the query.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Query.SqlQueryBuilder.GroupByPart">
            <summary>
            Gets or sets the group by part of the query.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Query.SqlQueryBuilder.OrderByPart">
            <summary>
            Gets or sets the order by part of the query.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.OEParameter">
            <summary>
            Represents a parameter in the OPath statement. 
            </summary>
            <remarks>
            Parameters in a OPath statement are converted to this class when OPath is compiled.
            This parameter varies from the <see cref="T:Chili.Opf3.Query.OPathParser.OEInlineParameter">InlineParameter</see> since the
            parameter is represented as a tag ({0}, {1}, ...) in the OPath expression.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OEParameter.#ctor(System.Object,System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.OPathParser.OEParameter">OEParameter Class</see>.
            </summary>
            <param name="value">The value of the parameter.</param>
            <param name="type">The type of the parameter. This type is required if the value is null.</param>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.OEParameter.Value">
            <summary>
            Returns the value of the parameter. The value is stored in the parameter collection of the
            command that is executed on the storage.
            </summary>
            <value>The value of the parameter.</value>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.OEParameter.ValueType">
            <summary>
            Returns the type of the value.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Query.Concats">
            <summary>
            The member of this enumeration specifies the concat condition between items of the
            <see cref="T:Chili.Opf3.Query.ObjectQueryBuilder`1">ObjectQueryBuilder</see>.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.Concats.And">
            <summary>
            Two items are connected over an "And".
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.Concats.Or">
            <summary>
            Two items are connected over an "Or".
            </summary>
        </member>
        <member name="T:Chili.Opf3.PersistentRights">
            <summary>
            The member of this enumeration mark a persistent object with certain rights.
            </summary>
            <remarks>
            This enumeration is used to mark persistent objects with certain rights. It 
            allows to specify the rights of the persistent object. Some persistent objects may 
            only be loaded and have no right to be saved or deleted from the storage. If the 
            persistent object is marked with the Insert right it can't be loaded, deleted or updated.
            The enumeration contains an All flag which is the combination of all rights.
            </remarks>
            <example>
                The following example shows an example persistent that is only allowed to be loaded.
                <code lang="CS">
            [Persistent("USER", Rights = PersistentRights.Load)]
            public class User
            {
                private string _name;
                
                [Field("NAME")]
                public string Name
                {
                    get { return _name; }
                    set { _name = value; }
                }
                
                // ... Other properties and fields.
            }
                </code>
            </example>
        </member>
        <member name="F:Chili.Opf3.PersistentRights.None">
            <summary>
            No right is granted to the persistent object. I can't be loaded, inserted, updated or deleted.
            </summary>
        </member>
        <member name="F:Chili.Opf3.PersistentRights.Load">
            <summary>
            The persistent object is only allowed to be loaded.
            </summary>
        </member>
        <member name="F:Chili.Opf3.PersistentRights.Insert">
            <summary>
            The persistent object is only allowed to be inserted.
            </summary>
        </member>
        <member name="F:Chili.Opf3.PersistentRights.Update">
            <summary>
            The persistent object is only allowed to be updated.
            </summary>
        </member>
        <member name="F:Chili.Opf3.PersistentRights.Delete">
            <summary>
            The persistent object is only allowed to be deleted.
            </summary>
        </member>
        <member name="F:Chili.Opf3.PersistentRights.All">
            <summary>
            The persistent object has all rights.
            </summary>
        </member>
        <member name="T:Chili.Opf3.IDynamicExtensible">
            <summary>
            This interface is implemented by classes that want be dynamically extensible.
            </summary>
            <remarks>
            A class that should be dynamically extensible (the class contains some fixed 
            key fields and a lot different other fields) has to implement this interface. All
            fields that are not directly mapped in that class are stored to the property
            exposed by this interface.
            </remarks>
            <example>
                The following example shows how to implement the interface. 
                <code lang="CS">
            [Persistent("USER")]
            public class User : IDynamicExtensible
            {
                private IDictionary&lt;string, object&gt; _unknownFields = 
                    new Dictionary&lt;string, object&gt;();
            
                public IDictionary&lt;string, object&gt; UnknownFields
                {
                    get
                    {
                       return _unknownFields;
                    }
                }
             
                // ... Other properties of the persistent object.
            }
                </code>
            </example>
        </member>
        <member name="P:Chili.Opf3.IDynamicExtensible.UnknownFields">
            <summary>
            Exposes a dictionary that is filled with the fields that are not explicity 
            modelled in the persistent class.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Mapping.Providers.MappingBuilder">
            <summary>
            Class that creates the mapping for one persistent object type.
            </summary>
            <remarks>
            This class creates the mapping for one persistent object type. It allows to create the relation 
            and the member mappings.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.MappingBuilder.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.MappingBuilder.CreatePersistentMapping(System.Type)">
            <summary>
            Creates the mapping for the given persistent type.
            </summary>
            <param name="type">The type the mapping is created for.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.MappingBuilder.CreateMemberMappings(System.Type,Chili.Opf3.Mapping.MemberInfoCollection)">
            <summary>
            Creates the mapping between the member items and the fields in the storage.
            </summary>
            <param name="type">The type that's mappings are created.</param>
            <param name="list">The list of mapping items.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.MappingBuilder.GetMemberType(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Get the type of the member.
            </summary>
            <param name="type">The type who's mapping is created.</param>
            <param name="member">The current member.</param>
            <returns></returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.MappingBuilder.CreateRelationMappings(System.Type,Chili.Opf3.Mapping.RelationInfoCollection)">
            <summary>
            Creates the mapping between the relation items and the member items.
            </summary>
            <param name="type">The type that's mappings are created.</param>
            <param name="list">The list of relation items.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.MappingBuilder.ParseRelationAttribute(Chili.Opf3.Relations.RelationAttribute,System.Reflection.MemberInfo,System.Type,System.Type)">
            <summary>
            Extracts the data from the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see>.
            </summary>
            <param name="attribute">The <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> that is parsed.</param>
            <param name="member">The member exposing the relation.</param>
            <param name="type">The type of the parent object.</param>
            <param name="genericType">The type of the related objects.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.MappingBuilder.ParseRelations(System.String,System.Type,System.Type)">
            <summary>
            Parses the relation given and creates a list of relation objects.
            </summary>
            <param name="value">A string that contains relations.</param>
            <param name="childType">The type of the parent object.</param>
            <param name="parentType">The type of the child object.</param>
        </member>
        <member name="P:Chili.Opf3.Mapping.Providers.MappingBuilder.TypeMappingProviders">
            <summary>
            Gets the classes that implements the <see cref="T:Chili.Opf3.Mapping.Providers.ITypeMappingProvider">ITypeMappingProvider</see>
            interfaces.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.Providers.MappingBuilder.AutoInjectDynamicPopulateHelper">
            <summary>
            Gets or sets whether the framework should inject code in each persistent object to improve the performance
            of loading and saving of persistent objects. This can also be achieved by marking each persistent object that should
            get code injected with the <see cref="T:Chili.Opf3.IDynamicPopulateHelper">IDynamicPopulateHelper</see> interface.
            </summary>
        </member>
        <member name="T:Chili.Opf3.MarkForDeletionEventArgs">
            <summary>
            EventArgs used in the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> event
            that is invoked after marking an object for deletion.
            </summary>
            <remarks>
            This class is used by the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> in
            the event that is invoked after the mark for deletion of an object to send additional event
            data. The data contains the object that is marked for deletion.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.MarkForDeletionEventArgs.#ctor(System.Object)">
            <summary>
            Creates a new instance of the<see cref="T:Chili.Opf3.MarkForDeletionEventArgs">MarkForDeletionEventArgs Class</see>.
            </summary>
            <param name="obj">The object that is affected by the current operation. This object is marked for deletion in the storage. </param>
            <exception cref="T:System.ArgumentNullException">Obj is null.</exception>
        </member>
        <member name="P:Chili.Opf3.MarkForDeletionEventArgs.Object">
            <summary>
            Returns the object that is affected by the current operation. This object is
            marked for deletion in the storage.
            </summary>
            <value>The object affected by the current operation.</value>
        </member>
        <member name="T:Chili.Opf3.Mapping.PopulateHelperExtendedMetaInfo">
            <summary>
            Class represents a meta element that is used to create the mapping between the persistent object and
            the field in the table.
            </summary>
            <remarks>
            This class represents a meta element that is used to create the mapping between a field
            of the persistent object and a field in the storage table. This class uses the <see cref="T:Chili.Opf3.IPopulateHelperExtended">IPopulateHelperExtended</see>
            interface to set and get the values in/from the persistent's members.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Mapping.PopulateHelperExtendedMetaInfo.#ctor(System.Reflection.MemberInfo,System.Type,Chili.Opf3.FieldAttribute,Chili.Opf3.Mapping.IMemberInfo)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Mapping.PopulateHelperMetaInfo">PopulateHelperMetaInfo Class</see>.
            </summary>
            <param name="memberInfo">The MemberInfo object that represents the member in the persistent object's type.</param>
            <param name="type">Specifies the type of the member.</param>
            <param name="attribute">The <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> that contains the mapping information.</param>
            <param name="fallback">The fallback member if the populate helper is not requested for the given member.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.PopulateHelperExtendedMetaInfo.GetValue(System.Object)">
            <summary>
            Returns the value of the element of the persistent object type that is mapped to a field in the storage.
            </summary>
            <param name="obj">The persistent object that's value is returned.</param>
            <returns>Value of the persistent object types's element that is mapped to a field in the storage.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.PopulateHelperExtendedMetaInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets new value for the element of the persistent object type that is mapped to the storage.
            </summary>
            <param name="obj">The persistent object that's value is updated.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="P:Chili.Opf3.Mapping.PopulateHelperExtendedMetaInfo.Name">
            <summary>
            Returns the name of the element of the persistent object type that is mapped to the field in the storage.
            </summary>
        </member>
        <member name="T:Chili.Opf3.WeakReferencesCache`2">
            <summary>
            Implements a simple cache based upon weak references.
            </summary>
        </member>
        <member name="M:Chili.Opf3.WeakReferencesCache`2.Finalize">
            <summary>
            Destroys the current instance of the 
            </summary>
        </member>
        <member name="M:Chili.Opf3.WeakReferencesCache`2.Add(`0,`1,System.Object)">
            <summary>
            Adds an object to the cache.
            </summary>
            <param name="key">Key of the object.</param>
            <param name="obj">Object that is cached.</param>
            <param name="tag">An object that is saved connected to the object.</param>
        </member>
        <member name="M:Chili.Opf3.WeakReferencesCache`2.GetObjectTag(`0,`1)">
            <summary>
            Returns the tag associated with the given key.
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Chili.Opf3.WeakReferencesCache`2.UpdateObjectTag(`0,`1,System.Object)">
            <summary>
            Updatges the tag associated with the given key.
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="tag"></param>
        </member>
        <member name="M:Chili.Opf3.WeakReferencesCache`2.GetFirstObjectByKey(`0)">
            <summary>
            Returns the first object associated with the given key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Chili.Opf3.WeakReferencesCache`2.Remove(`0)">
            <summary>
            Removes the object from the cache.
            </summary>
            <param name="key">Key of the object.</param>
        </member>
        <member name="M:Chili.Opf3.WeakReferencesCache`2.RemoveAll">
            <summary>
            Revmoes all the object in the cache.
            </summary>
        </member>
        <member name="M:Chili.Opf3.WeakReferencesCache`2.ContainsKey(`0)">
            <summary>
            Returns whether the cache contains an item with the given key.
            </summary>
            <param name="key">The key of the item.</param>
        </member>
        <member name="M:Chili.Opf3.WeakReferencesCache`2.CollectionThread">
            <summary>
            Garbage collector thread.
            </summary>
        </member>
        <member name="M:Chili.Opf3.WeakReferencesCache`2.CollectDisposedReferences">
            <summary>
            Collects the disposed references.
            </summary>
        </member>
        <member name="M:Chili.Opf3.WeakReferencesCache`2.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Chili.Opf3.WeakReferencesCache`2.CachedItem`1">
            <summary>
            Represents one item that is cached.
            </summary>
        </member>
        <member name="M:Chili.Opf3.WeakReferencesCache`2.CachedItem`1.#ctor(`2,System.Object)">
            <summary>
            Creates a new instance of the CacheItem.
            </summary>
            <param name="target">The object instance that is saved in the item.</param>
            <param name="tag">The tag of the object instance.</param>
        </member>
        <member name="P:Chili.Opf3.WeakReferencesCache`2.CachedItem`1.Target">
            <summary>
            Returns the target.
            </summary>
        </member>
        <member name="P:Chili.Opf3.WeakReferencesCache`2.CachedItem`1.Tag">
            <summary>
            Returns the tag of the item.
            </summary>
        </member>
        <member name="P:Chili.Opf3.WeakReferencesCache`2.CachedItem`1.IsAliveTarget">
            <summary>
            Specifies whether the target is alive.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Storages.PrimaryKeyViolationException">
            <summary>
            Exception is thrown if a primary key has been violated while persisting an object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.PrimaryKeyViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Storages.PrimaryKeyViolationException">PrimaryKeyViolationException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.PrimaryKeyViolationException.#ctor(Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.PrimaryKeyViolationException">PrimaryKeyViolationException Class</see>.
            </summary>
            <param name="query">Query that has been executed before the exception has been thrown.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.PrimaryKeyViolationException.#ctor(System.String,Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.PrimaryKeyViolationException">PrimaryKeyViolationException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="query">Query that has been executed before the exception has been thrown.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.PrimaryKeyViolationException.#ctor(System.String,System.Exception,Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.PrimaryKeyViolationException">PrimaryKeyViolationException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="inner">The exception that caused the current exception.</param>
            <param name="query">Query that has been executed before the exception has been thrown.</param>
        </member>
        <member name="T:Chili.Opf3.Mapping.TypeMapping">
            <summary>
            Class that holds the mapping of one persistent object type with the storage.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.TypeMapping.#ctor(System.Type,Chili.Opf3.PersistentAttribute,Chili.Opf3.Mapping.MemberInfoCollection)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Mapping.TypeMapping">TypeMapping Class</see>.
            </summary>
            <param name="type">Type of object managed by this class.</param>
            <param name="persistentAttribute">Persistent attribute that decorates the class.</param>
            <param name="members">The list of the mapped members.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.TypeMapping.GetTypeMapping(System.Object)">
            <summary>
            Returns the mapping for a given object.
            </summary>
            <param name="obj">The object the mapping is returned for.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.TypeMapping.GetTypeMapping(System.Type)">
            <summary>
            Returns the mapping for the given persistent type.
            </summary>
            <param name="type">Type of object the mapping is returned for.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.TypeMapping.RegisterPersistentInterface(System.String,System.String)">
            <summary>
            Registers the given interface type with the persistent object type. This is required if an interface is registered 
            with a persistent type and the interface is used instead of the persistent type. The framework looks up the 
            registered interfaces to get the persistent object when loading objects from the storage.
            </summary>
            <param name="interfaceType">The string representation of the interface type registered with the persistent type.</param>
            <param name="persistentType">The string representation of the persistent type registered with the interface type.</param>
            <returns>True if the interface wasn't already registered.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.TypeMapping.RegisterPersistentInterface(System.Type,System.Type)">
            <summary>
            Registers the given interface type with the persistent object type. This is required if an interface is registered 
            with a persistent type and the interface is used instead of the persistent type. The framework looks up the 
            registered interfaces to get the persistent object when loading objects from the storage.
            </summary>
            <param name="interfaceType">The type of the interface registered with the persistent type.</param>
            <param name="persistentType">The type of the persistent registered with the interface type.</param>
            <returns>True if the interface wasn't already registered.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.TypeMapping.GetPersistentType(System.Type)">
            <summary>
            Gets the persistent type from the given type.
            </summary>
            <param name="type">The type that's persistent type is returned.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.TypeMapping.CheckIfAnonymousType(System.Type)">
            <summary>
            Gets whether the given type is an anonymous type.
            </summary>
            <param name="type">The type that is inspected for being anonymous.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.TypeMapping.HasPersistentMapping(System.Type)">
            <summary>
            Gets whether the given type has a persistent mapping defined.
            </summary>
            <param name="type">The type that is checked for having a persistent mapping.</param>
            <returns>True, if a persistent mapping is found; otherwise false.</returns>
        </member>
        <member name="P:Chili.Opf3.Mapping.TypeMapping.PersistentAttribute">
            <summary>
            Returns the persistent attribute associated with the object.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.TypeMapping.PersistentType">
            <summary>
            Returns the type of the mapping's persistent object.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.TypeMapping.IsAnonymousType">
            <summary>
            Gets whether the type is an anonymous type.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.TypeMapping.Members">
            <summary>
            Returns the collection of members associated with the <see cref="T:Chili.Opf3.Mapping.TypeMapping">TypeMapping</see>.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.TypeMapping.Relations">
            <summary>
            Returns the collection of relations associated with the <see cref="T:Chili.Opf3.Mapping.TypeMapping">TypeMapping</see>.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.TypeMapping.Providers">
            <summary>
            Gets the classes that implement the <see cref="T:Chili.Opf3.Mapping.Providers.ITypeMappingProvider">ITypeMappingProvider</see>
            interfaces. A class implementing the interface provides methods to create the mapping for a persistent type.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.TypeMapping.AutoInjectDynamicPopulateHelper">
            <summary>
            Gets or sets whether the framework should inject code in each persistent object to improve the performance
            of loading and saving of persistent objects. This can also be achieved by marking each persistent object that should
            get code injected with the <see cref="T:Chili.Opf3.IDynamicPopulateHelper">IDynamicPopulateHelper</see> interface.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.OESortBy">
            <summary>
            Represents a SortBy in the OPath statement.
            Contains OESortByMembers representing the single sort expressions.
            </summary>
            <remarks>
            SortBys in a OPath statement are converted to this class when OPath is compiled.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OESortBy.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.OPathParser.OESortBy">OESortBy Class</see>.
            </summary>
        </member>
        <member name="T:Chili.Opf3.DynamicProperties.DynamicType">
            <summary>
            A DynamicType is a collection of values - like an enumeration. 
            </summary>
            <remarks>
            The advantage of a DynamicType is the possibility to create it on the fly.
            DynamicTypes are usually used in combination with 
            <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperties</see>.
            When setting a DyanmicType as type of a <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>
            the <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>
            can only take values of the DynamicType as value.
            </remarks>
            <example>
            The following example shows how to use a DynamicType in combination with a 
            <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperty</see>.
            <code lang="CS">
            // ... Other code
            
            DynamicType type = new DynamicType();
            type.Values.Add("small");
            type.Values.Add("medium");
            type.Values.Add("large");
            
            // Create a DynamicProperty using a DynamicType.
            DynamicProperty prop1 = 
            	new DynamicProperty("Size", typeof(string), type);
            prop1.Value = "small";
            
            // Throws an exception, since not in the DynamicType.
            prop1.Value = "bigger";
            
            // ... Other code
            </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicType.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType Class</see>.
            This constructor is required for webservices.
            </summary>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicType.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType Class</see>.
            </summary>
            <param name="name">Name of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType</see>.</param>
            <exception cref="T:System.ArgumentNullException">Name is null.</exception>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicType.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Chili.Opf3.DynamicProperties.DynamicType.Name">
            <summary>
            Returns the name of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType</see>.
            </summary>
            <value>A string that represents the name of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType</see>.</value>
        </member>
        <member name="P:Chili.Opf3.DynamicProperties.DynamicType.Values">
            <summary>
            Specifies the values of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType</see>.
            </summary>
            <value>A list of values of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicType">DynamicType</see>.</value>
        </member>
        <member name="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampTypeInvalidException">
            <summary>
            Exception is thrown if the type of the persistent's member holding the time stamp is not valid.
            </summary>
            <remarks>
            This exception is thrown if the type of the persistent's member holding the time stamp is not valid.
            Currently only string is supported as valid type for the field holding the <see cref="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampAttribute">TimeStampAttribute</see>.
            All other types are not supported and throw this exception.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Concurrency.TimeStamp.TimeStampTypeInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampNotFoundException">TimeStampNotFoundException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Concurrency.TimeStamp.TimeStampTypeInvalidException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampNotFoundException">TimeStampNotFoundException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Concurrency.TimeStamp.TimeStampTypeInvalidException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampNotFoundException">TimeStampNotFoundException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.TimeStamp.TimeStampTypeInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampNotFoundException">TimeStampNotFoundException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="inner">The exception that caused the current exception.</param>
        </member>
        <member name="T:Chili.Opf3.Caching.SimpleCacheAttribute">
            <summary>
            Put on persistent objects to specify the caching in a declarative way.
            </summary>
            <remarks>
            This attribute is put on persistent objects to specify the caching in a declarative way.
            </remarks>
            <example>
                The following example shows how to use attribute.
                <code lang="CS">
            [SimpleCache(Duration = 10000)]
            [Persistent("USER")]
            public class User
            {
                private string _name = null;
             
                [Field("NAME")]
                public string Name
                {
                    get { return _name; }
                    set { _name = value; }
                }
             
                // ... Other properties and fields.
            }
            </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.Caching.SimpleCacheAttribute.GetDurationAsTimeSpan">
            <summary>
            Returns the time as time span.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Chili.Opf3.Caching.SimpleCacheAttribute.Duration">
            <summary>
            Gets and sets the expiration time (duration) in seconds. -1 is used for unlimited caching.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Caching.CachedPersistent">
            <summary>
            Represents a cached persistent object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Caching.CachedPersistent.#ctor(System.Object,System.DateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Caching.CachedPersistent">CachedPersistent Class</see>.
            </summary>
            <param name="persistent">The persistent that is cached.</param>
            <param name="validUntil">The time until the item is valid.</param>
        </member>
        <member name="P:Chili.Opf3.Caching.CachedPersistent.Expired">
            <summary>
            Returns whether the cached persistent has expired.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Caching.CachedPersistent.ValidUntil">
            <summary>
            Gets or sets the date time until the item is valid.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Caching.CachedPersistent.CreatedOn">
            <summary>
            Gets when the item was created.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Caching.CachedPersistent.Persistent">
            <summary>
            Returns the persistent.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Relations.RelationInformation">
            <summary>
            This class holds the most important informations for a relation.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.RelationInformation.#ctor(System.Object,System.Type,Chili.Opf3.Relations.RelationAttribute,Chili.Opf3.ObjectContext)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.RelationInformation">RelationInformation Class</see>.
            </summary>
            <param name="parent">The parent object itself.</param>
            <param name="relatedType">The child type of the relation.</param>
            <param name="attribute">The <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> specified on the relation</param>
            <param name="objectContext">The current <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> used to load the parent object.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.RelationInformation.GetObjectHolder">
            <summary>
            Returns the class that inherits from <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase</see>. Classes
            inheriting from that class are holding related objects.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Relations.RelationInformation.Context">
            <summary>
            Gets the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance that has been used to load 
            the parent object.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Relations.RelationInformation.Attribute">
            <summary>
            Gets the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> that is set on the relation.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Relations.RelationInformation.RelatedType">
            <summary>
            Gets the related type. Seen from the object that has implemented the 
            <see cref="T:Chili.Opf3.IRelationsPopulateHelper">IRelationsPopulateHelper</see> interface.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Relations.RelationInformation.ParentType">
            <summary>
            Gets the parent type. It is the type of the persistent that implemented the 
            <see cref="T:Chili.Opf3.IRelationsPopulateHelper">IRelationsPopulateHelper</see> interface.
            </summary>
        </member>
        <member name="T:Chili.Opf3.DynamicConstructorPersistentFactory">
            <summary>
            This class creates new persistent object instances by the use of
            code injection.
            </summary>
        </member>
        <member name="M:Chili.Opf3.DynamicConstructorPersistentFactory.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates an instance of a persistent object type. If the factory does not support 
            creation of the given type, it should return null.
            </summary>
            <param name="type">The type of the persistent to create an instance for.</param>
            <param name="parameters">The constructor parameters for the persistent object instance.</param>
            <returns>An instance if the factory can create one. Null if the factory can't create an instance for the given type.</returns>
        </member>
        <member name="M:Chili.Opf3.DynamicConstructorPersistentFactory.CreateConstructor(System.Type,System.Reflection.ConstructorInfo)">
            <summary>
            Creates the injected constructor factory.
            </summary>
            <param name="type">The type for which the constructor factory is created.</param>
            <param name="constructor">The constructor itself.</param>
        </member>
        <member name="T:Chili.Opf3.PersistentAttribute">
            <summary>Marks a class as a persistent object.</summary>
            <remarks>
            This attribute is used to mark a class as persistent. As constructor argument has
            to be specified the name of the entity in the storage. The attribute allows also to
            specify the size of the pre-cached persistent object pool by modifying the
            <see cref="P:Chili.Opf3.PersistentAttribute.PoolSize">PoolSize</see> property (default is 0, which
            means no pool is created). The pool is a cache that contains empty objects that are 
            used during heavy loads.
            </remarks>
            <example>
                The following example shows a User persistent associated with the "USER" entity in
                the storage. The pool size set to 100 objects to gain speed on heavy
                loads. The <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> is used to connect a
                property with a field of the entity.
                <code lang="CS">
            [Persistent("USER", PoolSize = 100)]
            public class User
            {
                private string _name = null;
                
                [Field("NAME")]
                public string Name
                {
                    get { return _name; }
                    set { _name = value; }
                }
                
                // ... Other properties and fields.
            }
                </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.PersistentAttribute.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.PersistentAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute Class</see>.
            </summary>
            <param name="entity">Enitity of the storage that is associated with the persistent.</param>
            <exception cref="T:System.ArgumentNullException">Entity is null.</exception>
        </member>
        <member name="P:Chili.Opf3.PersistentAttribute.Entity">
            <summary>
            Gets or sets the entity of the storage that is associated with the persistent
            object.
            </summary>
            <value>A string that represents the entity associated with the object.</value>
        </member>
        <member name="P:Chili.Opf3.PersistentAttribute.PoolSize">
            <summary>
            	<para>Specifies the size of the pool (default is 0) that contains pre-cached
                instances of the class marked with this attribute.</para>
            </summary>
            <value>The size of the pool for the persistent object marked with this attribute.</value>
            <remarks>
            	<para>This property is usually set if the program loads a lot objects of the given
                type in a repeated manner. It allows to speed up loading of large lists.</para>
            </remarks>
        </member>
        <member name="P:Chili.Opf3.PersistentAttribute.Rights">
            <summary>
            Specifies the rights of the persistent object.
            </summary>
            <remarks>
            <para>
            Specifies the <see cref="T:Chili.Opf3.PersistentRights">rights</see> of the persistent object. Some persistent
            may only be allowed to be loaded and not saved (aka. read-only persistent objects). This property is 
            used to grant those rights.
            </para>
            <para>
            By default the persistent object has all rights: see <see cref="F:Chili.Opf3.PersistentRights.All">PersistentRights.All</see>.
            </para>
            </remarks>
            <value>The rights of the persistent object.</value>
        </member>
        <member name="T:Chili.Opf3.Query.OPath">
            <summary>
            This class parses OPath expressions.
            </summary>
            <remarks>
            The framework implements some kind of OPath language (the name is taken from the 
            no longer developed Microsoft(R) ObjectSpaces(TM) framework). OPath would be 
            a kind of query language that is storage independent. This class parses and 
            converts the OPath expressions to an <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see>
            that can the be compiled and executed on the storage.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.OPath.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.OPath">OPath Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.OPath.Parse``1(Chili.Opf3.Query.ObjectQuery{``0})">
            <summary>
            Parses the <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see>.
            </summary>
            <param name="query"><see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see> that is parsed.</param>
            <exception cref="T:System.ArgumentNullException">Query is null.</exception>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.OEMember">
            <summary>
            Represents a object member in the OPath statement. 
            </summary>
            <remarks>
            Object members in a OPath statement are converted to this class when OPath is compiled. The class
            contains the name of the object member specified in the OPath statement, the 
            <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> of the object member and the 
            <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see> of the persistent object.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OEMember.#ctor(System.String,Chili.Opf3.FieldAttribute,Chili.Opf3.PersistentAttribute)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.OPathParser.OEMember">OEMember Class</see>.
            </summary>
            <param name="memberName">Name of the object member in the OPath statement.</param>
            <param name="fieldAttribute"><see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> set on the property.</param>
            <param name="persistentAttribute"><see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see>
            of the persistent object.</param>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.OEMember.MemberName">
            <summary>
            Returns the name of the object member in the OPath statement.
            </summary>
            <value>Name of the property in the OPath statement.</value>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.OEMember.FieldAttribute">
            <summary>
            Returns the <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> set on the property.
            </summary>
            <value>The <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> set on the property.</value>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.OEMember.PersistentAttribute">
            <summary>
            Returns the <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see> of the persistent object.
            </summary>
            <value>The <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see> of the persistent object.</value>
        </member>
        <member name="T:Chili.Opf3.InvalidTypeException">
            <summary>
            Exception is thrown if a type in the storage is not supported by framework.
            </summary>
            <remarks>
            This exception is thrown if a type is not recognized by the framework. If you try
            to save a type that can't be saved directly to the storage you get this exception. To
            avoid this kind of exception try to implement the
            <see cref="T:Chili.Opf3.IUserDefinedType">IUserDefinedType</see> interface.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.InvalidTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.InvalidTypeException">InvalidTypeException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.InvalidTypeException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.InvalidTypeException">InvalidTypeException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.InvalidTypeException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.InvalidTypeException">InvalidTypeException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
        </member>
        <member name="M:Chili.Opf3.InvalidTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.InvalidTypeException">InvalidTypeException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="inner">The exception that caused the current exception.</param>
        </member>
        <member name="T:Chili.Opf3.ObjectNotificationEventArgs">
            <summary>
            EventArgs used in the
            <see cref="T:Chili.Opf3.IObjectNotification">IObjectNotification</see> interface.
            </summary>
            <remarks>
            This EventArgs class is used by the
            <see cref="T:Chili.Opf3.IObjectNotification">IObjectNotification</see> interface to send
            additional event data. The data that is passed contains the
            <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation. The
            <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object that contains information about the
            state of the object and the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> itself. 
            The <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> can be null if the object is loaded 
            from the storage.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.ObjectNotificationEventArgs.#ctor(Chili.Opf3.ObjectInfo,Chili.Opf3.ObjectContext,Chili.Opf3.PersistentOperations,Chili.Opf3.PersistDepths)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.ObjectNotificationEventArgs">ObjectNotificationEventArgs Class</see>.
            </summary>
            <param name="objectInfo">
            	<see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> that contains state informations of
            the persistent object that implements the
            <see cref="T:Chili.Opf3.IObjectNotification">IObjectNotification</see> interface.
            </param>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.</param>
            <param name="operation">Specifies the current operation on the persistent object.</param>
            <exception cref="T:System.ArgumentNullException">ObjectInfo is null or context is null.</exception>
            <param name="persistDepth">Specifies the depth of the current persist operation.</param>
        </member>
        <member name="M:Chili.Opf3.ObjectNotificationEventArgs.#ctor(Chili.Opf3.Query.IQuery,Chili.Opf3.ObjectInfo,Chili.Opf3.ObjectContext,Chili.Opf3.PersistentOperations,Chili.Opf3.PersistDepths)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.ObjectNotificationEventArgs">ObjectNotificationEventArgs Class</see>.
            </summary>
            <param name="query"><see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> of the current operation.</param>
            <param name="objectInfo">
            	<see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> that contains state informations of
            the persistent object that implements the
            <see cref="T:Chili.Opf3.IObjectNotification">IObjectNotification</see> interface.
            </param>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.</param>
            <param name="operation">Specifies the current operation on the persistent object.</param>
            <exception cref="T:System.ArgumentNullException">Query is null, objectInfo is null or context is null.</exception>
            <param name="persistDepth">Specifies the depth of the current persist operation.</param>
        </member>
        <member name="P:Chili.Opf3.ObjectNotificationEventArgs.ObjectInfo">
            <summary>
            Returns the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> that contains state
            informations of the persistent object that implements the
            <see cref="T:Chili.Opf3.IObjectNotification">IObjectNotification</see> interface.
            </summary>
            <value>
            The <see cref="P:Chili.Opf3.ObjectNotificationEventArgs.ObjectInfo">ObjectInfo</see> object with the state
            information.
            </value>
        </member>
        <member name="P:Chili.Opf3.ObjectNotificationEventArgs.Context">
            <summary>
            Returns the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.
            </summary>
            <value><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> of the current operation.</value>
        </member>
        <member name="P:Chili.Opf3.ObjectNotificationEventArgs.Query">
            <summary>
            Specifies the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> of the current operation.
            It can be null if the object is not used in the current operation.
            </summary>
            <value>
            The <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> used
            in<see cref="P:Chili.Opf3.ObjectNotificationEventArgs.ObjectInfo">ObjectInfo Class</see> the current operation.
            </value>
        </member>
        <member name="P:Chili.Opf3.ObjectNotificationEventArgs.CurrentOperation">
            <summary>
            Returns the current <see cref="T:Chili.Opf3.PersistentOperations">PersistentOperation</see> that is executed
            on the persistent object.
            </summary>
        </member>
        <member name="P:Chili.Opf3.ObjectNotificationEventArgs.PersistDepth">
            <summary>
            Returns the depth of the <strong>loaded object graph</strong> that is persisted during the current persist process.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Mapping.RelationInfo">
            <summary>
            Class that represents a relation of one persistent object with other.
            </summary>
            <remarks>
            This class represents a relation between two or more persistent objects with other persistent objects.
            </remarks>
        </member>
        <member name="T:Chili.Opf3.Mapping.IRelationInfo">
            <summary>
            Interface that represents a relation of one persistent object with an other persistent object.
            </summary>
            <remarks>
            This interface represents a relation between two or more persistent objects with other persistent objects.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Mapping.IRelationInfo.GetObjectHolder(System.Object)">
            <summary>
            Returns the class that inherits from <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase</see>. Classes
            inheriting from that class are holding related objects.
            </summary>
            <param name="obj">The instance that's <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase</see> should be returned.</param>
        </member>
        <member name="P:Chili.Opf3.Mapping.IRelationInfo.ChildTypeMapping">
            <summary>
            Specifies the <see cref="T:Chili.Opf3.Mapping.TypeMapping">TypeMapping</see> of the child type.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IRelationInfo.ParentTypeMapping">
            <summary>
            Specifies the <see cref="T:Chili.Opf3.Mapping.TypeMapping">TypeMapping</see> of the parent type.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IRelationInfo.RelatedProperties">
            <summary>
            Returns a list of related properties between two objects. This list contains <see cref="T:Chili.Opf3.Mapping.IRelatedPropertiesPair">IRelatedPropertiesPair</see> 
            interfaces that contain the related properties in the two objects.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IRelationInfo.RelationAttribute">
            <summary>
            Returns the <see cref="P:Chili.Opf3.Mapping.IRelationInfo.RelationAttribute">RelationAttribute</see> of the current relation.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IRelationInfo.WeakRelatedProperties">
            <summary>
            Returns a list of weak related properties between two objects. This list contains <see cref="T:Chili.Opf3.Mapping.IRelatedPropertiesPair">IRelatedPropertiesPair</see> 
            interfaces that contain the weak related properties in the two objects.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.IRelationInfo.WeakTypeMapping">
            <summary>
            Specifies the <see cref="T:Chili.Opf3.Mapping.TypeMapping">TypeMapping</see> of the weak persistent type. May be null 
            if no many-to-many relation has been specified.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelationInfo.#ctor(System.Reflection.MemberInfo,Chili.Opf3.Relations.RelationAttribute,System.Collections.Generic.IList{Chili.Opf3.Mapping.RelatedPropertiesPair})">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Mapping.RelationInfo">RelationInfo Class</see>.
            </summary>
            <param name="member">The MemberInfo object that's type is a class inheriting from <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase</see>.</param>
            <param name="attribute">The <see cref="P:Chili.Opf3.Mapping.RelationInfo.RelationAttribute">RelationAttribute</see> specifying the relation between the two objects.</param>
            <param name="relatedPropertiesPairs">The list of related properties pairs.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelationInfo.#ctor(System.Reflection.MemberInfo,Chili.Opf3.Relations.RelationAttribute,System.Collections.Generic.IList{Chili.Opf3.Mapping.RelatedPropertiesPair},System.Collections.Generic.IList{Chili.Opf3.Mapping.RelatedPropertiesPair})">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Mapping.RelationInfo">RelationInfo Class</see>.
            </summary>
            <param name="member">The MemberInfo object that's type is a class inheriting from <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase</see>.</param>
            <param name="attribute">The <see cref="P:Chili.Opf3.Mapping.RelationInfo.RelationAttribute">RelationAttribute</see> specifying the relation between the two objects.</param>
            <param name="relatedPropertiesPairs">The list of related properties pairs.</param>
            <param name="weakRelatedPropertiesPairs">The list of weak related properties pairs.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelationInfo.GetObjectHolder(System.Object)">
            <summary>
            Returns the class that inherits from <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase</see>. Classes
            inheriting from that class are holding related objects.
            </summary>
            <param name="obj">The instance that's <see cref="T:Chili.Opf3.Relations.ObjectHolderBase">ObjectHolderBase</see> should be returned.</param>
        </member>
        <member name="P:Chili.Opf3.Mapping.RelationInfo.RelationAttribute">
            <summary>
            Returns the <see cref="P:Chili.Opf3.Mapping.RelationInfo.RelationAttribute">RelationAttribute</see> of the current relation.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.RelationInfo.RelatedProperties">
            <summary>
            Returns a list of related properties between two objects. This list contains <see cref="T:Chili.Opf3.Mapping.IRelatedPropertiesPair">IRelatedPropertiesPair</see> 
            interfaces that contain the related properties in the two objects.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.RelationInfo.WeakRelatedProperties">
            <summary>
            Returns a list of weak related properties between two objects. This list contains <see cref="T:Chili.Opf3.Mapping.IRelatedPropertiesPair">IRelatedPropertiesPair</see> 
            interfaces that contain the weak related properties in the two objects.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.RelationInfo.ParentTypeMapping">
            <summary>
            Specifies the <see cref="T:Chili.Opf3.Mapping.TypeMapping">TypeMapping</see> of the parent type.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.RelationInfo.ChildTypeMapping">
            <summary>
            Specifies the <see cref="T:Chili.Opf3.Mapping.TypeMapping">TypeMapping</see> of the child type.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.RelationInfo.WeakTypeMapping">
            <summary>
            Specifies the <see cref="T:Chili.Opf3.Mapping.TypeMapping">TypeMapping</see> of the weak persistent type. May be null 
            if no many-to-many relation has been specified.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Mapping.RelatedPropertiesPairCollection">
            <summary>
            This class contains a list of <see cref="T:Chili.Opf3.Mapping.RelatedPropertiesPair">RelatedPropertiesPair</see> classes.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelatedPropertiesPairCollection.Add(Chili.Opf3.Mapping.RelatedPropertiesPair)">
            <summary>
            Adds the <see cref="T:Chili.Opf3.Mapping.RelatedPropertiesPair">RelatedPropertiesPair</see> object to the list.
            </summary>
            <param name="pair">The object that is added.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelatedPropertiesPairCollection.Contains(Chili.Opf3.Mapping.IRelatedPropertiesPair)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelatedPropertiesPairCollection.CopyTo(Chili.Opf3.Mapping.IRelatedPropertiesPair[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelatedPropertiesPairCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns> A enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelatedPropertiesPairCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An enumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Chili.Opf3.Mapping.RelatedPropertiesPairCollection.Count">
            <summary>
            Gets the number of elements actually contained in the collection.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.RelatedPropertiesPairCollection.IsReadOnly">
            <summary>
            Returns whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.RelatedPropertiesPairCollection.Item(System.Int32)">
            <summary>
            Returns the item at the given index.
            </summary>
            <param name="index">The index of the item that is returned.</param>
            <returns>The item at the given index.</returns>
        </member>
        <member name="T:Chili.Opf3.IPersistentTypeSelector">
            <summary>
            This interface is implemented if a persistent wants to create persistent types
            depending on the content of the current data record.
            </summary>
            <remarks>
            <para>
            Classes that create persistent types depending on the content of the current
            data record should implement this interface. It allows to return a type that 
            is created instead of the class that is implementing this interface. Usually
            that is a class that inherits of the persistent that implements this interface.
            </para>
            <para>
            If null is returned the current record is ignored (no persistent object instance
            is created from the current record).
            </para>
            </remarks>
            <example>
            The following sample shows the usage of this interface.
            <code lang="CS">
            [Persistent("USERS")]
            public class User : IPersistentTypeSelector
            {
            	// ... Properties and fields of the persistent.
            
            	private Type FetchPersistentType(IDataRecord dataRecord)
            	{
            		if (e.DataRecord["Type"] == "1")
            		{
            			// Switch the type of the persistent that is created to User1.
            			return typeof(User1);
            		}
            		else if ((bool)e.DataRecord["Ignore"])
            		{
            			// Tell the framework to ignore this item.
            			return null;
            		}
            		// Have a persistent of type User created.
            		return typeof(User);
            	}
            }
            
            // This class inherits from User.
            public class User1 : User
            {
            	// ... Properties and fields of the object.
            }
            </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.IPersistentTypeSelector.FetchPersistentType(System.Data.IDataRecord)">
            <summary>
            Returns the type of the persistent object to create.
            </summary>
            <param name="dataRecord">The current record returned by the storage.</param>
            <returns>A type or null if the current record should be ignored.</returns>
        </member>
        <member name="T:Chili.Opf3.Caching.AddingPersistentEventArgs">
            <summary>
            EventArgs used by the AddingPersistent event of the <see cref="T:Chili.Opf3.Caching.SimpleCacheManager">SimpleCacheManager</see> Class.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Caching.AddingPersistentEventArgs.#ctor(System.Object,System.DateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Caching.AddingPersistentEventArgs">AddingPersistentEventArgs Class</see>.
            </summary>
            <param name="persistent">The persistent that is added.</param>
            <param name="validUntil">The time until the persistent is valid.</param>
        </member>
        <member name="P:Chili.Opf3.Caching.AddingPersistentEventArgs.Cancel">
            <summary>
            Gets or sets whether to cancel the add to the cache for this persistent.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Caching.AddingPersistentEventArgs.Persistent">
            <summary>
            Gets the persistent that is added to the cache.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Caching.AddingPersistentEventArgs.ValidUntil">
            <summary>
            Gets or sets the date and time until persistent is valid.
            </summary>
        </member>
        <member name="T:Chili.Opf3.IdentityMap">
            <summary>
            This class represents an identity map for objects that are currently in memory.
            </summary>
            <remarks>
            An identity map is a class that holds the persistent objects that are currently in memory. 
            During a load (with enabled identity map) all objects that are loaded from the storage are compared
            against the one in the map. If an object is already in the map that one will be returned instead
            of the one that came from the storage.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.IdentityMap.Add(System.Object)">
            <summary>
            Adds a persistent object to the identity map.
            </summary>
            <param name="obj">The persistent object that is added to the map.</param>
        </member>
        <member name="M:Chili.Opf3.IdentityMap.TryGetValue``1(``0,``0@)">
            <summary>
            Tries to get the object from the identity map. If the object couldn't be found
            the result is false.
            </summary>
            <param name="obj">The object that's searched in the identity map. Only the identity properties need
            to be set to make this work properly.</param>
            <param name="result">The result that represents the object in the identity map.</param>
            <returns>True if the object has been found; otherwise false.</returns>
        </member>
        <member name="M:Chili.Opf3.IdentityMap.BuildUniqueKey(System.Object,Chili.Opf3.Mapping.TypeMapping)">
            <summary>
            Builds a valid unique key for the object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.IdentityMap.Remove(System.Object)">
            <summary>
            Removes the given object from the <see cref="T:Chili.Opf3.IdentityMap"/>.
            </summary>
            <param name="obj">The object that is removed from the <see cref="T:Chili.Opf3.IdentityMap"/>.</param>
        </member>
        <member name="M:Chili.Opf3.IdentityMap.Remove(System.Object,System.Boolean)">
            <summary>
            Removes the given object from the <see cref="T:Chili.Opf3.IdentityMap"/>. If specified also all
            related and loaded objects are removed from the map.
            </summary>
            <param name="obj">The object that is removed from the <see cref="T:Chili.Opf3.IdentityMap"/>.</param>
            <param name="fullLoadedObjectGraph">If true all related and loaded objects are removed too.</param>
        </member>
        <member name="M:Chili.Opf3.IdentityMap.Remove(System.Object,System.Boolean,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Removes the given object from the <see cref="T:Chili.Opf3.IdentityMap"/>. If specified also all
            related and loaded objects are removed from the map.
            </summary>
            <param name="obj">The object that is removed from the <see cref="T:Chili.Opf3.IdentityMap"/>.</param>
            <param name="fullLoadedObjectGraph">If true all related and loaded objects are removed too.</param>
            <param name="trace">The trace that is used to avoid circles.</param>
        </member>
        <member name="M:Chili.Opf3.IdentityMap.RemoveAll">
            <summary>
            Removes all objects from the <see cref="T:Chili.Opf3.IdentityMap"/>.
            </summary>
        </member>
        <member name="P:Chili.Opf3.IdentityMap.Enabled">
            <summary>
            Gets or sets whether the <see cref="T:Chili.Opf3.IdentityMap"/> is enabled.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Storages.MsSql.MsSqlCommandBuilder">
            <summary>
            Class that converts
            <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see> classes to storage
            dependent <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see> classes for Ms Sql Server.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlCommandBuilder.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.MsSql.MsSqlCommandBuilder">MsSqlCommandBuilder Class</see>.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Mapping.RelationsParserException">
            <summary>
            Exception is thrown a relations set in the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> can't
            be parsed.
            </summary>
            <remarks>
            This exception is thrown a relations set in the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> can't
            be parsed. Usually this exception is thrown if the syntax of the relation is wrong.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelationsParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Mapping.RelationsParserException">RelationsParserException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelationsParserException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Mapping.RelationsParserException">RelationsParserException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelationsParserException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Mapping.RelationsParserException">RelationsParserException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.RelationsParserException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Mapping.RelationsParserException">RelationsParserException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="inner">The exception that caused the current exception.</param>
        </member>
        <member name="T:Chili.Opf3.Query.SqlQuery">
            <summary>Allows to specify directly storage dependent Sql queries.</summary>
            <remarks>
            	<para>SqlQuery allows to specify directly storage dependent queries that are then
                executed on the storage without any kind of parsing. This type of query is used to
                create complex joins or complex queries.</para>
            	<para>You should avoid to use SqlQuery in your code. Sometimes it could be
                better to create a stored procedure or an updatable view (in the storage). It's (in
                most cases) also faster to create those complex queries directly in the
                storage.</para>
            	<para>If you have to use this type of query in your application use it for example
                in specialized classes that do only execute queries (and NOT directly in your UI).
                You could for example derive from
                <see cref="T:Chili.Opf3.ObjectSearcher`1">ObjectSearcher</see> and create a customized
                searcher class that uses such queries.</para>
            	<para>When setting parameter have to use the {0}, {1}, ... syntax as shown in the
                example below.</para>
            </remarks>
            <example>
                The following example shows how to use a SqlQuery in a customized searcher class (a
                class that derives from ObjectSearcher). 
                <code lang="CS">
            // A customized User searcher.
            public class UserSearcher : ObjectSearcher&lt;User&gt;
            {
                public UserSearcher(ObjectContext context) : base(context)
                {
                }
             
                // Returns an ObjectSet with all user that have calls.
                public ObjectSet&lt;User&gt; FindWithCalls(string userName)
                {
                    // Extended query.
                    SqlQuery query = new SqlQuery(
                        "select distinct u.* from [USER] u, CALLS c where u.ID = c.USER_ID " +
                        "and u.NAME = {0};", userName);
             
                    return Context.GetObjectSet&lt;User&gt;(query);
                }
             
                // Returns an ObjectReader with all users that have calls.
                public ObjectReader&lt;User&gt; FindWithCallsReader()
                {
                    // Extended query.
                    SqlQuery query = new SqlQuery(
                        "select distinct u.* from [USER] u, CALLS c where u.ID = c.USER_ID " +
                        "and u.NAME = {0};", userName);
             
                    return Context.GetObjectReader&lt;User&gt;(query);
                }
            }
                </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.Query.SqlQuery.#ctor(System.String)">
            <summary>Creates a new instance of the <see cref="T:Chili.Opf3.Query.SqlQuery">SqlQuery Class</see>.</summary>
            <param name="command">Command that is executed on the storage.</param>
            <exception cref="T:System.ArgumentNullException">Command is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Query.SqlQuery.#ctor(System.String,System.Object[])">
            <summary>Creates a new instance of the <see cref="T:Chili.Opf3.Query.SqlQuery">SqlQuery Class</see>.</summary>
            <param name="command">Command that is executed on the storage.</param>
            <param name="parameters">Parameter that are passed for the command.</param>
            <exception cref="T:System.ArgumentNullException">Command is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Query.SqlQuery.GetQueryType">
            <summary>
            Tries to get the type of the <see cref="T:Chili.Opf3.Query.SqlQuery">SqlQuery</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.SqlQuery.ToCompiledQuery(Chili.Opf3.Storages.IStorage)">
            <summary>
            Converts the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> to an
            <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see> that is then executed on a
            specific <see cref="T:Chili.Opf3.Storages.IStorage">storage</see>.
            </summary>
            <returns>
            A new <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see> that has been generated using this instance.
            </returns>
            <param name="storage">
            Class that implements the <see cref="T:Chili.Opf3.Storages.IStorage">IStorage</see>
            interface. The query is executed on that storage.
            </param>
            <exception cref="T:System.ArgumentNullException">Storage is null.</exception>
        </member>
        <member name="P:Chili.Opf3.Query.SqlQuery.Command">
            <summary>Specifies the command of the <see cref="T:Chili.Opf3.Query.SqlQuery">SqlQuery</see>.</summary>
            <value>A string that represents the query.</value>
        </member>
        <member name="P:Chili.Opf3.Query.SqlQuery.CommandType">
            <summary>
            Gets or sets the command type of the <see cref="T:Chili.Opf3.Query.SqlQuery">SqlQuery</see>.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Query.SqlQuery.Timeout">
            <summary>
            Specifies the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <value>An integer that specifies the wait time in seconds.</value>
            <exception cref="T:System.ArgumentException">Value is lower then zero.</exception>
        </member>
        <member name="P:Chili.Opf3.Query.SqlQuery.QueryType">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Query.QueryTypes">QueryType</see> of the SqlQuery.
            </summary>
            <value>
            A member of the <see cref="T:Chili.Opf3.Query.QueryTypes">QueryType</see>
            enumeration.
            </value>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.TokenKinds">
            <summary>Contains different types of an <see cref="T:Chili.Opf3.Query.OPathParser.Token">Token</see>.</summary>
            <remarks>
            This enumeration contains the types of an <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see>. The
            type of the query should be discovered by the <see cref="T:Chili.Opf3.Query.IQuery">IQuery</see>
            itself.
            </remarks>
        </member>
        <member name="F:Chili.Opf3.Query.OPathParser.TokenKinds.OpenParenthesis">
            <summary>
            Represents a token that is an open bracket in the OPath statement.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.OPathParser.TokenKinds.CloseParenthesis">
            <summary>
            Represents a token that is a closing bracket in the OPath statement.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.OPathParser.TokenKinds.Member">
            <summary>
            Represents a token that is a object member in the OPath statement.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.OPathParser.TokenKinds.Comparer">
            <summary>
            Represents a token that is a comparer in the OPath statement.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.OPathParser.TokenKinds.Parameter">
            <summary>
            Represents a token that is a parameter in the OPath statement.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.OPathParser.TokenKinds.Concat">
            <summary>
            Represents a token that is a concat in the OPath statement.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.OPathParser.TokenKinds.Join">
            <summary>
            Represents a token that is a join in the OPath statement.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.OPathParser.TokenKinds.Command">
            <summary>
            Represents a token that is a command in the OPath statement.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.OPathParser.TokenKinds.SortBy">
            <summary>
            Represents a token that is a SortBy in the OPath statement.
            </summary>
        </member>
        <member name="F:Chili.Opf3.Query.OPathParser.TokenKinds.Unknown">
            <summary>
            Represents a token that is unknown. A token is unknown if it has been found in
            a place where it was not clear what kind of token it is. This does not mean that
            the token is invalid.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.OEField">
            <summary>
            Represents a storage field in the OPath statement. 
            </summary>
            <remarks>
            Storage fields are encapsulated by this class. They are used in the internally created insert,
            update, delete commands and for the additional fields of the 
            <see cref="T:Chili.Opf3.IDynamicExtensible">IDynamicExtensible</see> interface.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OEField.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.OPathParser.OEField">OEField Class</see>.
            </summary>
            <param name="name">Specifies the name of the field.</param>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.OEField.Name">
            <summary>
            Returns the name of the field.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Mapping.PropertyMetaInfo">
            <summary>
            Class represents a meta element that is used to create the mapping between the persistent object and
            the field in the table.
            </summary>
            <remarks>
            This class represents a meta element that is used to create the mapping between a property
            of the persistent object and a field in the storage table.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Mapping.PropertyMetaInfo.#ctor(System.Reflection.PropertyInfo,System.Type,Chili.Opf3.FieldAttribute)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Mapping.PropertyMetaInfo">PropertyMetaInfo Class</see>.
            </summary>
            <param name="propertyInfo">The PropertyInfo object that represents the property in the persistent object's type.</param>
            <param name="memberType">The type of the MemberInfo object.</param>
            <param name="attribute">The <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> that contains the mapping information.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.PropertyMetaInfo.GetValue(System.Object)">
            <summary>
            Returns the value of the element of the persistent object type that is mapped to a field in the storage.
            </summary>
            <param name="obj">The persistent object that's value is returned.</param>
            <returns>Value of the persistent object's type element that is mapped to a field in the storage.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.PropertyMetaInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets new value for the element of the persistent object type that is mapped to the storage.
            </summary>
            <param name="obj">The persistent object that's member's value is updated.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="P:Chili.Opf3.Mapping.PropertyMetaInfo.Name">
            <summary>
            Returns the name of the element of the persistent object type that is mapped to the field in the storage.
            </summary>
        </member>
        <member name="T:Chili.Opf3.FieldAttribute">
            <summary>This attribute is used to connect a property with a field in the storage.</summary>
            <remarks>
            The FieldAttribute is used to mark properties of the persistent class. Each
            property marked with this attribute corresponds to a field in the storage. The first
            argument that is passed to the attribute is the name of the field (in the entity) in
            the storage. After specifying the field optional properties may be set, which specify
            whether the field is an <see cref="P:Chili.Opf3.FieldAttribute.Identifier">identifier</see>,
            <see cref="P:Chili.Opf3.FieldAttribute.AllowDBNull">allows DBNull</see> or is an
            <see cref="P:Chili.Opf3.FieldAttribute.AutoNumber">auto number field</see> field. By specifying
            the property <see cref="P:Chili.Opf3.FieldAttribute.PersistBehaviours">PersistBehaviours</see> it
            is also possible to specify whether the property should be always saved or only if
            inserted or updated.
            </remarks>
            <example>
                The following example shows how to use the FieldAttribute in a persistent class.
                <code lang="CS">
            [Persistent("USER")]
            public class User
            {
                [Field("NAME", AllowDBNull = false)]
                public string Name
                {
                    // ... code of the property.
                }
             
                [Field("ID", AllowDBNull = true, Identifier = true)]
                public string Id
                {
                    // ... code of the property.
                }
             
                // ... Other code of the class.
            }
                </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.FieldAttribute.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute
            Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.FieldAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute
            Class</see>.
            </summary>
            <param name="fieldName">Name of the field in the storage that is mapped to the property.</param>
            <exception cref="T:System.ArgumentNullException">FieldName is null.</exception>
        </member>
        <member name="P:Chili.Opf3.FieldAttribute.FieldName">
            <summary>
            Returns the name of the field in the storage that is mapped to the
            property.
            </summary>
            <value>
            A string that represents the field in the storage connected with the
            property.
            </value>
        </member>
        <member name="P:Chili.Opf3.FieldAttribute.Identifier">
            <summary>
            Specifies whether the field connected to the property is an identifier (primary
            key for some storage) of the entity.
            </summary>
            <value>Returns true if the field connected to the property is an identifier.</value>
        </member>
        <member name="P:Chili.Opf3.FieldAttribute.AllowDBNull">
            <summary>
            Specifies whether the field connected with the property is allowed to be DBNull
            in the storage.
            </summary>
            <remarks>
            The default behaviour is true, since usually properties are allowed to be DBNull.
            Set it to false to avoid saving of DBNull values (such properties are sometimes also
            named mandatory properties)
            </remarks>
            <value>Returns true if DBNull is allowed to be saved in the field.</value>
        </member>
        <member name="P:Chili.Opf3.FieldAttribute.AutoNumber">
            <summary>
            	<para>Specifies whether the connected field of property is an auto number field in
                the storage.</para>
            </summary>
            <remarks>
            	<para>Auto number fields are used by a storage to create unique keys for objects in
                the storage.</para>
            	<para><b>Attention:</b> Currently auto numbers are only supported for
                <see cref="T:Chili.Opf3.Storages.OleDb.AccessStorage">AccessStorage</see> and
                <see cref="T:Chili.Opf3.Storages.MsSql.MsSqlStorage">MsSqlStorage</see>.</para>
            </remarks>
            <value>Returns true if the connected field is an auto number field.</value>
        </member>
        <member name="P:Chili.Opf3.FieldAttribute.PersistBehaviours">
            <summary>Specifies the persist behaviour of the property.</summary>
            <remarks>
            	<para>By setting the behaviour you may only allow to insert or update a property.
                The default behaviour is to insert and update the field in the storage with the
                value of the property.</para>
            </remarks>
            <value>Returns the persist behaviour of the property.</value>
        </member>
        <member name="P:Chili.Opf3.FieldAttribute.MaxLength">
            <summary>
            Gets and sets the maximum length for fields in the storage that hold strings.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Mapping.PropertyGetDelegate">
            <summary>
            This delegate is used to invoked the dynamic method that returns the value of a mapped
            property.
            </summary>
            <param name="obj">The persistent object whose dynamic method is invoked.</param>
        </member>
        <member name="T:Chili.Opf3.IDynamicPopulateHelper">
            <summary>
            This interface that is implemented by objects that are populated without
            reflection.
            </summary>
            <remarks>
            	<para>This marker interface is implemented by classes that won't let the framework
                populate (via reflection) them with data or retrieve data from them via reflection.</para>
            	<para>If the framework encounters a persistent object that implements this
                interface it injects runtime code to populate the persistent object without using reflection.</para>
            	<para>The same behaviour is also reached by setting the <see cref="T:Chili.Opf3.Mapping.TypeMapping">TypeMapping's</see> AutoInjectDynamicPopulateHelper
            	property to true. Setting that property to true injects code in all persistent objects!</para>
            </remarks>
            <example>
                The following example shows how to implement the interface. 
                <code lang="CS">
            [Persistent("USER")]
            public class User : IDynamicPopulateHelper
            {
                // ... Other properties and code.
            }
                </code>
            </example>
        </member>
        <member name="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampNotFoundException">
            <summary>
            Exception is thrown if the persistent does not contain a member with the 
            <see cref="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampAttribute">TimeStampAttribute</see> set.
            </summary>
            <remarks>
            This exception is thrown if the persistent does not contain a member with the 
            <see cref="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampAttribute">TimeStampAttribute</see> set. When working with the 
            <see cref="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampConcurrencyManager">TimeStampConcurrencyManager</see> every persistent
            needs to have one <see cref="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampAttribute">TimeStampAttribute</see> set on one of the 
            bound properties.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Concurrency.TimeStamp.TimeStampNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampNotFoundException">TimeStampNotFoundException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Concurrency.TimeStamp.TimeStampNotFoundException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampNotFoundException">TimeStampNotFoundException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Concurrency.TimeStamp.TimeStampNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampNotFoundException">TimeStampNotFoundException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.TimeStamp.TimeStampNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampNotFoundException">TimeStampNotFoundException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="inner">The exception that caused the current exception.</param>
        </member>
        <member name="T:Chili.Opf3.Caching.CachedQuery">
            <summary>
            Represents a cached query object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Caching.CachedQuery.#ctor(Chili.Opf3.Query.IQuery,Chili.Opf3.Storages.IStorage,System.DateTime,System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Caching.CachedQuery">CachedQuery Class</see>.
            </summary>
            <param name="query">The query that is cached.</param>
            <param name="storage">The storage of the query.</param>
            <param name="validUntil">The time until the query is valid.</param>
            <param name="persistentType">The type of persistents in the query.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.CachedQuery.AddPersistent(Chili.Opf3.Caching.CachedPersistent)">
            <summary>
            Adds a persistent object to the query.
            </summary>
            <param name="persistent">The persistent that has been added.</param>
        </member>
        <member name="M:Chili.Opf3.Caching.CachedQuery.TryGetPersistents``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            Tries to get the persistents for the query.
            </summary>
            <param name="persistents">The list of persistents that is returned.</param>
            <returns>False if the persistent couldn't get. Some might have expired.</returns>
        </member>
        <member name="P:Chili.Opf3.Caching.CachedQuery.Query">
            <summary>
            Returns the query.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Caching.CachedQuery.Storage">
            <summary>
            Returns the storage where the query is executed on.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Caching.CachedQuery.PersistentsType">
            <summary>
            Gets the persistents type. The type of the persistents held by this cached query.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Caching.CachedQuery.Expired">
            <summary>
            Returns whether the cached persistent has expired.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Caching.CachedQuery.ValidUntil">
            <summary>
            Gets or sets the date time until the item is valid.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Caching.CachedQuery.CreatedOn">
            <summary>
            Gets when the item was created.
            </summary>
        </member>
        <member name="T:Chili.Opf3.PerThreadObjectContextFactoryPolicy">
            <summary>
            This class creates a new <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance
            for each thread that is calling <see cref="T:Chili.Opf3.ObjectContextFactory">ObjectContextFactory</see>'s
            GetContext method.
            </summary>
        </member>
        <member name="M:Chili.Opf3.PerThreadObjectContextFactoryPolicy.#ctor(Chili.Opf3.ObjectContextFactoryCreatorDelegate)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.PerThreadObjectContextFactoryPolicy">PerThreadObjectContextFactoryPolicy Class</see>.
            </summary>
            <param name="creator">The delegate that creates new <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instances.</param>
        </member>
        <member name="M:Chili.Opf3.PerThreadObjectContextFactoryPolicy.IsNewObjectContextRequired">
            <summary>
            Returns whether a new <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance is required.
            </summary>
            <returns>True if a new instance is required; false otherwise.</returns>
        </member>
        <member name="M:Chili.Opf3.PerThreadObjectContextFactoryPolicy.StoreNewObjectContext(Chili.Opf3.ObjectContext)">
            <summary>
            Stores the new <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance.
            </summary>
            <param name="context">The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> to store.</param>
            <returns>The <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance that has been stored.</returns>
        </member>
        <member name="M:Chili.Opf3.PerThreadObjectContextFactoryPolicy.GetExistingObjectContext">
            <summary>
            Gets an existing <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance.
            </summary>
            <returns>An <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> instance.</returns>
        </member>
        <member name="T:Chili.Opf3.Storages.Oracle.OracleCommandBuilder">
            <summary>
            Class that converts
            <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see> classes to storage
            dependent <see cref="T:Chili.Opf3.Query.CompiledQuery">CompiledQuery</see> classes for Oracle.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.Oracle.OracleCommandBuilder.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.Oracle.OracleCommandBuilder">OracleCommandBuilder Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.Oracle.OracleCommandBuilder.GetValidSequenceName(Chili.Opf3.Storages.Oracle.OracleStorage,System.String,System.String)">
            <summary>
            Returns a sequence name for autonumber columns.
            </summary>
            <param name="entity">Name of the entity.</param>
            <param name="field">Name of the field.</param>
            <param name="storage">The storage that the query is created for.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.Oracle.OracleCommandBuilder.BuildInsertQuery(Chili.Opf3.Storages.SqlStorageBase,Chili.Opf3.Query.PersistentObjectExpression)">
            <summary>
            Creates the <see cref="T:Chili.Opf3.Query.CompiledQuery">CompildQuery</see> that contains a storage dependent 
            update query by using the <see cref="T:Chili.Opf3.Query.PersistentObjectExpression">PersistentObjectExpression</see> given.
            </summary>
            <param name="poe">
            	<see cref="T:Chili.Opf3.Query.PersistentObjectExpression">PersistentObjectExpression</see> that is converted
            to a <see cref="T:Chili.Opf3.Query.CompiledQuery">CompildQuery</see>.
            </param>
            <param name="sqlStorageBase">The storage that the query is compiled for.</param>
            <exception cref="T:System.ArgumentNullException">PersistentObjectExpression is null.</exception>
            <exception cref="T:System.ArgumentNullException">SqlStorageBase is null.</exception>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.Tokenizer">
            <summary>
            Returns tokens of the OPath expression.
            </summary>
            <remarks>
            The tokenizer parses the OPath expression and returns tokens that are processed
            by the <see cref="N:Chili.Opf3.Query.OPathParser">OPathParser</see> to create a valid 
            <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see>.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.OPathParser.Tokenizer">Tokenizer Class</see>.
            </summary>
            <param name="value">Value that is processed by the <see cref="T:Chili.Opf3.Query.OPathParser.Tokenizer">Tokenizer</see>.</param>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this <see cref="T:Chili.Opf3.Query.OPathParser.Tokenizer">Tokenizer</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.MoveNext">
            <summary>
            Moves the <see cref="T:Chili.Opf3.Query.OPathParser.Tokenizer">Tokenizer</see> to the next item.
            </summary>
            <returns>
            Returns true if it was possible to move the the next item.
            </returns>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.Reset">
            <summary>
            Resets the <see cref="T:Chili.Opf3.Query.OPathParser.Tokenizer">Tokenizer</see>. This method is not supported, 
            since the <see cref="T:Chili.Opf3.Query.OPathParser.Tokenizer">Tokenizer</see> is forward-only.
            </summary>
            <exception cref="T:System.NotImplementedException">Exception is thrown since the method is not supported.</exception>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this <see cref="T:Chili.Opf3.Query.OPathParser.Tokenizer">Tokenizer</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.Dispose">
            <summary>
            Disposes the <see cref="T:Chili.Opf3.Query.OPathParser.Tokenizer">Tokenizer</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.Next">
            <summary>
            Moves the <see cref="T:Chili.Opf3.Query.OPathParser.Tokenizer">Tokenizer</see> to the next item.
            </summary>
            <returns>
            Returns null if it was possible to move the the next item.
            </returns>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.Read">
            <summary>
            Reads the next char in the tokenizer and advances the tokenizer.
            </summary>
            <returns>Returns the char that has been read or EOF if the string is finished.</returns>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.ReadAhead">
            <summary>
            Reads the next char in the tokenizer. Does not advance the tokenizer.
            </summary>
            <returns>Returns the char that has been read or EOF if the string is finished.</returns>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.CreateToken(Chili.Opf3.Query.OPathParser.TokenKinds)">
            <summary>
            Creates a new <see cref="T:Chili.Opf3.Query.OPathParser.Token">Token</see> of the given <see cref="T:Chili.Opf3.Query.OPathParser.TokenKinds">TokenKind</see>.
            </summary>
            <param name="tokenKind">The type of the <see cref="T:Chili.Opf3.Query.OPathParser.Token">Token</see> that is generated.</param>
            <returns>A <see cref="T:Chili.Opf3.Query.OPathParser.Token">Token</see> with the given type.</returns>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.GetCurrentTokenValue">
            <summary>
            Gets the value for the token that is generated.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.ReadWord">
            <summary>
            Reads the whole next word.
            </summary>
            <returns>Returns a <see cref="T:Chili.Opf3.Query.OPathParser.Token">Token</see> that contains the next word.</returns>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.ReadCommand">
            <summary>
            Reads the whole next command.
            </summary>
            <returns>Returns a <see cref="T:Chili.Opf3.Query.OPathParser.Token">Token</see> that contains the next command.</returns>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.ReadJoin">
            <summary>
            Reads the whole next joing.
            </summary>
            <returns>Returns a <see cref="T:Chili.Opf3.Query.OPathParser.Token">Token</see> that contains the next join.</returns>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.ReadConcat">
            <summary>
            Reads the whole next concat.
            </summary>
            <returns>Returns a <see cref="T:Chili.Opf3.Query.OPathParser.Token">Token</see> that contains the next concat.</returns>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.ReadSortBy">
            <summary>
            Reads the whole next concat.
            </summary>
            <returns>Returns a <see cref="T:Chili.Opf3.Query.OPathParser.Token">Token</see> that contains the next concat.</returns>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.ReadComparer">
            <summary>
            Reads the whole next comparer.
            </summary>
            <returns>Returns a <see cref="T:Chili.Opf3.Query.OPathParser.Token">Token</see> that contains the next comparer.</returns>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.ReadParameter">
            <summary>
            Reads the whole next parameter.
            </summary>
            <returns>Returns a <see cref="T:Chili.Opf3.Query.OPathParser.Token">Token</see> that contains the next parameter.</returns>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.Tokenizer.ReadInlineParameter(System.Char)">
            <summary>
            Reads the whole next inline parameter.
            </summary>
            <returns>Returns a <see cref="T:Chili.Opf3.Query.OPathParser.Token">Token</see> that contains the next inline parameter.</returns>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.Tokenizer.Current">
            <summary>
            Returns the current <see cref="T:Chili.Opf3.Query.OPathParser.Token">Token</see> processed by the <see cref="T:Chili.Opf3.Query.OPathParser.Tokenizer">Tokenizer</see>.
            </summary>
            <value>
            The current <see cref="T:Chili.Opf3.Query.OPathParser.Token">Token</see> processed by the <see cref="T:Chili.Opf3.Query.OPathParser.Tokenizer">Tokenizer</see>.
            </value>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.Tokenizer.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current <see cref="T:Chili.Opf3.Query.OPathParser.Token">Token</see> processed by the <see cref="T:Chili.Opf3.Query.OPathParser.Tokenizer">Tokenizer</see>.
            </summary>
            <value>
            The current <see cref="T:Chili.Opf3.Query.OPathParser.Token">Token</see> processed by the <see cref="T:Chili.Opf3.Query.OPathParser.Tokenizer">Tokenizer</see>.
            </value>
        </member>
        <member name="T:Chili.Opf3.PersistingTrace">
            <summary>
            Class that stores information about recently saved persistent objects.
            </summary>
            <remarks>
            This class stores information about recently saved persistent objects. When saving a persistent object
            and it's full object graph (<see cref="M:Chili.Opf3.ObjectContext.PersistChanges``1(``0,Chili.Opf3.PersistDepths)">PersistChanges</see>)
            it's required to avoid circles in the saving process. PersistentTrace saves therefore information about
            the objects that have been saved during the current persist operation to avoid those circles.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.PersistingTrace.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.PersistingTrace">PersistingTrace Class</see>.
            An instance of this class is only created by the framework itself.
            </summary>
        </member>
        <member name="M:Chili.Opf3.PersistingTrace.MarkHoppedBy(System.Object,Chili.Opf3.PersistDepths)">
            <summary>
            Adds an object to be traced as "hopped by" by this class. Persistent objects that are not
            saved, but their node has been visited are added by using this method.
            Classes implementing the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> interface should only add objects
            if they save them directly to the storage without using the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>.
            See the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> interface for more information.
            </summary>
            <param name="obj">The object that is added to be traced by this instance of the <see cref="T:Chili.Opf3.PersistingTrace">PersistingTrace</see> class.</param>
            <param name="depth">The depth of the current persist.</param>
        </member>
        <member name="M:Chili.Opf3.PersistingTrace.MarkPersisted(System.Object,Chili.Opf3.PersistDepths)">
            <summary>
            Adds an object to be traced as "persisted" by this class. Persistent objects that are not
            saved, but their node has been visited are added by using this method.
            Classes implementing the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> interface should only add objects
            if they save them directly to the storage without using the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see>.
            See the <see cref="T:Chili.Opf3.ICustomPersister">ICustomPersister</see> interface for more information.
            </summary>
            <param name="obj">The object that is added to be traced by this instance of the <see cref="T:Chili.Opf3.PersistingTrace">PersistingTrace</see> class.</param>
            <param name="depth">The depth of the current persist.</param>
        </member>
        <member name="M:Chili.Opf3.PersistingTrace.ContainsHoppedBy(System.Object,Chili.Opf3.PersistDepths)">
            <summary>
            Returns whether the persistent object is already in the "hopped by" list of this class.
            </summary>
            <param name="obj">The object that is checked of being already traced.</param>
            <param name="depth">The depth of the current persist.</param>
            <returns>True when the persistent object is already traced by this instance 
            of the <see cref="T:Chili.Opf3.PersistingTrace">PersistingTrace</see> class.</returns>
        </member>
        <member name="M:Chili.Opf3.PersistingTrace.ContainsPersisted(System.Object,Chili.Opf3.PersistDepths)">
            <summary>
            Returns whether the persistent object is already in the "persisted" list of this class.
            </summary>
            <param name="obj">The object that is checked of being already traced.</param>
            <param name="depth">The depth of the current persist.</param>
            <returns>True when the persistent object is already traced by this instance 
            of the <see cref="T:Chili.Opf3.PersistingTrace">PersistingTrace</see> class.</returns>
        </member>
        <member name="M:Chili.Opf3.PersistingTrace.Clear">
            <summary>
            Clears the cache of the <see cref="T:Chili.Opf3.PersistingTrace">PersistingTrace</see>.
            </summary>
        </member>
        <member name="P:Chili.Opf3.PersistingTrace.Count">
            <summary>
            Returns the amount of objects managed by this instance.
            </summary>
        </member>
        <member name="T:Chili.Opf3.PersistingTrace.TracedItem">
            <summary>
            Represents a persistent object that is traced.
            </summary>
        </member>
        <member name="M:Chili.Opf3.PersistingTrace.TracedItem.#ctor(System.Object,Chili.Opf3.PersistDepths)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.PersistingTrace.TracedItem">TracedItem Class</see>.
            </summary>
            <param name="target">The target that is watched.</param>
            <param name="depth">The depth of the current persist.</param>
        </member>
        <member name="P:Chili.Opf3.PersistingTrace.TracedItem.Target">
            <summary>
            Returns the target.
            </summary>
        </member>
        <member name="P:Chili.Opf3.PersistingTrace.TracedItem.Depth">
            <summary>
            Returns the depth of the current persist.
            </summary>
        </member>
        <member name="T:Chili.Opf3.PersistentQueriesProvidersCollection">
            <summary>
            This class holds a list of <see cref="T:Chili.Opf3.IPersistentQueriesProvider">IPersistentQueriesProviders</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.PersistentQueriesProvidersCollection.Add(Chili.Opf3.IPersistentQueriesProvider)">
            <summary>
            Adds an <see cref="T:Chili.Opf3.IPersistentQueriesProvider">IPersistentQueriesProvider</see> to the <see cref="T:Chili.Opf3.PersistentQueriesProvidersCollection">PersistentQueriesProvidersCollection</see>.
            </summary>
            <param name="value">The <see cref="T:Chili.Opf3.IPersistentQueriesProvider">IPersistentQueriesProvider</see> to add.</param>
        </member>
        <member name="M:Chili.Opf3.PersistentQueriesProvidersCollection.ContainsKey(System.Type)">
            <summary>
            Determines whether the <see cref="T:Chili.Opf3.PersistentQueriesProvidersCollection">PersistentQueriesProvidersCollection</see> contains an element with the specified key. 
            </summary>
            <param name="key">The persistent type to locate in the <see cref="T:Chili.Opf3.PersistentQueriesProvidersCollection">PersistentQueriesProvidersCollection</see>.</param>
            <returns></returns>
        </member>
        <member name="M:Chili.Opf3.PersistentQueriesProvidersCollection.Remove(System.Type)">
            <summary>
            Removes the element with the specified key from the <see cref="T:Chili.Opf3.PersistentQueriesProvidersCollection">PersistentQueriesProvidersCollection</see>.
            </summary>
            <param name="key">The persistent type to remove from the <see cref="T:Chili.Opf3.PersistentQueriesProvidersCollection">PersistentQueriesProvidersCollection</see>.</param>
            <returns></returns>
        </member>
        <member name="M:Chili.Opf3.PersistentQueriesProvidersCollection.TryGetValue(System.Type,Chili.Opf3.IPersistentQueriesProvider@)">
            <summary>
            Gets the value associated with the specified type. 
            </summary>
            <param name="key">The persistent type whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, 
            the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the object that implements <see cref="T:Chili.Opf3.PersistentQueriesProvidersCollection">PersistentQueriesProvidersCollection</see> contains an 
            element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Chili.Opf3.PersistentQueriesProvidersCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:Chili.Opf3.PersistentQueriesProvidersCollection">PersistentQueriesProvidersCollection</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.PersistentQueriesProvidersCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the <see cref="T:Chili.Opf3.PersistentQueriesProvidersCollection">PersistentQueriesProvidersCollection</see>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Chili.Opf3.PersistentQueriesProvidersCollection.Keys">
            <summary>
            Gets an ICollection containing the keys of the <see cref="T:Chili.Opf3.PersistentQueriesProvidersCollection">PersistentQueriesProvidersCollection</see>.
            </summary>
        </member>
        <member name="P:Chili.Opf3.PersistentQueriesProvidersCollection.Values">
            <summary>
            Gets an ICollection containing the values in the <see cref="T:Chili.Opf3.PersistentQueriesProvidersCollection">PersistentQueriesProvidersCollection</see>.
            </summary>
        </member>
        <member name="P:Chili.Opf3.PersistentQueriesProvidersCollection.Item(System.Type)">
            <summary>
            Gets or sets the element with the specified type.
            </summary>
            <param name="key">The persistent type to get or set.</param>
            <returns>The element associated with the specified type or null if none is found.</returns>
        </member>
        <member name="P:Chili.Opf3.PersistentQueriesProvidersCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Chili.Opf3.PersistentQueriesProvidersCollection">PersistentQueriesProvidersCollection</see>.
            </summary>
        </member>
        <member name="P:Chili.Opf3.PersistentQueriesProvidersCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Chili.Opf3.PersistentQueriesProvidersCollection">PersistentQueriesProvidersCollection</see> is read-only.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Concurrency.Md5.Md5ConcurrencyManager">
            <summary>
            Implements the MD5 concurrency manager. This class uses a Md5 check
            to discover if somebody else has changed the object in the meantime.
            </summary>
            <remarks>
            This class implements a MD5 check that is used to validate an object against the storage.
            It checks if somebody else changed the object in the meantime (while it has been in memory)
            and informs the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> whether a problem has
            been encountered.
            </remarks>
            <example>
            The following example shows the usage of the class in your application.
            <code lang="CS">
            // ... Other code
            
            // Creates a new ObjectContext that uses an MsSql Server as storage.
            ObjectContext context = new ObjectContext(new MsSqlStorage("sa", "", "localhost", "application"));
            // Set the MD5 Concurrency Manager. The ObjectContext uses it from 
            // now on to check the concurrency.
            context.ConcurrencyManager = new Md5ConcurrencyManager();
            
            // ... Other code
            </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.Concurrency.Md5.Md5ConcurrencyManager.OnBeforeUpdate``1(``0,Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs)">
            <summary>
            Invoked before the update operation of the object.
            </summary>
            <param name="obj">Persistent object that is validated.</param>
            <param name="e">EventArgs of the current routine.</param>
            <exception cref="T:Chili.Opf3.Concurrency.ConcurrencyException">A concurrency problem has been encountered.</exception>
        </member>
        <member name="M:Chili.Opf3.Concurrency.Md5.Md5ConcurrencyManager.OnAfterUpdate``1(``0,Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs)">
            <summary>
            Invoked after the update operation of the object.
            </summary>
            <param name="obj">Persistent object that is validated.</param>
            <param name="e">EventArgs of the current routine.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.Md5.Md5ConcurrencyManager.OnBeforeInsert``1(``0,Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs)">
            <summary>
            Invoked before the insert operation of the object.
            </summary>
            <param name="obj">Persistent object that is validated.</param>
            <param name="e">EventArgs of the current routine.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.Md5.Md5ConcurrencyManager.OnAfterInsert``1(``0,Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs)">
            <summary>
            Invoked after the insert operation of the object.
            </summary>
            <param name="obj">Persistent object that is validated.</param>
            <param name="e">EventArgs of the current routine.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.Md5.Md5ConcurrencyManager.OnBeforeDelete``1(``0,Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs)">
            <summary>
            Invoked before the delete operation of the object.
            </summary>
            <param name="obj">Persistent object that is validated.</param>
            <param name="e">EventArgs of the current routine.</param>
        </member>
        <member name="M:Chili.Opf3.Concurrency.Md5.Md5ConcurrencyManager.OnAfterLoad``1(``0,Chili.Opf3.Concurrency.ConcurrencyManagerEventArgs)">
            <summary>
            Invoked after the load operation of the object.
            </summary>
            <param name="obj">Persistent object that is validated.</param>
            <param name="e">EventArgs of the current routine.</param>
        </member>
        <member name="T:Chili.Opf3.Mapping.MappingException">
            <summary>
            Exception is thrown if the mapping for a persistent object couldn't been constructed.
            </summary>
            <remarks>
            This exception is thrown if the mapping for a persistent object couldn't been constructed. Reasons for 
            this excepciotn could be: the same field has been mapped to more then one property or the 
            <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see> is missing on the class.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Mapping.MappingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Mapping.MappingException">MappingException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.MappingException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Mapping.MappingException">MappingException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.MappingException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Mapping.MappingException">MappingException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.MappingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Mapping.MappingException">MappingException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="inner">The exception that caused the current exception.</param>
        </member>
        <member name="T:Chili.Opf3.Mapping.TypeRelationInfoCollection">
            <summary>
            Class that represents a collection of <see cref="T:Chili.Opf3.Mapping.RelationInfo">RelationInfo</see> objects.
            </summary>
            <remarks>
            This class represents a collection of <see cref="T:Chili.Opf3.Mapping.RelationInfo">RelationInfo</see> objects. This class
            contains all relations related with a given type.
            </remarks>
        </member>
        <member name="T:Chili.Opf3.Mapping.ITypeRelationInfoCollection">
            <summary>
            Interface that represents a collection of <see cref="T:Chili.Opf3.Mapping.RelationInfo">RelationInfo</see> objects.
            </summary>
            <remarks>
            This interface represents a collection of <see cref="T:Chili.Opf3.Mapping.RelationInfo">RelationInfo</see> objects. This interface
            contains all relations related with a given type.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Mapping.ITypeRelationInfoCollection.Contains(Chili.Opf3.Mapping.IRelationInfo)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.ITypeRelationInfoCollection.CopyTo(Chili.Opf3.Mapping.IRelationInfo[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.ITypeRelationInfoCollection.GetRelationMapping(System.String)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Mapping.RelationInfo">RelationInfo</see> object associated with the 
            <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see>'s name.
            </summary>
            <param name="name">The relation's name. The name is specified by setting 
            the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see>'s name property.</param>
        </member>
        <member name="P:Chili.Opf3.Mapping.ITypeRelationInfoCollection.Count">
            <summary>
            Gets the number of elements actually contained in the collection.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.ITypeRelationInfoCollection.IsReadOnly">
            <summary>
            Returns whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.ITypeRelationInfoCollection.Item(System.Int32)">
            <summary>
            Returns the item at the given index.
            </summary>
            <param name="index">The index of the item that is returned.</param>
            <returns>The item at the given index.</returns>
        </member>
        <member name="P:Chili.Opf3.Mapping.ITypeRelationInfoCollection.RelatedType">
            <summary>
            Returns the type of the <see cref="T:Chili.Opf3.Mapping.TypeRelationInfoCollection">TypeRelationInfoCollection</see>.
            This type is the type of the related objects.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.TypeRelationInfoCollection.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Mapping.TypeRelationInfoCollection">TypeRelationInfoCollection Class</see>.
            </summary>
            <param name="type">The type associated with the collection.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.TypeRelationInfoCollection.Add(Chili.Opf3.Mapping.RelationInfo)">
            <summary>
            Adds the <see cref="T:Chili.Opf3.Mapping.IRelationInfo">IRelationInfo</see> object to the list.
            </summary>
            <param name="info">The object that is added.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.TypeRelationInfoCollection.GetRelationMapping(System.String)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Mapping.RelationInfo">RelationInfo</see> object associated with the 
            <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see>'s name.
            </summary>
            <param name="name">The relation's name. The name is specified by setting 
            the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see>'s name property.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.TypeRelationInfoCollection.Contains(Chili.Opf3.Mapping.IRelationInfo)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.TypeRelationInfoCollection.CopyTo(Chili.Opf3.Mapping.IRelationInfo[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.TypeRelationInfoCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns> A enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.TypeRelationInfoCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An enumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Chili.Opf3.Mapping.TypeRelationInfoCollection.RelatedType">
            <summary>
            Returns the type of the <see cref="T:Chili.Opf3.Mapping.TypeRelationInfoCollection">TypeRelationInfoCollection</see>.
            This type is the type of the related objects.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.TypeRelationInfoCollection.Count">
            <summary>
            Gets the number of elements actually contained in the collection.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.TypeRelationInfoCollection.IsReadOnly">
            <summary>
            Returns whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.TypeRelationInfoCollection.Item(System.Int32)">
            <summary>
            Returns the item at the given index.
            </summary>
            <param name="index">The index of the item that is returned.</param>
            <returns>The item at the given index.</returns>
        </member>
        <member name="T:Chili.Opf3.Mapping.Providers.AttributeTypeMappingProvider">
            <summary>
            Creates the type mapping for a persistent type by inspecting the attributes that are set
            on the members of the persistent type.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.AttributeTypeMappingProvider.GetPersistentAttribute(System.Type)">
            <summary>
            Returns the persistent attribute of the type or null if the type has no 
            <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see>.
            </summary>
            <param name="type">Type investigated for the <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see>.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.AttributeTypeMappingProvider.GetMemberFieldAttribute(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> for the given member. If the member is not mapped,
            null is returned.
            </summary>
            <param name="type">The persistent type that's mapping is created.</param>
            <param name="member">The member of the persistent type.</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> or null if the member is not mapped.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.AttributeTypeMappingProvider.GetMemberRelationAttribute(System.Type,System.Reflection.MemberInfo,System.Type)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> for the given member. If the member does not
            have an attribute set, null is returned.
            </summary>
            <param name="type">The persistent type that's mapping is created.</param>
            <param name="member">The member of the persistent type.</param>
            <param name="relatedType">The related object's type.</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> or null if the member does not have
            an attribute set.</returns>
        </member>
        <member name="T:Chili.Opf3.ObjectLoadingEventArgs">
            <summary>
            EventArgs used in the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> events
            that are invoked before the load process of an object.
            </summary>
            <remarks>
            This class is used by the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> in
            events that are invoked before the load process of an object to send additional event
            data. The data contains the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object that
            contains further information about the state of the object and the object itself,
            </remarks>
        </member>
        <member name="M:Chili.Opf3.ObjectLoadingEventArgs.#ctor(System.Object,Chili.Opf3.ObjectInfo)">
            <summary>
            Creates a new instance of the<see cref="T:Chili.Opf3.ObjectLoadingEventArgs">ObjectLoadingEventArgs Class</see>.
            </summary>
            <param name="obj">The object that is affected by the current operation. This object is loaded from the storage.</param>
            <param name="objectInfo"><see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object that contains state information about the persistent object.</param>
            <exception cref="T:System.ArgumentNullException">Query is null, obj is null or objectInfo is null.</exception>
        </member>
        <member name="P:Chili.Opf3.ObjectLoadingEventArgs.ObjectInfo">
            <summary>
            Returns the <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfo</see> object that 
            contains state information about the persistent object.
            </summary>
            <value>
            The <see cref="P:Chili.Opf3.ObjectLoadingEventArgs.ObjectInfo">ObjectInfo</see> object that contains state
            information about the persistent object.
            </value>
        </member>
        <member name="P:Chili.Opf3.ObjectLoadingEventArgs.Object">
            <summary>
            Returns the object that is affected by the current operation. This object is
            loaded from the storage. All properties are set to the default values!
            </summary>
            <value>The object affected by the current operation.</value>
        </member>
        <member name="T:Chili.Opf3.Mapping.Providers.XmlTypeMappingProvider">
             <summary>
             Creates the type mapping for one or more persistent types by using XML data 
             (contained in XML files or embedded stream) that hold the mapping for the persistent objects.
             </summary>
             <remarks>
             For additional information on how to compose the XML for the mapping file please consult 
             the documentation of the <see cref="T:Chili.Opf3.Mapping.Providers.XmlMapping"/> class.
             </remarks>
             <example>
             The following example shows how to register the mapping provider with the framework.
             <code lang="csharp">
             // Create an instance of the XML type mapping provider.
             XmlTypeMappingProvider provider = new XmlTypeMappingProvider();
             // Load an XML mapping from a given file and add it to the provider.
             provider.AddXmlMapping(XmlMapping.Load("Mapping.xml"));
            
             // Add this provider as mapping provider for the framework.
             // To remove all other registered providers (by default the attribute based
             // mapping provider is registered) call RemoveAll before adding the XML
             // based mapping provider.
             TypeMapping.Providers.Add(provider);
             </code>
             </example>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.XmlTypeMappingProvider.GetPersistentAttribute(System.Type)">
            <summary>
            Returns the persistent attribute of the type or null if the type has no 
            <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see>.
            </summary>
            <param name="type">Type investigated for the <see cref="T:Chili.Opf3.PersistentAttribute">PersistentAttribute</see>.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.XmlTypeMappingProvider.GetMemberFieldAttribute(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> for the given member. If the member is not mapped,
            null is returned.
            </summary>
            <param name="type">The persistent type that's mapping is created.</param>
            <param name="member">The member of the persistent type.</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> or null if the member is not mapped.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.XmlTypeMappingProvider.GetMemberRelationAttribute(System.Type,System.Reflection.MemberInfo,System.Type)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> for the given member. If the member does not
            have an attribute set, null is returned.
            </summary>
            <param name="type">The persistent type that's mapping is created.</param>
            <param name="member">The member of the persistent type.</param>
            <param name="relatedType">The related object's type.</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.Relations.RelationAttribute">RelationAttribute</see> or null if the member does not have
            an attribute set.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.Providers.XmlTypeMappingProvider.AddXmlMapping(Chili.Opf3.Mapping.Providers.XmlMapping)">
            <summary>
            Adds an <see cref="T:Chili.Opf3.Mapping.Providers.XmlMapping"/> to the provider.
            </summary>
            <param name="mapping">The <see cref="T:Chili.Opf3.Mapping.Providers.XmlMapping"/> that's added to the provider.</param>
        </member>
        <member name="T:Chili.Opf3.Storages.IndexViolationException">
            <summary>
            Exception is thrown if a index has been violated while persisting an object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.IndexViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Storages.IndexViolationException">IndexViolationException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.IndexViolationException.#ctor(Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.IndexViolationException">IndexViolationException Class</see>.
            </summary>
            <param name="query">Query that has been executed before the exception has been thrown.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.IndexViolationException.#ctor(System.String,Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.IndexViolationException">IndexViolationException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="query">Query that has been executed before the exception has been thrown.</param>
        </member>
        <member name="M:Chili.Opf3.Storages.IndexViolationException.#ctor(System.String,System.Exception,Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.IndexViolationException">IndexViolationException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="inner">The exception that caused the current exception.</param>
            <param name="query">Query that has been executed before the exception has been thrown.</param>
        </member>
        <member name="T:Chili.Opf3.Storages.MsSql.MsSqlSavePoint">
            <summary>
            This class provides a save point for the <see cref="T:Chili.Opf3.Storages.MsSql.MsSqlStorage">MsSqlStorage</see> 
            class. It is returned by the <see cref="M:Chili.Opf3.Storages.MsSql.MsSqlTransaction.CreateSavePoint(System.String)">MsSqlTransaction.CreateSavePoint</see>
            method and may be used in the <see cref="M:Chili.Opf3.Storages.MsSql.MsSqlTransaction.Rollback(Chili.Opf3.Storages.MsSql.MsSqlSavePoint)">MsSqlTransaction.Rollback</see> method.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Storages.MsSql.MsSqlSavePoint.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Storages.MsSql.MsSqlSavePoint">MsSqlSavePoint Class</see>.
            </summary>
            <param name="name">The name of the save point.</param>
        </member>
        <member name="P:Chili.Opf3.Storages.MsSql.MsSqlSavePoint.ObjectInfos">
            <summary>
            Returns the list of changes <see cref="T:Chili.Opf3.ObjectInfo">ObjectInfos</see>.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Storages.MsSql.MsSqlSavePoint.Name">
            <summary>
            Returns the name of the save point.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.OPathParser`1">
            <summary>
            This class is the internal OPath parser of the framework. It is used by the
            <see cref="T:Chili.Opf3.Query.OPath">OPath</see> class to parse OPath expressions.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OPathParser`1.Parse(Chili.Opf3.Query.ObjectQuery{`0})">
            <summary>
            Parses the <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see> and
            returns an <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see> containing
            the parsed query.
            </summary>
            <param name="query"><see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see> that is parsed.</param>
            <returns>An <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see> that contains the
            parsed <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see>.</returns>
            <exception cref="T:System.ArgumentNullException">Query is null.</exception>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OPathParser`1.InternalParse(Chili.Opf3.Query.OPathParser.Tokenizer,Chili.Opf3.Query.OPathParser.OEItem,System.Collections.Generic.IList{System.Object},System.Type,Chili.Opf3.Query.ObjectExpression)">
            <summary>
            Method is called to parsed a given item of the 
            <see cref="T:Chili.Opf3.Query.ObjectExpression">ObjectExpression</see>. This routine
            is called each time an item is parsed.
            </summary>
            <param name="tokenizer">The tokenizer class returning the tokens that are parsed.</param>
            <param name="item">The current item that is parsed.</param>
            <param name="parameters">A list of parameters of the query.</param>
            <param name="type">The type of the current persistent object that is parsed. This type changes
            on joines.</param>
            <param name="objectExpression">The ObjectExpression that is compiled.</param>
            <returns>An item that contains other parsed items (contains a three).</returns>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OPathParser`1.ParseJoin(Chili.Opf3.Query.OPathParser.Token,System.Collections.Generic.IList{System.Object},System.Type,Chili.Opf3.Query.ObjectExpression)">
            <summary>
            Parses a join condition.
            </summary>
            <param name="token">The current token that is parsed.</param>
            <param name="parameters">A list of parameters from the query.</param>
            <param name="type">Type of the persistent object that is parsed.</param>
            <returns>An item that contains other parsed items (contains a three).</returns>
            <param name="objectExpression">The ObjectExpression that is compiled.</param>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OPathParser`1.ParseCommand(Chili.Opf3.Query.OPathParser.Token,System.Collections.Generic.IList{System.Object},System.Type)">
            <summary>
            Parses a command.
            </summary>
            <param name="token">The token that contains the command.</param>
            <param name="parameters">A list of parameters from the query.</param>
            <param name="type">Type of the persistent object that is parsed.</param>
            <returns>An item that contains other parsed items (contains a three).</returns>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OPathParser`1.ParseMember(Chili.Opf3.Query.OPathParser.Token,System.String,System.Type)">
            <summary>
            Parses a member.
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="token">Token that contains the property.</param>
            <param name="type">Type of the persistent object that is parsed.</param>
            <returns>A property object that contains the parsed property</returns>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OPathParser`1.ParseParameter(Chili.Opf3.Query.OPathParser.Token,System.Collections.Generic.IList{System.Object})">
            <summary>
            Parses a parameter. The parameter could be an inline parameter or a parameter that
            is referenced inside the OPath by a Tag ({0}, {1}, ...).
            </summary>
            <param name="token">Token that contains the parameter.</param>
            <param name="parameters">A list of parameters from the query.</param>
            <returns>An item that contains the parameter.</returns>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OPathParser`1.ParseCondition(Chili.Opf3.Query.OPathParser.Tokenizer,Chili.Opf3.Query.OPathParser.Token,System.Collections.Generic.IList{System.Object},System.Type)">
            <summary>
            Parses a condition.
            </summary>
            <param name="tokenizer">The tokenizer that is used to parse the condition.</param>
            <param name="token">The token containing the condition.</param>
            <param name="parameters">A list of parameters from the query.</param>
            <param name="type">The type of the persistent object that is parsed.</param>
            <returns>A parsed condition or a three of items (if the condition contains commands).</returns>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OPathParser`1.ParseSortBy(Chili.Opf3.Query.OPathParser.Token,System.Type)">
            <summary>
            Parses a SortBy condition.
            </summary>
            <param name="token">The token that contains the SortBy condition.</param>
            <param name="type">The type of the persistent object that is parsed.</param>
            <returns>A parsed SortBy condition.</returns>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.OECommand">
            <summary>
            Represents a custom command in the OPath statement. 
            </summary>
            <remarks>
            Custom commands in a OPath statement are converted to this class when OPath is compiled.
            Those commands are then converted to a command that can be executed on the storage.
            Look at the documentation of the <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see>
            class for further information about custom commands.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OECommand.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.OPathParser.OECommand">OECommand Class</see>.
            </summary>
            <param name="name">Name of the command.</param>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.OECommand.Name">
            <summary>
            Returns the name of the command.
            </summary>
            <value>The name of the custom command.</value>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.OECommand.Arguments">
            <summary>
            A list that contains the arguments of the command. A command can also contain commands.
            For example: SubString(UserName, 1, 3) contains two arguments: 1 and 3.
            </summary>
            <value></value>
        </member>
        <member name="T:Chili.Opf3.DynamicProperties.DynamicPropertyException">
            <summary>
            Exception is thrown if something goes wrong while creating the 
            <see cref="T:Chili.Opf3.DynamicProperties.DynamicProperty">DynamicProperties</see> or converting them to xml.
            </summary>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.DynamicProperties.DynamicPropertyException">DynamicPropertyException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertyException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicPropertyException">DynamicPropertyException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertyException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicPropertyException">DynamicPropertyException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
        </member>
        <member name="M:Chili.Opf3.DynamicProperties.DynamicPropertyException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.DynamicProperties.DynamicPropertyException">DynamicPropertyException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="inner">The exception that caused the current exception.</param>
        </member>
        <member name="T:Chili.Opf3.Mapping.MemberInfoCollection">
            <summary>
            Class that represents a collection of <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> objects.
            </summary>
            <remarks>
            This class represents a collection of <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> objects. An instance of this class 
            is stored as list of all mapped object elements with an instance of the 
            <see cref="T:Chili.Opf3.Mapping.TypeMapping">TypeMapping</see> class.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Mapping.MemberInfoCollection.Add(Chili.Opf3.Mapping.IMemberInfo)">
            <summary>
            Adds the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> object to the list.
            </summary>
            <param name="info">The object that is added.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.MemberInfoCollection.GetIdentifierMemberMappings">
            <summary>
            Returns a list that contains the member mappings for the identifier member of the type.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Mapping.MemberInfoCollection.GetMemberInfoByField(System.String)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> object associated with the given field name.
            </summary>
            <param name="fieldName">The name of the field in the storage.</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> class associated with the given field name.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.MemberInfoCollection.GetMemberInfoByName(System.String)">
            <summary>
            Returns the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> object associated with the given name of an object member.
            </summary>
            <param name="memberName">The name of an object member (a property or a field).</param>
            <returns>An instance of the <see cref="T:Chili.Opf3.Mapping.IMemberInfo">IMemberInfo</see> class associated with the given object member.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.MemberInfoCollection.Contains(Chili.Opf3.Mapping.IMemberInfo)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.MemberInfoCollection.CopyTo(Chili.Opf3.Mapping.IMemberInfo[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.MemberInfoCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns> A enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.MemberInfoCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An enumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Chili.Opf3.Mapping.MemberInfoCollection.Count">
            <summary>
            Gets the number of elements actually contained in the collection.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.MemberInfoCollection.IsReadOnly">
            <summary>
            Returns whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Mapping.MemberInfoCollection.Item(System.Int32)">
            <summary>
            Returns the item at the given index.
            </summary>
            <param name="index">The index of the item that is returned.</param>
            <returns>The item at the given index.</returns>
        </member>
        <member name="T:Chili.Opf3.Mapping.FieldMetaInfo">
            <summary>
            Class represents a meta element that is used to create the mapping between the persistent object and
            the field in the table.
            </summary>
            <remarks>
            This class represents a meta element that is used to create the mapping between a field
            of the persistent object and a field in the storage table.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Mapping.FieldMetaInfo.#ctor(System.Reflection.FieldInfo,System.Type,Chili.Opf3.FieldAttribute)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Mapping.FieldMetaInfo">FieldMetaInfo Class</see>.
            </summary>
            <param name="fieldInfo">The FieldInfo object that represents the field in the persistent object's type.</param>
            <param name="memberType">The type of the MemberInfo object.</param>
            <param name="attribute">The <see cref="T:Chili.Opf3.FieldAttribute">FieldAttribute</see> that contains the mapping information.</param>
        </member>
        <member name="M:Chili.Opf3.Mapping.FieldMetaInfo.GetValue(System.Object)">
            <summary>
            Returns the value of the element of the persistent object type that is mapped to a field in the storage.
            </summary>
            <param name="obj">The persistent object that's value is returned.</param>
            <returns>Value of the persistent object's type element that is mapped to a field in the storage.</returns>
        </member>
        <member name="M:Chili.Opf3.Mapping.FieldMetaInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets new value for the element of the persistent object type that is mapped to the storage.
            </summary>
            <param name="obj">The persistent object that's member's value is updated.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="P:Chili.Opf3.Mapping.FieldMetaInfo.Name">
            <summary>
            Returns the name of the element of the persistent object type that is mapped to the field in the storage.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Relations.ObjectSetHolder`1">
            <summary>
            Holds an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> of objects that are connected with the parent object.
            </summary>
            <remarks>
            This class is used in a persistent class to hold an <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> of objects 
            that are connected with the parent object. When accessing the first time the 
            <see cref="P:Chili.Opf3.Relations.ObjectHolder`1.InnerObject">InnerObject</see> property the related
            objects are loaded. This is called delayed loading and reduces roundtrips to the storage.
            </remarks>
            <example>
            The following example shows how to use the ObjectSetHolder in your persistent objects. In the
            example each User has associated Calls.
            <code lang="CS">
            [Persistent("USER", PoolSize = 50)]
            public class User
            {
            	// The class contains an ObjectSetHolder and a RelationAttribute
            	// that specifies the relation between the parent object and the 
            	// related objects. It demonstrates also how to use a condition to 
            	// delimit the items in the list and to sort the result.
            	[Relation("Id", "UserId")]
            	private ObjectSetHolder&lt;Call&gt; _calls = 
            		new ObjectSetHolder&lt;Call&gt;("Duration &lt; {0} SortBy Duration Asc", "50");
            
            	public ObjectSet&lt;Call&gt; Calls
            	{
            		get { return _calls.InnerObject; }
            		set { _calls.InnerObject = value; }
            	}
            	
            	// ... Other properties and code.
            }
            </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectSetHolder`1.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.ObjectSetHolder`1">ObjectSetHolder Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectSetHolder`1.#ctor(System.String,System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.ObjectSetHolder`1">ObjectSetHolder Class</see>.
            </summary>
            <param name="conditions">OPath that is used when retrieving the objects. For more information about OPath
            look at the <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see> class.</param>
            <param name="parameters">A list of parameters that are used in the OPath expression.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectSetHolder`1.#ctor(Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.ObjectSetHolder`1">ObjectSetHolder Class</see>.
            </summary>
            <param name="query"><see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is executed to load the associated 
            objects. This parameter allows you to use any kind of query without using the build in functionality.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectSetHolder`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.ObjectSetHolder`1">ObjectSetHolder Class</see>.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectSetHolder`1.OnFetchingStorageRecord(System.Object,Chili.Opf3.FetchingStorageRecordEventArgs)">
            <summary>
            Invokes the FetchingStorageRecord event.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectSetHolder`1.InnerLoad(Chili.Opf3.ObjectContext)">
            <summary>
            Loads the related object(s) from the storage.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectSetHolder`1.PersistChanges(Chili.Opf3.ObjectContext,Chili.Opf3.PersistDepths)">
            <summary>
            This method is invoked to persist the changes on the objects in the ObjectHolder.
            </summary>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> used to persist 
            the changes. It is the same <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> as used by the
            parent object.</param>
            <param name="persistDepth">Specifies the depth of the loaded object graph that is persisted.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectSetHolder`1.ConnectPropertiesInChildObjects">
            <summary>
            This method connects the foreign-key properties in the child persistent objects with the identifier
            properties of the parent object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectSetHolder`1.HasModifiedObjects(Chili.Opf3.ObjectContext)">
            <summary>
            This method is invoked to check if any of the ObjectHolder's objects have been modified.
            </summary>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> used to check for modified 
            objects. It is the same <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> as used by the
            parent object.</param>
            <returns>True if an object has been modified; false othewise.</returns>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectSetHolder`1.HasRemovedObjects">
            <summary>
            This method is invoked to check if the <see cref="T:Chili.Opf3.Relations.ObjectSetHolder`1"/> has removed objects.
            </summary>
            <returns>True if an object has been removed; false otherwise</returns>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectSetHolder`1.Invalidate">
            <summary>
            <para>
            Invalidates the current instance. The next request of the InnerObject property reloads all the 
            related objects. This is only true if the automatic load of the related objects has been enabled. 
            Otherwise the reload method needs to be invoked (after calling Invalidate) to do a manual reload.
            </para>
            <para>
            The call of this method removes the objects also from the identity map if one is in place. This makes
            sure that the objects are really reloaded from the storage and not from the identity map again.
            </para>
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectSetHolder`1.GetRawEnumerator">
            <summary>
            Gets the enumerator for the given loaded related data. This method doesn't load
            data from the storage but rather returns the currently loaded data.
            </summary>
        </member>
        <member name="E:Chili.Opf3.Relations.ObjectSetHolder`1.FetchingStorageRecord">
             <summary>
             Event is fired before the data from the storage is used to populate an object.
             </summary>
             <remarks>
             This event is fired before the data from the storage is used to populate an object. It allows the user
             to specify another type for the row (item) that is populated with the data. It allows also to have 
             certain items ignored. This event can be used in certain scenarios of inheritance.
             </remarks>
             <example>
             The following example introduces to the use of the FecthingStorageRecord event. 
             <code lang="CS">
             [Persistent("USER", PoolSize = 50)]
             public class User
             {
            		// The class contains an ObjectSetHolder and a RelationAttribute
            		// that specifies the relation between the parent object and the 
            		// related objects. It demonstrates also how to use a condition to 
            		// delimit the items in the list and to sort the result.
            		[Relation("Id", "UserId")]
            		private ObjectSetHolder&lt;Call&gt; _calls = 
            			new ObjectSetHolder&lt;Call&gt;("Duration &lt; {0} SortBy Duration Asc", "50");
            	
                 public User()
                 {
                     _calls.FetchingStorageRecord += PersistentTypeSelector(MySelection);
                 }
             
                 private void MySelection(object sender, FetchingStorageRecordEventArgs e)
                 {
                    if (e.DataRecord["Type"] == "1")
                    {
                        // Switch the type of the persistent that is created to User1.
            	           e.Type = typeof(User1);
                    }
                    else if ((bool)e.DataRecord["Ignore"])
                    {
                        // Tell the framework to ignore this item.
                        e.Ignore = true;
                    }
                    // Have a persistent of type User created.
                    e.Type = typeof(User);
                 }
            
            		public ObjectSet&lt;Call&gt; Calls
            		{
            			get { return _calls.InnerObject; }
            			set { _calls.InnerObject = value; }
            		}
            		
            		// ... Other properties and code.
             }
             
             // ...
             
             ObjectSet&lt;User&gt; objectSet = context.GetObjectSet&lt;User&gt;();
             foreach(User user in objectSet)
             {
                 foreach(Call call in user.Calls)
                 {
                     if (call.GetType() == typeof(Call1))
                         Console.WriteLine("Call1 found.");
                     else
                         Console.WriteLine("Call found.");
                 }
             }
             
             </code>
             </example>
        </member>
        <member name="P:Chili.Opf3.Relations.ObjectSetHolder`1.Value">
            <summary>
            Gets and sets the list of objects that are related to the parent object.
            </summary>
            <value>A <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> that contains the related persistent objects.</value>
        </member>
        <member name="P:Chili.Opf3.Relations.ObjectSetHolder`1.InnerObject">
            <summary>
            Depreciated: Use the Value property instead!
            Gets and sets the list of objects that are related to the parent object.
            </summary>
            <value>A <see cref="T:Chili.Opf3.ObjectSet`1">ObjectSet</see> that contains the related persistent objects.</value>
        </member>
        <member name="T:Chili.Opf3.Relations.ObjectListHolder`1">
            <summary>
            Holds a list of objects that are connected with the parent object.
            </summary>
            <remarks>
            This class is used in a persistent class to hold a list of objects that are connected with 
            the parent object. When accessing the first time the 
            <see cref="P:Chili.Opf3.Relations.ObjectHolder`1.InnerObject">InnerObject</see> property the related
            objects are loaded. This is called delayed loading and reduces roundtrips to the storage.
            </remarks>
            <example>
            The following example shows how to use the ObjectListHolder in your persistent objects. In the
            example each User has associated Calls.
            <code lang="CS">
            [Persistent("USER", PoolSize = 50)]
            public class User
            {
            	// The class contains an ObjectListHolder and a RelationAttribute
            	// that specifies the relation between the parent object and the 
            	// related objects. It demonstrates also how to use a condition to 
            	// delimit the items in the list and to sort the result.
            	[Relation("Id", "UserId")]
            	private ObjectListHolder&lt;Call&gt; _calls = 
            		new ObjectListHolder&lt;Call&gt;(new List&lt;Call&gt;(), "Duration &lt; {0} SortBy Duration", "50");
            
            	public List&lt;Call&gt; Calls
            	{
            		get { return _calls.InnerObject; }
            		set { _calls.InnerObject = value; }
            	}
            	
            	// ... Other properties and code.
            }
            </code>
            </example>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectListHolder`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.ObjectListHolder`1">ObjectListHolder Class</see>.
            </summary>
            <param name="list">List that is populated with the connected objects.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectListHolder`1.#ctor(System.Collections.Generic.IList{`0},System.String,System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.ObjectListHolder`1">ObjectListHolder Class</see>.
            </summary>
            <param name="list">List that is populated with the connected objects.</param>
            <param name="conditions">OPath that is used when retrieving the objects. For more information about OPath
            look at the <see cref="T:Chili.Opf3.Query.ObjectQuery`1">ObjectQuery</see> class.</param>
            <param name="parameters">A list of parameters that are used in the OPath expression.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectListHolder`1.#ctor(System.Collections.Generic.IList{`0},Chili.Opf3.Query.IQuery)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.ObjectListHolder`1">ObjectListHolder Class</see>.
            </summary>
            <param name="list">List that is populated with the connected objects.</param>
            <param name="query"><see cref="T:Chili.Opf3.Query.IQuery">IQuery</see> that is executed to load the associated 
            objects. This parameter allows you to use any kind of query without using the build in functionality.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectListHolder`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Relations.ObjectListHolder`1">ObjectListHolder Class</see>.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectListHolder`1.InnerLoad(Chili.Opf3.ObjectContext)">
            <summary>
            Loads the related object(s) from the storage.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectListHolder`1.PersistChanges(Chili.Opf3.ObjectContext,Chili.Opf3.PersistDepths)">
            <summary>
            This method is invoked to persist the changes on the objects in the ObjectHolder.
            </summary>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> used to persist 
            the changes. It is the same <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> as used by the
            parent object.</param>
            <param name="persistDepth">Specifies the depth of the loaded object graph that is persisted.</param>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectListHolder`1.ConnectPropertiesInChildObjects">
            <summary>
            This method connects the foreign-key properties in the child persistent objects with the identifier
            properties of the parent object.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectListHolder`1.HasModifiedObjects(Chili.Opf3.ObjectContext)">
            <summary>
            This method is invoked to check if any of the ObjectHolder's objects have been modified.
            </summary>
            <param name="context"><see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> used to check for modified 
            objects. It is the same <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> as used by the
            parent object.</param>
            <returns>True if an object has been modified; false othewise.</returns>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectListHolder`1.HasRemovedObjects">
            <summary>
            This method is invoked to check if the <see cref="T:Chili.Opf3.Relations.ObjectListHolder`1"/> has removed objects.
            </summary>
            <returns>True if an object has been removed; false otherwise</returns>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectListHolder`1.Invalidate">
            <summary>
            <para>
            Invalidates the current instance. The next request of the InnerObject property reloads all the 
            related objects. This is only true if the automatic load of the related objects has been enabled. 
            Otherwise the reload method needs to be invoked (after calling Invalidate) to do a manual reload.
            </para>
            <para>
            The call of this method removes the objects also from the identity map if one is in place. This makes
            sure that the objects are really reloaded from the storage and not from the identity map again.
            </para>
            </summary>
        </member>
        <member name="M:Chili.Opf3.Relations.ObjectListHolder`1.GetRawEnumerator">
            <summary>
            Gets the enumerator for the given loaded related data. This method doesn't load
            data from the storage but rather returns the currently loaded data.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Relations.ObjectListHolder`1.Value">
            <summary>
            Gets and sets the list of objects that are related to the parent object.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.IList`1">IList</see> that contains the 
            related persistent objects.</value>
        </member>
        <member name="P:Chili.Opf3.Relations.ObjectListHolder`1.InnerObject">
            <summary>
            Depreciated: Use the Value property instead!
            Gets and sets the list of objects that are related to the parent object.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.IList`1">IList</see> that contains the 
            related persistent objects.</value>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.OEWhereCondition">
            <summary>
            Represents a Where condition in the OPath statement. 
            </summary>
            <remarks>
            Where conditions in a OPath statement are converted to this class when OPath is compiled.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OEWhereCondition.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.OPathParser.OEWhereCondition">OEWhereCondition Class</see>.
            </summary>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.OPathException">
            <summary>
            Exception is thrown if an OPath expression is invalid.
            </summary>
            <remarks>
            This exception is thrown if an OPath expression is invalid and could not be parsed successfully.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OPathException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Query.OPathParser.OPathException">OPathException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="token">The current token which generated the exception.</param>
            <param name="oPath">The whole OPath expression that is parsed.</param>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OPathException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Query.OPathParser.OPathException">OPathException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="inner">The exception that caused the current exception.</param>
            <param name="token">The current token which generated the exception.</param>
            <param name="oPath">The whole OPath expression that is parsed.</param>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.Query.OPathParser.OPathException">OPathException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OPathException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Restores the objects data after serialization.
            </summary>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OPathException.ToString">
            <summary>
            Returns a string representation of the current instance of the class.
            </summary>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.OPathException.Token">
            <summary>
            Returns the token that generated the exception.
            </summary>
            <value>The token that generated the exception.</value>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.OPathException.OPath">
            <summary>
            Returns the whole OPath expression that is parsed.
            </summary>
            <value>The OPath expression that is parsed.</value>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.OESortByMember">
            <summary>
            Represents a single sort expression in the OPath statement. 
            </summary>
            <remarks>
            SortBy members in a OPath statement are converted to instances of
            this class when OPath is compiled.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OESortByMember.#ctor(Chili.Opf3.Query.OPathParser.SortOrders)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.OPathParser.OESortByMember">OESortByMember Class</see>.
            </summary>
            <param name="sortOrder">Specifies the sort direction.</param>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.OESortByMember.SortOrder">
            <summary>
            Returns the sort direction.
            </summary>
            <value>Sort direction of the SortBy statement.</value>
        </member>
        <member name="T:Chili.Opf3.Query.OPathParser.OEConcat">
            <summary>
            Represents a concat expression in the OPath statement. 
            </summary>
            <remarks>
            Concat expression (And, Or) in a OPath statement are converted to this class when OPath is compiled.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.Query.OPathParser.OEConcat.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Query.OPathParser.OEConcat">OEConcat Class</see>.
            </summary>
            <param name="value">Value of the command.</param>
        </member>
        <member name="P:Chili.Opf3.Query.OPathParser.OEConcat.Value">
            <summary>
            Returns the value of the concat.
            </summary>
            <value>The value of the concat.</value>
        </member>
        <member name="T:Chili.Opf3.ConstraintException">
            <summary>
            Exception is thrown if a property marked as mandatory
            (<see cref="P:Chili.Opf3.FieldAttribute.AllowDBNull">AllowDBNull</see> is false) is tried to be
            saved with a value that corresponds DBNull (for example null).
            </summary>
            <remarks>
            This exception is thrown if a property marked with the
            <see cref="P:Chili.Opf3.FieldAttribute.AllowDBNull">AllowDBNull</see> property set to false is
            containing Null and the program tries to save it to the storage.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.ConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.ConstraintException">ConstraintException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ConstraintException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.ConstraintException">ConstraintException Class</see>.
            </summary>
        </member>
        <member name="M:Chili.Opf3.ConstraintException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.ConstraintException">ConstraintException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
        </member>
        <member name="M:Chili.Opf3.ConstraintException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Chili.Opf3.ConstraintException">ConstraintException Class</see>.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="inner">The exception that caused the current exception.</param>
        </member>
        <member name="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampAttribute">
             <summary>This attribute is used to connect a member with the time stamp field of the
             <see cref="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampConcurrencyManager">TimeStampConcurrencyManager</see> in the storage.</summary>
             <remarks>
             The TimeStampAttribute is used to connect a member of the persistent class with a field of the storage. The property is
             used as time stamp property for the <see cref="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampConcurrencyManager">TimeStampConcurrencyManager</see>. Every time
             and update is performed the time stamp is checked of being changed. If the stamp changed the object was modified by somebody
             else in the mean time (in the time being in memory).
             </remarks>
             <example>
                 The following example shows how to use the TimeStampAttribute in a persistent class.
                 <code lang="CS">
             [Persistent("USER")]
             public class User
             {
                 // ... Other code of the class.
            
                 [TimeStamp]
            		[Field("TIME_STAMP")]
                 public string TimeStamp
                 {
                     // ... code of the property.
                 }
             }
                 </code>
             </example>
        </member>
        <member name="M:Chili.Opf3.Concurrency.TimeStamp.TimeStampAttribute.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Chili.Opf3.Concurrency.TimeStamp.TimeStampAttribute">TimeStampAttribute Class</see>.
            </summary>
        </member>
        <member name="T:Chili.Opf3.BeforeObjectPersistingEventArgs">
            <summary>
            EventArgs used in the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> events
            that are invoked before the persist process of an object.
            </summary>
            <remarks>
            This class is used by the <see cref="T:Chili.Opf3.ObjectContext">ObjectContext</see> in
            events that are invoked before the persist process of an object to send additional event
            data. The data contains the object that is persisted.
            </remarks>
        </member>
        <member name="M:Chili.Opf3.BeforeObjectPersistingEventArgs.#ctor(System.Object)">
            <summary>
            Creates a new instance of the<see cref="T:Chili.Opf3.BeforeObjectPersistingEventArgs">BeforeObjectPersistingEventArgs Class</see>.
            </summary>
            <param name="obj">The object that is affected by the current operation. This object is persisted to the storage. </param>
            <exception cref="T:System.ArgumentNullException">Query is null, obj is null or objectInfo is null.</exception>
        </member>
        <member name="P:Chili.Opf3.BeforeObjectPersistingEventArgs.Object">
            <summary>
            Returns the object that is affected by the current operation. This object is
            persisted to the storage.
            </summary>
            <value>The object affected by the current operation.</value>
        </member>
    </members>
</doc>
